Sjasm Z80 Assembler v0.42b8 - www.xl2s.tk             [2016.05.14 - 11:22:53]

main64.asm
Errors: 0

       1   00:0000                      ;p0 = 187 
       2   00:0000                      ;p1 = 122 
       3   00:0000                      ;p2 = 139
       4   00:0000                      ;p3 = 132
       5   00:0000                      ;
       6   00:0000                      ; -----------------------------
       7   00:0000                      ; smooth scroller engine
       8   00:0000                      ; Uridium 64K
       9   00:0000                      ; Trilobyte 2014
      10   00:0000                      ; ------------------------------
      11   00:0000                      	incdir levels/
      12   00:0000                      	incdir mus/
      13   00:0000                      	incdir afx/
      14   00:0000                      	incdir graphic/
      15   00:0000                      
      16   00:0000                      	output URDIUM64.rom
      17   00:0000                      	
      18   00:0000                      	defpage 0,0x0000,0x4000
      19   00:0000                      	defpage 1,0x4000,0x4000
      20   00:0000                      	defpage 2,0x8000,0x4000
      21   00:0000                      	defpage 3,0x8000,0x4000
      22   00:0000                      
      23   00:0000                      ; ------------------------------
      24   00:0000                      	code page 0
      25   00:0000                      
      26   00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      27   00:0000                      	include macros.asm	
       1.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  00:0000                      ; vdp access
       3.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       4.  00:0000                      
       5.  00:0000  (00:F3DF)           _vdpReg 	equ 0xF3DF
       6.  00:0000  (00:F3AE)           LINL40		equ 0xF3AE
       7.  00:0000  (00:FC9E)           JIFFY:		equ 0xFC9E
       8.  00:0000                      
       9.  00:0000  (00:0024)           enaslt:          equ #0024
      10.  00:0000  (00:FCC1)           exptbl:          equ #fcc1
      11.  00:0000  (00:FCC5)           slttbl:          equ #fcc5
      12.  00:0000                      
      13.  00:0000                      ; ------------
      14.  00:0000                      ; macro
      15.  00:0000                      
      16.  00:0000                      	macro _setVdp register,value	   ; macro definition
      17.  00:0000                    < 	ld	a,value
      18.  00:0000                    < 	out (0x99),a
      19.  00:0000                    < 	ld	a,register + 0x80
      20.  00:0000                    < 	out (0x99),a
      21.  00:0000                    < 	endmacro
      22.  00:0000                      
      23.  00:0000                      	macro setVdp register,value		  ; macro definition
      24.  00:0000                    < 	di
      25.  00:0000                    < 	_setVdp register,value
      26.  00:0000                    < 	ei
      27.  00:0000                    < 	endmacro
      28.  00:0000                      
      29.  00:0000                      	macro _setvdpwvram value
      30.  00:0000                    < 	if (value & 0xFF)
      31.  00:0000                    < 		ld	a,value & 0xFF
      32.  00:0000                    < 	else
      33.  00:0000                    < 		xor a
      34.  00:0000                    < 	endif
      35.  00:0000                    < 	out (0x99),a
      36.  00:0000                    < 	ld	a,0x40 + (value/256)
      37.  00:0000                    < 	out (0x99),a
      38.  00:0000                    < 	endmacro
      39.  00:0000                      
      40.  00:0000                      	macro setvdpwvram value
      41.  00:0000                    < 	di
      42.  00:0000                    < 	_setvdpwvram value
      43.  00:0000                    < 	ei
      44.  00:0000                    < 	endmacro
      45.  00:0000                      
      28   00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      29   00:0000                      	code
      30   00:3F30                      checkkbd:
      31   00:3F30  DB AA               	in	a,(0aah)
      32   00:3F32  E6 F0               	and 011110000B			; upper 4 bits contain info to preserve
      33   00:3F34  B3                  	or	e
      34   00:3F35  D3 AA               	out (0aah),a
      35   00:3F37  DB A9               	in	a,(0a9h)
      36   00:3F39  6F                  	ld	l,a
      37   00:3F3A  C9                  	ret
      38   00:3F3B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      39   00:3F3B                      	code	
      40   00:3F0B                      write_256:
      41   00:3F0B  01 98 00            	ld	bc,0x0098
      42   00:3F0E                      [8]	otir
      42   00:3F0E  ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 
      43   00:3F1E  C9                  	ret
      44   00:3F1F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      45   00:3F1F                      	code		
      46   00:3EF5                      enascr:
      47   00:3EF5  3A E0 F3            	ld	   a,(_vdpReg + 1)
      48   00:3EF8  F6 40               	or	   #40
      49   00:3EFA  18 05               	jr	   1f
      50   00:3EFC                      disscr:
      51   00:3EFC  3A E0 F3            	ld	   a,(_vdpReg + 1)
      52   00:3EFF  E6 BF               	and	   #bf
      53   00:3F01  D3 99               1:	out	   (#99),a
      54   00:3F03  32 E0 F3            	ld	   (_vdpReg + 1),a
      55   00:3F06  3E 81               	ld	   a,1 + 128
      56   00:3F08  D3 99               	out	   (#99),a
      57   00:3F0A  C9                  	ret
      58   00:3F0B                      
      59   00:3F0B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      60   00:3F0B                      	code	
      61   00:3F3B                      setwrtvram:
      62   00:3F3B  F3                  	di
      63   00:3F3C  7B                  	ld	a,e
      64   00:3F3D  D3 99               	out (0x99),a
      65   00:3F3F  7A                  	ld	a,d
      66   00:3F40  F6 40               	or 0x40
      67   00:3F42  D3 99               	out (0x99),a
      68   00:3F44  C9                  	ret
      69   00:3F45                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      70   00:3F45                      ; write 2K while ints are active from miz_buffer
      71   00:3F45                      ; in: de vram address
      72   00:3F45                      	code	
      73   00:0000                      write_2k:
      74   00:0000  EB                  	ex	de,hl
      75   00:0001  CB F4               	set	6,h
      76   00:0003  0E 99               	ld	c,0x99
      77   00:0005  11 10 00            	ld	de,16
      78   00:0008  D9                  	exx
      79   00:0009  21 00 C8            	ld	hl,miz_buffer
      80   00:000C  1E 7F               	ld 	e,127
      81   00:000E  0E 98               	ld	c,0x98
      82   00:0010  F3                  2:	di
      83   00:0011  D9                  	exx
      84   00:0012  ED 69               	out (c),l
      85   00:0014  ED 61               	out (c),h	;c' = 0x99, HL' with write setup bit set
      86   00:0016  19                  	add hl,de	;de' = 16
      87   00:0017  D9                  	exx
      88   00:0018  06 10               	ld b,16
      89   00:001A  ED A3               1:	outi		;c = 0x98
      90   00:001C  C2 1A 00            	jp nz,1b
      91   00:001F  FB                  	ei
      92   00:0020  1D                  	dec e
      93   00:0021  C2 10 00            	jp nz,2b
      94   00:0024  C9                  	ret
      95   00:0025                      
      96   00:0025                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      97   00:0025                      ;		   defb 0x02 ; Reg# 0 000000[M3][EV]
      98   00:0025                      ;		   defb 0x62 ; Reg# 1 [4/16k][BLANK][IE][M1][M2]0[SIZE][MAG]
      99   00:0025                      ;		   defb 0x06 ; Reg# 2 0000[NAME TABLE BASE ADDRESS]			 = 1800h
     100   00:0025                      
     101   00:0025                      ;		   defb 0x9F ; Reg# 3 [COLOR BASE ADDRESS]					 = 2000h ; hybrid mode for colors
     102   00:0025                      ;		   defb 0xFF ; Reg# 3 [COLOR BASE ADDRESS]					 = 2000h ; regular mode for colors
     103   00:0025                      
     104   00:0025                      ;		   defb 0x1F ; Reg# 3 [COLOR BASE ADDRESS]					 = 0000h ; hybrid mode for colors
     105   00:0025                      ;		   defb 0x7F ; Reg# 3 [COLOR BASE ADDRESS]					 = 0000h ; regular mode for colors
     106   00:0025                      
     107   00:0025                      ;		   defb 0x00 ; Reg# 4 00000[PATTERN GENERATOR BASE ADDRESS]	 = 0000h ; hybrid mode for patterns
     108   00:0025                      ;		   defb 0x03 ; Reg# 4 00000[PATTERN GENERATOR BASE ADDRESS]	 = 0000h ; regular mode for patterns
     109   00:0025                      
     110   00:0025                      ;		   defb 0x04 ; Reg# 4 00000[PATTERN GENERATOR BASE ADDRESS]	 = 2000h ; hybrid mode for patterns
     111   00:0025                      ;		   defb 0x07 ; Reg# 4 00000[PATTERN GENERATOR BASE ADDRESS]	 = 2000h ; regular mode for patterns
     112   00:0025                      
     113   00:0025                      ;		   defb 0x36 ; Reg# 5 0[SPRITE ATTRIBUTE TABLE BASE ADDRESS] = 1b00h
     114   00:0025                      ;		   defb 0x07 ; Reg# 6 00000[SPRITE PTRN GNRTR BASE ADDRESS]	 = 3800h
     115   00:0025                      ;		   defb 0x01 ; Reg# 7 [TEXT COLOR 4bts][BACKDROP COLOR 4bts]
     116   00:0025                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     117   00:0025                      
     118   00:0025                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     119   00:0025                      	code
     120   00:0025                      disp_page1:			; page 1 active
     121   00:0025                      	_setVdp 3,0x9F	;	colours at 0x2000	(hybrid)
     121   00:0025  3E 9F             >  ld a,value
     121   00:0027  D3 99             >  out (0x99),a
     121   00:0029  3E 83             >  ld a,register + 0x80
     121   00:002B  D3 99             >  out (0x99),a
     122   00:002D                      	_setVdp 4,0x03	;	patterns at 0x0000	(regular: used 0x0800 0x1000)
     122   00:002D  3E 03             >  ld a,value
     122   00:002F  D3 99             >  out (0x99),a
     122   00:0031  3E 84             >  ld a,register + 0x80
     122   00:0033  D3 99             >  out (0x99),a
     123   00:0035  C9                  	ret
     124   00:0036                      	code
     125   00:3F1F                      disp_page0:			; page 0 active
     126   00:3F1F                      	_setVdp 3,0x1F	;	colours at 0x0000	(hybrid)
     126   00:3F1F  3E 1F             >  ld a,value
     126   00:3F21  D3 99             >  out (0x99),a
     126   00:3F23  3E 83             >  ld a,register + 0x80
     126   00:3F25  D3 99             >  out (0x99),a
     127   00:3F27                      	_setVdp 4,0x07	;	patterns at 0x2000	(regular: used 0x2800 0x3000)
     127   00:3F27  3E 07             >  ld a,value
     127   00:3F29  D3 99             >  out (0x99),a
     127   00:3F2B  3E 84             >  ld a,register + 0x80
     127   00:3F2D  D3 99             >  out (0x99),a
     128   00:3F2F  C9                  	ret
     129   00:3F30                      
     130   00:3F30                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     131   00:3F30                      	include isr.asm
       1.  00:3F30                      
       2.  00:3F30                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:3F30                      ; Interrupt service routine
       4.  00:3F30                      ;
       5.  00:3F30                      	
       6.  00:3F30                      	code @ 	0x0038
       7.  00:0038                      isr:
       8.  00:0038  E5                  	push   hl         
       9.  00:0039  D5                  	push   de         
      10.  00:003A  C5                  	push   bc         
      11.  00:003B  F5                  	push   af         
      12.  00:003C  FD E5               	push   iy         
      13.  00:003E  DD E5               	push   ix         
      14.  00:0040                      	
      15.  00:0040  3A 24 EC            	ld	a,(ingame)
      16.  00:0043  A7                  	and	a
      17.  00:0044  C2 4C 00            	jp	nz,1f
      18.  00:0047  DB 99               	in	a,(0x99)	; exit from isr
      19.  00:0049  C3 F2 00            	jp	Music_only
      20.  00:004C                      1:
      21.  00:004C                      	_setVdp 5,0x37	;	SAT at 0x1b80
      21.  00:004C  3E 37             >  ld a,value
      21.  00:004E  D3 99             >  out (0x99),a
      21.  00:0050  3E 85             >  ld a,register + 0x80
      21.  00:0052  D3 99             >  out (0x99),a
      22.  00:0054                      	_setVdp 6,0x03	;	SPT at 0x1800	(used from 0x1C00 to 0x1FF	only 32 sprites 16x16)
      22.  00:0054  3E 03             >  ld a,value
      22.  00:0056  D3 99             >  out (0x99),a
      22.  00:0058  3E 86             >  ld a,register + 0x80
      22.  00:005A  D3 99             >  out (0x99),a
      23.  00:005C                      	; _setVdp 7,0x04
      24.  00:005C                      
      25.  00:005C  CD CB 03            	call 	_sat_update
      26.  00:005F  CD 24 04            	call	_plot_spt
      27.  00:0062                      		
      28.  00:0062  3A 20 EC            	ld	a,(toshiba_switch)		; Toshiba
      29.  00:0065  A7                  	and	a
      30.  00:0066  20 1E               	jr	nz,.compatibilty
      31.  00:0068                      	
      32.  00:0068  3A EE ED            	ld	a,(xmap)				; TMS
      33.  00:006B  E6 02               	and 2
      34.  00:006D  CA 76 00            	jp	z,.other_page
      35.  00:0070                      	
      36.  00:0070  CD 1F 3F            	call	disp_page0
      37.  00:0073                      	
      38.  00:0073  C3 79 00            	jp	.this_page
      39.  00:0076                      	
      40.  00:0076                      .other_page:
      41.  00:0076                      
      42.  00:0076  CD 25 00            	call	disp_page1
      43.  00:0079                      	
      44.  00:0079                      .this_page:
      45.  00:0079                      	
      46.  00:0079                      	_setvdpwvram 0x1900
      46.  00:0079                    >  if (value & 0xFF)
      46.  00:0079                    ~   ld a,value & 0xFF
      46.  00:0079                    ~  else
      46.  00:0079  AF                >   xor a
      46.  00:007A                    >  endif
      46.  00:007A  D3 99             >  out (0x99),a
      46.  00:007C  3E 59             >  ld a,0x40 + (value/256)
      46.  00:007E  D3 99             >  out (0x99),a
      47.  00:0080  CD 42 02            	call	_plot_pnt
      48.  00:0083  C3 90 00            	jp	1f
      49.  00:0086                      	
      50.  00:0086                      .compatibilty:
      51.  00:0086                      
      52.  00:0086                      	_setvdpwvram 0x1900
      52.  00:0086                    >  if (value & 0xFF)
      52.  00:0086                    ~   ld a,value & 0xFF
      52.  00:0086                    ~  else
      52.  00:0086  AF                >   xor a
      52.  00:0087                    >  endif
      52.  00:0087  D3 99             >  out (0x99),a
      52.  00:0089  3E 59             >  ld a,0x40 + (value/256)
      52.  00:008B  D3 99             >  out (0x99),a
      53.  00:008D  CD 38 02            	call	_plot_pnt_toshiba
      54.  00:0090                      1:
      55.  00:0090  CD 25 01            	call	_plot_strs
      56.  00:0093                      
      57.  00:0093                      	; Write values on PSG registers
      58.  00:0093  CD D7 56            	call	PT3_ROUT
      59.  00:0096  CD 90 59            	call 	en_scc
      60.  00:0099  28 09               	jr	z,1f
      61.  00:009B  CD 24 59                call    probewavechanges
      62.  00:009E  CD F0 58                call    SCCROUT	
      63.  00:00A1  CD AC 59            	call 	en_slot
      64.  00:00A4                      1:
      65.  00:00A4                      
      66.  00:00A4                      	_setVdp 7,0x00
      66.  00:00A4  3E 00             >  ld a,value
      66.  00:00A6  D3 99             >  out (0x99),a
      66.  00:00A8  3E 87             >  ld a,register + 0x80
      66.  00:00AA  D3 99             >  out (0x99),a
      67.  00:00AC                      	
      68.  00:00AC  DB 99               1:	in	a,(0x99)
      69.  00:00AE  E6 5F               	and 0x5F
      70.  00:00B0  FE 5C               	cp	0x5C		; plane 28 =0x1C
      71.  00:00B2  C2 AC 00            	jp	nz,1b
      72.  00:00B5                      
      73.  00:00B5                      	_setVdp 5,0x36	;	SAT at 0x1b00
      73.  00:00B5  3E 36             >  ld a,value
      73.  00:00B7  D3 99             >  out (0x99),a
      73.  00:00B9  3E 85             >  ld a,register + 0x80
      73.  00:00BB  D3 99             >  out (0x99),a
      74.  00:00BD                      	_setVdp 6,0x07	;	SPT at 0x3800	(64 sprites 16x16)
      74.  00:00BD  3E 07             >  ld a,value
      74.  00:00BF  D3 99             >  out (0x99),a
      74.  00:00C1  3E 86             >  ld a,register + 0x80
      74.  00:00C3  D3 99             >  out (0x99),a
      75.  00:00C5                      	
      76.  00:00C5                      	; _setVdp 7,0x06
      77.  00:00C5                      	
      78.  00:00C5                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      79.  00:00C5  3A E4 ED            	ld      a,(vsf)
      80.  00:00C8  A7                  	and     a
      81.  00:00C9  C2 D8 00            	jp      nz,.PAL		; if PAL call at any interrupt
      82.  00:00CC                      
      83.  00:00CC                      .NTSC:
      84.  00:00CC  21 E5 ED            	ld      hl,cnt      ; if NTSC call 5 times out of 6
      85.  00:00CF  35                  	dec     (hl)
      86.  00:00D0  C2 D8 00            	jp      nz,.PAL     ; skip one tic out of 6 when at 60hz
      87.  00:00D3  36 06               	ld      (hl),6      ; reset the tic counter
      88.  00:00D5  C3 E4 00            	jp	.skip_audio     ; continue
      89.  00:00D8                      
      90.  00:00D8                      .PAL:                   ; Calculates PSG values for next frame
      91.  00:00D8  DB A8               	in	a,(0xA8)		; Read the main slot register 
      92.  00:00DA  F5                  	push	af			; save it
      93.  00:00DB  CD 40 41            	call	enpage3
      94.  00:00DE  CD 77 56            	call 	Audio_Internal_code
      95.  00:00E1  F1                  	pop		af
      96.  00:00E2  D3 A8               	out (0xA8),a
      97.  00:00E4                      .skip_audio:
      98.  00:00E4                      
      99.  00:00E4                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     100.  00:00E4                      	
     101.  00:00E4                      99:
     102.  00:00E4  21 9E FC            	ld	hl,JIFFY
     103.  00:00E7  34                  	inc	(hl)			; 8 bit JIFFY
     104.  00:00E8                      
     105.  00:00E8                      	; _setVdp 7,0x00
     106.  00:00E8                      
     107.  00:00E8  DD E1               	pop    ix         
     108.  00:00EA  FD E1               	pop    iy         
     109.  00:00EC  F1                  	pop    af         
     110.  00:00ED  C1                  	pop    bc         
     111.  00:00EE  D1                  	pop    de         
     112.  00:00EF  E1                  	pop    hl         
     113.  00:00F0  FB                  	ei
     114.  00:00F1  C9                  	ret
     115.  00:00F2                      ;;;;;;;;;;;;;;;;;;;;;;;;;;
     116.  00:00F2                      ; used in title screen	
     117.  00:00F2                      	
     118.  00:00F2                      Music_only:
     119.  00:00F2  CD D7 56            	call	PT3_ROUT
     120.  00:00F5                      	
     121.  00:00F5  CD 90 59            	call 	en_scc
     122.  00:00F8  28 09               	jr	z,1f
     123.  00:00FA  CD 24 59                call    probewavechanges
     124.  00:00FD  CD F0 58                call    SCCROUT	
     125.  00:0100  CD AC 59            	call 	en_slot
     126.  00:0103                      1:
     127.  00:0103                      ;;;;;;;;;;;;;;;;;;;;;;;;;;
     128.  00:0103  3A E4 ED            	ld      a,(vsf)
     129.  00:0106  A7                  	and     a
     130.  00:0107  C2 16 01            	jp      nz,.PAL		; if PAL call at any interrupt
     131.  00:010A                      
     132.  00:010A                      .NTSC:
     133.  00:010A  21 E5 ED            	ld      hl,cnt      ; if NTSC call 5 times out of 6
     134.  00:010D  35                  	dec     (hl)
     135.  00:010E  C2 16 01            	jp      nz,.PAL     ; skip one tic out of 6 when at 60hz
     136.  00:0111  36 06               	ld      (hl),6      ; reset the tic counter
     137.  00:0113  C3 22 01            	jp	.skip_audio     ; continue
     138.  00:0116                      
     139.  00:0116                      .PAL:                   ; Calculates PSG values for next frame
     140.  00:0116  DB A8               	in	a,(0xA8)		; Read the main slot register 
     141.  00:0118  F5                  	push	af			; save it
     142.  00:0119  CD 40 41            	call	enpage3
     143.  00:011C  CD 77 56            	call 	Audio_Internal_code
     144.  00:011F  F1                  	pop		af
     145.  00:0120  D3 A8               	out (0xA8),a
     146.  00:0122                      .skip_audio:
     147.  00:0122  C3 E4 00            	jp	 99b
     148.  00:0125                      
     149.  00:0125                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     150.  00:0125                      ; PLOT FAR STARFIELD
     151.  00:0125                      ; input : none
     152.  00:0125                      ;
     153.  00:0125                      _plot_strs:
     154.  00:0125  2A EE ED            	ld	hl,(xmap)	; x position in pixels
     155.  00:0128  CB 3C               	srl h
     156.  00:012A  CB 1D               	rr	l
     157.  00:012C  CB 3C               	srl h
     158.  00:012E  CB 1D               	rr	l
     159.  00:0130  CB 3C               	srl h
     160.  00:0132  CB 1D               	rr	l
     161.  00:0134                      
     162.  00:0134  11 00 D4            	ld	de,level_buffer
     163.  00:0137  19                  	add hl,de
     164.  00:0138                      
     165.  00:0138  11 28 02            	ld	de,x_stars
     166.  00:013B  DD 21 00 59         	ld	ix,0x1900 + 0x4000
     167.  00:013F                      
     168.  00:013F                      	repeat 8
     169.  00:013F                    < 2:	ex de,hl
     170.  00:013F                    < 	ld   c,(hl)
     171.  00:013F                    < 	inc hl
     172.  00:013F                    < 	ld   b,(hl)
     173.  00:013F                    < 	inc hl
     174.  00:013F                    < 	ex de,hl
     175.  00:013F                    < 	add hl,bc
     176.  00:013F                    < 	add ix,bc
     177.  00:013F                    < 
     178.  00:013F                    < 	ld	a,(hl)
     179.  00:013F                    < 	and a
     180.  00:013F                    < 	jr nz,1f
     181.  00:013F                    < 
     182.  00:013F                    < 	ld	a,ixl
     183.  00:013F                    < 	out (0x99),a
     184.  00:013F                    < 	ld	a,ixh
     185.  00:013F                    < 	out (0x99),a
     186.  00:013F                    < 
     187.  00:013F                    < 	ld	a,255
     188.  00:013F                    < 	out (0x98),a
     189.  00:013F                    < 1:
     190.  00:013F                    < 	ld	bc,2*LvlWidth-2*32
     191.  00:013F                    < 	add hl,bc
     192.  00:013F                    < 	endrepeat
     192.  00:013F  EB 4E 23 46 23 EB 09 DD 09 7E A7 20 0C DD 7D D3 
     192.  00:014F  99 DD 7C D3 99 3E FF D3 98 01 C0 02 09 EB 4E 23 
     192.  00:015F  46 23 EB 09 DD 09 7E A7 20 0C DD 7D D3 99 DD 7C 
     192.  00:016F  D3 99 3E FF D3 98 01 C0 02 09 EB 4E 23 46 23 EB 
     192.  00:017F  09 DD 09 7E A7 20 0C DD 7D D3 99 DD 7C D3 99 3E 
     192.  00:018F  FF D3 98 01 C0 02 09 EB 4E 23 46 23 EB 09 DD 09 
     192.  00:019F  7E A7 20 0C DD 7D D3 99 DD 7C D3 99 3E FF D3 98 
     192.  00:01AF  01 C0 02 09 EB 4E 23 46 23 EB 09 DD 09 7E A7 20 
     192.  00:01BF  0C DD 7D D3 99 DD 7C D3 99 3E FF D3 98 01 C0 02 
     192.  00:01CF  09 EB 4E 23 46 23 EB 09 DD 09 7E A7 20 0C DD 7D 
     192.  00:01DF  D3 99 DD 7C D3 99 3E FF D3 98 01 C0 02 09 EB 4E 
     192.  00:01EF  23 46 23 EB 09 DD 09 7E A7 20 0C DD 7D D3 99 DD 
     192.  00:01FF  7C D3 99 3E FF D3 98 01 C0 02 09 EB 4E 23 46 23 
     192.  00:020F  EB 09 DD 09 7E A7 20 0C DD 7D D3 99 DD 7C D3 99 
     192.  00:021F  3E FF D3 98 01 C0 02 09 
     193.  00:0227                      
     194.  00:0227  C9                  	ret
     195.  00:0228                      x_stars:
     196.  00:0228                      	defw	  28, 3-28+64,19-3+64,29-19+64,18-29+64, 5-18+64,14-5+64,26-14+64
     196.  00:0228  1C 00 27 00 50 00 4A 00 35 00 33 00 49 00 4C 00 
     197.  00:0238                      	; defw	  1-18+32,  28-1+32,4-28+32,29- 4+32,20-29+32, 3-20+32, 8-3+32,26- 8+32
     198.  00:0238                      
     199.  00:0238                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     200.  00:0238                      ; PLOT PNT
     201.  00:0238                      ; input : xmap
     202.  00:0238                      ;
     203.  00:0238                      _plot_pnt_toshiba:
     204.  00:0238  2A EE ED            	ld	hl,(xmap)	; x position in pixels
     205.  00:023B  7D                  	ld	a,l
     206.  00:023C  0F                  	rrca
     207.  00:023D  E6 02               	and 0x2
     208.  00:023F  C3 49 02            	jp	1f
     209.  00:0242                      
     210.  00:0242                      _plot_pnt:
     211.  00:0242  2A EE ED            	ld	hl,(xmap)	; x position in pixels
     212.  00:0245  7D                  	ld	a,l
     213.  00:0246  0F                  	rrca
     214.  00:0247  E6 03               	and 0x3
     215.  00:0249                      1:
     216.  00:0249  C6 C0               	add a,meta_pnt_table_u/256
     217.  00:024B  DD 6F               	ld	ixl,a
     218.  00:024D                      
     219.  00:024D  CB 3C               	srl h
     220.  00:024F  CB 1D               	rr	l
     221.  00:0251  CB 3C               	srl h
     222.  00:0253  CB 1D               	rr	l
     223.  00:0255  CB 3C               	srl h
     224.  00:0257  CB 1D               	rr	l
     225.  00:0259                      
     226.  00:0259  11 00 D4            	ld	de,level_buffer
     227.  00:025C  19                  	add hl,de
     228.  00:025D                      
     229.  00:025D  EB                  	ex	de,hl
     230.  00:025E                      
     231.  00:025E  CD 67 02            	call	half_screen
     232.  00:0261                      
     233.  00:0261  DD 7D               	ld	a,ixl
     234.  00:0263  C6 04               	add a,meta_pnt_table_d/256-meta_pnt_table_u/256
     235.  00:0265  DD 6F               	ld	ixl,a
     236.  00:0267                      
     237.  00:0267                      half_screen:
     238.  00:0267  0E 98               	ld	c,0x98
     239.  00:0269  DD 26 08            	ld	ixh,8
     240.  00:026C                      1:
     241.  00:026C  DD 7D               	ld	a,ixl
     242.  00:026E  67                  	ld	h,a
     243.  00:026F  7B                  	ld	a,e
     244.  00:0270  C6 20               	add a,32
     245.  00:0272  D2 20 03            	jp	nc,.fast_loop
     246.  00:0275                      
     247.  00:0275                      .slow_loop:
     248.  00:0275                      	repeat 32
     249.  00:0275                    < 	ld	a,(de)
     250.  00:0275                    < 	ld	l,a
     251.  00:0275                    < 	outi
     252.  00:0275                    < 	inc de
     253.  00:0275                    < 	endrepeat
     253.  00:0275  1A 6F ED A3 13 1A 6F ED A3 13 1A 6F ED A3 13 1A 
     253.  00:0285  6F ED A3 13 1A 6F ED A3 13 1A 6F ED A3 13 1A 6F 
     253.  00:0295  ED A3 13 1A 6F ED A3 13 1A 6F ED A3 13 1A 6F ED 
     253.  00:02A5  A3 13 1A 6F ED A3 13 1A 6F ED A3 13 1A 6F ED A3 
     253.  00:02B5  13 1A 6F ED A3 13 1A 6F ED A3 13 1A 6F ED A3 13 
     253.  00:02C5  1A 6F ED A3 13 1A 6F ED A3 13 1A 6F ED A3 13 1A 
     253.  00:02D5  6F ED A3 13 1A 6F ED A3 13 1A 6F ED A3 13 1A 6F 
     253.  00:02E5  ED A3 13 1A 6F ED A3 13 1A 6F ED A3 13 1A 6F ED 
     253.  00:02F5  A3 13 1A 6F ED A3 13 1A 6F ED A3 13 1A 6F ED A3 
     253.  00:0305  13 1A 6F ED A3 13 1A 6F ED A3 13 1A 6F ED A3 13 
     254.  00:0315                      
     255.  00:0315  21 60 01            	ld	hl,LvlWidth-32
     256.  00:0318  19                  	add hl,de
     257.  00:0319  EB                  	ex	de,hl
     258.  00:031A                      
     259.  00:031A  DD 25               	dec ixh
     260.  00:031C  C2 6C 02            	jp	nz,1b
     261.  00:031F                      
     262.  00:031F  C9                  	ret
     263.  00:0320                      
     264.  00:0320                      .fast_loop:
     265.  00:0320                      	repeat 32
     266.  00:0320                    < 	ld	a,(de)
     267.  00:0320                    < 	ld	l,a
     268.  00:0320                    < 	outi
     269.  00:0320                    < 	inc e
     270.  00:0320                    < 	endrepeat
     270.  00:0320  1A 6F ED A3 1C 1A 6F ED A3 1C 1A 6F ED A3 1C 1A 
     270.  00:0330  6F ED A3 1C 1A 6F ED A3 1C 1A 6F ED A3 1C 1A 6F 
     270.  00:0340  ED A3 1C 1A 6F ED A3 1C 1A 6F ED A3 1C 1A 6F ED 
     270.  00:0350  A3 1C 1A 6F ED A3 1C 1A 6F ED A3 1C 1A 6F ED A3 
     270.  00:0360  1C 1A 6F ED A3 1C 1A 6F ED A3 1C 1A 6F ED A3 1C 
     270.  00:0370  1A 6F ED A3 1C 1A 6F ED A3 1C 1A 6F ED A3 1C 1A 
     270.  00:0380  6F ED A3 1C 1A 6F ED A3 1C 1A 6F ED A3 1C 1A 6F 
     270.  00:0390  ED A3 1C 1A 6F ED A3 1C 1A 6F ED A3 1C 1A 6F ED 
     270.  00:03A0  A3 1C 1A 6F ED A3 1C 1A 6F ED A3 1C 1A 6F ED A3 
     270.  00:03B0  1C 1A 6F ED A3 1C 1A 6F ED A3 1C 1A 6F ED A3 1C 
     271.  00:03C0                      
     272.  00:03C0  21 60 01            	ld	hl,LvlWidth-32
     273.  00:03C3  19                  	add hl,de
     274.  00:03C4  EB                  	ex	de,hl
     275.  00:03C5                      
     276.  00:03C5  DD 25               	dec ixh
     277.  00:03C7  C2 6C 02            	jp	nz,1b
     278.  00:03CA                      
     279.  00:03CA  C9                  	ret
     280.  00:03CB                      
     281.  00:03CB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     282.  00:03CB                      ;
     283.  00:03CB                      ;	sprite multiplexing
     284.  00:03CB                      ;
     285.  00:03CB                      	
     286.  00:03CB                      _sat_update:
     287.  00:03CB  3A D7 ED            	ld	a,(reverse_sat)
     288.  00:03CE  EE 01               	xor 1
     289.  00:03D0  32 D7 ED            	ld	(reverse_sat),a
     290.  00:03D3  C2 F9 03            	jp	nz,_reverse_sat
     291.  00:03D6                      
     292.  00:03D6                      _directsat:
     293.  00:03D6  3A 23 EC            	ld	a,(visible_sprts)
     294.  00:03D9  E6 FC               	and 0xFC
     295.  00:03DB  C8                  	ret z
     296.  00:03DC  47                  	ld	b,a
     297.  00:03DD  0E 98               	ld	c,0x98
     298.  00:03DF  21 09 FD            	ld	hl,ram_sat
     299.  00:03E2                      	_setvdpwvram 0x1b00
     299.  00:03E2                    >  if (value & 0xFF)
     299.  00:03E2                    ~   ld a,value & 0xFF
     299.  00:03E2                    ~  else
     299.  00:03E2  AF                >   xor a
     299.  00:03E3                    >  endif
     299.  00:03E3  D3 99             >  out (0x99),a
     299.  00:03E5  3E 5B             >  ld a,0x40 + (value/256)
     299.  00:03E7  D3 99             >  out (0x99),a
     300.  00:03E9  ED A3               1:	outi
     301.  00:03EB  ED A3               	outi
     302.  00:03ED  ED A3               	outi
     303.  00:03EF  ED A3               	outi
     304.  00:03F1  C2 E9 03            	jp	nz,1b
     305.  00:03F4  3E D0               	ld	a,0xD0
     306.  00:03F6  D3 98               	out (0x98),a
     307.  00:03F8  C9                  	ret
     308.  00:03F9                      
     309.  00:03F9                      _reverse_sat:
     310.  00:03F9  3A 23 EC            	ld	a,(visible_sprts)
     311.  00:03FC  E6 FC               	and 0xFC
     312.  00:03FE  C8                  	ret z
     313.  00:03FF  47                  	ld	b,a
     314.  00:0400  0E 98               	ld	c,0x98
     315.  00:0402  21 0D FD            	ld	hl,ram_sat-4+8
     316.  00:0405                      
     317.  00:0405  58                  	ld	e,b
     318.  00:0406  16 00               	ld	d,0
     319.  00:0408  19                  	add hl,de
     320.  00:0409  11 F8 FF            	ld	de,-8
     321.  00:040C                      
     322.  00:040C                      	_setvdpwvram 0x1b00
     322.  00:040C                    >  if (value & 0xFF)
     322.  00:040C                    ~   ld a,value & 0xFF
     322.  00:040C                    ~  else
     322.  00:040C  AF                >   xor a
     322.  00:040D                    >  endif
     322.  00:040D  D3 99             >  out (0x99),a
     322.  00:040F  3E 5B             >  ld a,0x40 + (value/256)
     322.  00:0411  D3 99             >  out (0x99),a
     323.  00:0413  19                  1:	add hl,de
     324.  00:0414  ED A3               	outi
     325.  00:0416  ED A3               	outi
     326.  00:0418  ED A3               	outi
     327.  00:041A  ED A3               	outi
     328.  00:041C  C2 13 04            	jp	nz,1b
     329.  00:041F  3E D0               	ld	a,0xD0
     330.  00:0421  D3 98               	out (0x98),a
     331.  00:0423  C9                  	ret
     332.  00:0424                      
     333.  00:0424                      
     334.  00:0424                      
     335.  00:0424                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     336.  00:0424                      ; update main ship
     337.  00:0424                      ;
     338.  00:0424                      	
     339.  00:0424                      _plot_spt:
     340.  00:0424  2A 25 EC            	ld	hl,(aniframe)
     341.  00:0427  7D                  	ld	a,l
     342.  00:0428  BC                  	cp	h
     343.  00:0429  C8                  	ret	z
     344.  00:042A  32 26 EC            	ld	(old_aniframe),a
     345.  00:042D  21 FC 0D            	ld	hl,ms_ani
     346.  00:0430  4F                  	ld	c,a
     347.  00:0431  06 00               	ld	b,0
     348.  00:0433  09                  	add	hl,bc
     349.  00:0434  6E                  	ld	l,(hl)
     350.  00:0435  60                  	ld	h,b
     351.  00:0436  29                  	add hl,hl
     352.  00:0437  29                  	add hl,hl
     353.  00:0438  29                  	add hl,hl
     354.  00:0439  29                  	add hl,hl
     355.  00:043A  29                  	add hl,hl
     356.  00:043B  5D                  	ld	e,l
     357.  00:043C  54                  	ld	d,h
     358.  00:043D  29                  	add	hl,hl
     359.  00:043E  19                  	add	hl,de
     360.  00:043F  11 4C 0E            	ld	de,ms_spt
     361.  00:0442  19                  	add hl,de
     362.  00:0443                      	_setvdpwvram 0x3800
     362.  00:0443                    >  if (value & 0xFF)
     362.  00:0443                    ~   ld a,value & 0xFF
     362.  00:0443                    ~  else
     362.  00:0443  AF                >   xor a
     362.  00:0444                    >  endif
     362.  00:0444  D3 99             >  out (0x99),a
     362.  00:0446  3E 78             >  ld a,0x40 + (value/256)
     362.  00:0448  D3 99             >  out (0x99),a
     363.  00:044A  0E 98               	ld	c,0x98
     364.  00:044C                      [96]	outi
     364.  00:044C  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     364.  00:045C  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     364.  00:046C  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     364.  00:047C  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     364.  00:048C  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     364.  00:049C  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     364.  00:04AC  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     364.  00:04BC  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     364.  00:04CC  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     364.  00:04DC  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     364.  00:04EC  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     364.  00:04FC  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
     365.  00:050C  C9                  	ret
     366.  00:050D                      	
     132   00:050D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     133   00:050D                      	include mizer.asm
       1.  00:050D                      
       2.  00:050D                      
       3.  00:050D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       4.  00:050D                      ; -------------------------------------------------------
       5.  00:050D                      ; MSX-O-Mizer v1.5f datas depacker	  *ROM based version*
       6.  00:050D                      ; Improved from Metalbrain's z80 version.
       7.  00:050D                      ; -------------------------------------------------------
       8.  00:050D                      ; source in hl
       9.  00:050D                      ; dest in de
      10.  00:050D                      
      11.  00:050D                      ; 328 bytes which must be aligned on 8 bits boundary
      12.  00:050D  (00:FE00)           mom_map_bits_rom	=		MSX_O_Mizer_buf
      13.  00:050D                      ; 26 bytes located in ram
      14.  00:050D  (00:FF48)           mom_offset_table	=		MSX_O_Mizer_buf + 328
      15.  00:050D                      
      16.  00:050D                      
      17.  00:050D  D5                  mom_depack_rom:		push	de
      18.  00:050E  01 48 FF            					ld		bc, mom_offset_table
      19.  00:0511  C5                  					push	bc
      20.  00:0512  50                  					ld		d,b
      21.  00:0513  59                  					ld		e,c
      22.  00:0514  01 1A 00            					ld		bc, 26
      23.  00:0517  ED B0               					ldir
      24.  00:0519  E5                  					push	hl
      25.  00:051A  F1                  					pop		af
      26.  00:051B  E1                  					pop		hl
      27.  00:051C  F5                  					push	af
      28.  00:051D  FD 21 F0 FE         					ld		iy, mom_map_bits_rom + 0xf0
      29.  00:0521  06 34               					ld		b, 52
      30.  00:0523  FD 7D               mom_init_bits_rom:	ld		a, iyl
      31.  00:0525  E6 0F               					and		15
      32.  00:0527  20 03               					jr		nz, mom_node_rom
      33.  00:0529  11 01 00            					ld		de, 1
      34.  00:052C  ED 67               mom_node_rom:		rrd
      35.  00:052E  FD 77 00            					ld		(iy), a
      36.  00:0531  FD 73 24            					ld		(iy + 36), e
      37.  00:0534  FD 72 48            					ld		(iy + 72), d
      38.  00:0537  FD 2C               					inc		iyl
      39.  00:0539  3C                  					inc		a
      40.  00:053A  E5                  					push	hl
      41.  00:053B  21 00 00            					ld		hl, 0
      42.  00:053E  37                  					scf
      43.  00:053F  ED 6A               mom_set_bit_rom:	adc		hl, hl
      44.  00:0541  3D                  					dec		a
      45.  00:0542  20 FB               					jr		nz, mom_set_bit_rom
      46.  00:0544  19                  					add		hl, de
      47.  00:0545  EB                  					ex		de, hl
      48.  00:0546  E1                  					pop		hl
      49.  00:0547  CB 40               					bit		0, b
      50.  00:0549  28 01               					jr		z, mom_wait_step_rom
      51.  00:054B  23                  					inc		hl
      52.  00:054C  10 D5               mom_wait_step_rom:	djnz	mom_init_bits_rom
      53.  00:054E  E1                  					pop		hl
      54.  00:054F  7E                  					ld		a, (hl)
      55.  00:0550  23                  					inc		hl
      56.  00:0551  DD 67               					ld		ixh, a
      57.  00:0553  D1                  					pop		de
      58.  00:0554  ED A0               mom_lit_copy_rom:	ldi
      59.  00:0556  CD B3 05            mom_main_loop_rom:	call	mom_get_bit_rom
      60.  00:0559  38 F9               					jr		c, mom_lit_copy_rom
      61.  00:055B  0E EF               					ld		c, -17
      62.  00:055D  CD B3 05            mom_get_index_rom:	call	mom_get_bit_rom
      63.  00:0560  0C                  					inc		c
      64.  00:0561  30 FA               					jr		nc, mom_get_index_rom
      65.  00:0563  79                  					ld		a, c
      66.  00:0564  C8                  					ret		z
      67.  00:0565  D5                  					push	de
      68.  00:0566  CD 92 05            					call	mom_get_pair_rom
      69.  00:0569  C5                  					push	bc
      70.  00:056A  20 0C               					jr		nz, mom_out_range_rom
      71.  00:056C  11 20 02            					ld		de, 0x0220
      72.  00:056F  0D                  					dec		c
      73.  00:0570  28 09               					jr		z, mom_go_for_it_rom
      74.  00:0572  11 10 04            					ld		de, 0x0410
      75.  00:0575  0D                  					dec		c
      76.  00:0576  28 03               					jr		z, mom_go_for_it_rom
      77.  00:0578  11 00 04            mom_out_range_rom:	ld		de, 0x0400
      78.  00:057B  F1                  mom_go_for_it_rom:	pop		af
      79.  00:057C  08                  					ex		af, af'
      80.  00:057D  CD A4 05            					call	mom_get_bits_rom
      81.  00:0580  83                  					add		a, e
      82.  00:0581  CD 92 05            					call	mom_get_pair_rom
      83.  00:0584  D1                  					pop		de
      84.  00:0585  E5                  					push	hl
      85.  00:0586  62                  					ld		h, d
      86.  00:0587  6B                  					ld		l, e
      87.  00:0588  ED 42               					sbc		hl, bc
      88.  00:058A  08                  					ex		af, af'
      89.  00:058B  F5                  					push	af
      90.  00:058C  C1                  					pop		bc
      91.  00:058D  ED B0               					ldir
      92.  00:058F  E1                  					pop		hl
      93.  00:0590  18 C4               					jr		mom_main_loop_rom
      94.  00:0592  FD 6F               mom_get_pair_rom:	ld		iyl, a
      95.  00:0594  FD 56 00            					ld		d, (iy)
      96.  00:0597  CD A4 05            					call	mom_get_bits_rom
      97.  00:059A  FD 86 24            					add		(iy + 36)
      98.  00:059D  4F                  					ld		c, a
      99.  00:059E  78                  					ld		a, b
     100.  00:059F  FD 8E 48            					adc		(iy + 72)
     101.  00:05A2  47                  					ld		b, a
     102.  00:05A3  C9                  					ret
     103.  00:05A4  01 00 00            mom_get_bits_rom:	ld		bc, 0
     104.  00:05A7                      mom_getting_bits_rom:
     105.  00:05A7  15                  					dec		d
     106.  00:05A8  79                  					ld		a, c
     107.  00:05A9  F8                  					ret		m
     108.  00:05AA  CD B3 05            					call	mom_get_bit_rom
     109.  00:05AD  CB 11               					rl		c
     110.  00:05AF  CB 10               					rl		b
     111.  00:05B1  18 F4               					jr		mom_getting_bits_rom
     112.  00:05B3  DD 7C               mom_get_bit_rom:	ld		a, ixh
     113.  00:05B5  87                  					add		a
     114.  00:05B6  20 03               					jr		nz, mom_byte_done_rom
     115.  00:05B8  7E                  					ld		a, (hl)
     116.  00:05B9  23                  					inc		hl
     117.  00:05BA  17                  					rla
     118.  00:05BB  DD 67               mom_byte_done_rom:	ld		ixh, a
     119.  00:05BD  C9                  					ret
     134   00:05BE                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     135   00:05BE                      	
     136   00:05BE                      ; priority -  sfx number
     137   00:05BE                      ; 0 	  - 01 Wave incoming, Player Explode, 13 Landing, 14 Landing alert,15 Take off, 16 Pause1, 17 Pause2, 18 Live Up, 19 Game over, 20 Warping.
     138   00:05BE                      ; 1 	  - 11 ground explode,12 ground explode, 06 Exit,07 Start Level Sound
     139   00:05BE                      ; 2 	  - 02,03,04,05 Enemy explode.
     140   00:05BE                      ; 3 	  - 00 Ms fire,10 MS bullets hit solid wall
     141   00:05BE                      ; 4 	  - 08 Enemy shoot.
     142   00:05BE                      AFXPLAY:	
     143   00:05BE  0E 00               	ld	c,0
     144   00:05C0  C3 29 49            	jp	ayFX_INIT	
     145   00:05C3                      
     146   00:05C3                      
     147   00:05C3  (00:4923)           AFXSTOP 	equ ayFX_END	; --- End of an ayFX stream ---
     148   00:05C3  (00:4975)           AFXFRAME 	equ ayFX_FRAME	; --- PLAY A FRAME OF AN ayFX STREAM ---
     149   00:05C3  (00:56D7)           ROUT		equ	PT3_ROUT
     150   00:05C3                      
     151   00:05C3                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     152   00:05C3                      sfxBank_miz:
     153   00:05C3  (0839)              	incbin	sfx.miz
     154   00:0DFC                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     155   00:0DFC                      ms_ani:
     156   00:0DFC                      	include ms_demo_ani.asm
       1.  00:0DFC                      ms_demo_ani:
       2.  00:0DFC  22                      defb 34 
       3.  00:0DFD  0A                      defb 10 
       4.  00:0DFE  08                      defb 8 
       5.  00:0DFF  07                      defb 7 
       6.  00:0E00  06                      defb 6 
       7.  00:0E01  01                      defb 1 
       8.  00:0E02  05                      defb 5 
       9.  00:0E03  0B                      defb 11 
      10.  00:0E04  27                      defb 39 
      11.  00:0E05  1E                      defb 30 
      12.  00:0E06  17                      defb 23 
      13.  00:0E07  0E                      defb 14 
      14.  00:0E08  10                      defb 16 
      15.  00:0E09  0F                      defb 15 
      16.  00:0E0A  1B                      defb 27 
      17.  00:0E0B  20                      defb 32 
      18.  00:0E0C  26                      defb 38 
      19.  00:0E0D  25                      defb 37 
      20.  00:0E0E  09                      defb 9 
      21.  00:0E0F  03                      defb 3 
      22.  00:0E10  00                      defb 0 
      23.  00:0E11  02                      defb 2 
      24.  00:0E12  04                      defb 4 
      25.  00:0E13  23                      defb 35 
      26.  00:0E14  24                      defb 36 
      27.  00:0E15  1F                      defb 31 
      28.  00:0E16  19                      defb 25 
      29.  00:0E17  14                      defb 20 
      30.  00:0E18  11                      defb 17 
      31.  00:0E19  15                      defb 21 
      32.  00:0E1A  1A                      defb 26 
      33.  00:0E1B  1D                      defb 29 
      34.  00:0E1C  22                      defb 34 
      35.  00:0E1D  1D                      defb 29 
      36.  00:0E1E  1A                      defb 26 
      37.  00:0E1F  15                      defb 21 
      38.  00:0E20  11                      defb 17 
      39.  00:0E21  15                      defb 21 
      40.  00:0E22  1A                      defb 26 
      41.  00:0E23  1D                      defb 29 
      42.  00:0E24  22                      defb 34 
      43.  00:0E25  1C                      defb 28 
      44.  00:0E26  16                      defb 22 
      45.  00:0E27  13                      defb 19 
      46.  00:0E28  0C                      defb 12 
      47.  00:0E29  13                      defb 19 
      48.  00:0E2A  16                      defb 22 
      49.  00:0E2B  1C                      defb 28 
      50.  00:0E2C  26                      defb 38 
      51.  00:0E2D  21                      defb 33 
      52.  00:0E2E  18                      defb 24 
      53.  00:0E2F  12                      defb 18 
      54.  00:0E30  0D                      defb 13 
      55.  00:0E31  12                      defb 18 
      56.  00:0E32  18                      defb 24 
      57.  00:0E33  21                      defb 33 
      58.  00:0E34  26                      defb 38 
      59.  00:0E35  20                      defb 32 
      60.  00:0E36  1B                      defb 27 
      61.  00:0E37  0F                      defb 15 
      62.  00:0E38  10                      defb 16 
      63.  00:0E39  0F                      defb 15 
      64.  00:0E3A  1B                      defb 27 
      65.  00:0E3B  20                      defb 32 
      66.  00:0E3C  28                      defb 40 
      67.  00:0E3D  29                      defb 41 
      68.  00:0E3E  2A                      defb 42 
      69.  00:0E3F  2B                      defb 43 
      70.  00:0E40  2C                      defb 44 
      71.  00:0E41  2D                      defb 45 
      72.  00:0E42  2E                      defb 46 
      73.  00:0E43  2F                      defb 47 
      74.  00:0E44  30                      defb 48 
      75.  00:0E45  31                      defb 49 
      76.  00:0E46  32                      defb 50 
      77.  00:0E47  33                      defb 51 
      78.  00:0E48  34                      defb 52 
      79.  00:0E49  35                      defb 53 
      80.  00:0E4A  36                      defb 54 
      81.  00:0E4B  37                      defb 55 
     157   00:0E4C                      ms_spt:
     158   00:0E4C  (1500)              	incbin ms_demo_frm.bin
     159   00:234C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     160   00:234C                      
     161   00:234C                      	
     162   00:234C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     163   00:234C                      ; -----------------------------
     164   00:234C                      ; 	Parameters
     165   00:234C                      
     166   00:234C                      	include parametrs.asm
       1.  00:234C  (00:0180)           LvlWidth:		equ	384 
       2.  00:234C  (00:0010)           nlev:             equ	16 
       3.  00:234C  (00:0004)           nphase:		equ	4 
       4.  00:234C  (00:0002)           xstep:		equ	2 
       5.  00:234C  (00:0015)           nblock:		equ	21 
       6.  00:234C  (00:00E2)           n_common_tiles1:		equ	226 
       7.  00:234C  (00:00EB)           n_common_tiles2:		equ	235 
       8.  00:234C  (00:0004)           n_d2x1:		equ	4 
       9.  00:234C  (00:000C)           n_d3x2:		equ	12 
     167   00:234C  (00:0010)           maxspeed:					equ 16		; the actual speed is divided by 4
     168   00:234C  (00:0008)           max_enem:					equ 8		; max 12
     169   00:234C  (00:0003)           max_enem_bullets:			equ 3
     170   00:234C  (00:0002)           max_bullets:				equ 2		; max number of enemies*2 + ms_bullets + enem_bullets + 3 for ms	<= 32 sprites
     171   00:234C  (00:00B4)           assault_wave_timer_preset:	equ	3*60	; a wave each 3 seconds
     172   00:234C  (00:0002)           enemy_bullet_speed:			equ	2	
     173   00:234C  (00:0078)           xship_rel:					equ (128-8)
     174   00:234C                      
     175   00:234C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     176   00:234C                      	include intro.asm
       1.  00:234C                      
       2.  00:234C                      	
       3.  00:234C                      text:
       4.  00:234C                      	db	"HEWSON & Trilobyte",13
       4.  00:234C  48 45 57 53 4F 4E 20 26 20 54 72 69 6C 6F 62 79 
       4.  00:235C  74 65 0D 
       5.  00:235F                      	db	"presents",13
       5.  00:235F  70 72 65 73 65 6E 74 73 0D 
       6.  00:2368                      	db	127,128,129,130,131,132,133,134,13
       6.  00:2368  7F 80 81 82 83 84 85 86 0D 
       7.  00:2371                      	db	135,136,137,138,136,139,140,141,13
       7.  00:2371  87 88 89 8A 88 8B 8C 8D 0D 
       8.  00:237A                      	db	"@ Graftgold Ltd.",13
       8.  00:237A  40 20 47 72 61 66 74 67 6F 6C 64 20 4C 74 64 2E 
       8.  00:238A  0D 
       9.  00:238B                      	db	"Original C64 design:",13
       9.  00:238B  4F 72 69 67 69 6E 61 6C 20 43 36 34 20 64 65 73 
       9.  00:239B  69 67 6E 3A 0D 
      10.  00:23A0                      	db	"Andrew Braybrook",13
      10.  00:23A0  41 6E 64 72 65 77 20 42 72 61 79 62 72 6F 6F 6B 
      10.  00:23B0  0D 
      11.  00:23B1                      	db	"MSX remake:",13
      11.  00:23B1  4D 53 58 20 72 65 6D 61 6B 65 3A 0D 
      12.  00:23BD                      	db	"ARTRAG - code",13
      12.  00:23BD  41 52 54 52 41 47 20 2D 20 63 6F 64 65 0D 
      13.  00:23CB                      	db	"Toni Galvez - graphic & sfx",13
      13.  00:23CB  54 6F 6E 69 20 47 61 6C 76 65 7A 20 2D 20 67 72 
      13.  00:23DB  61 70 68 69 63 20 26 20 73 66 78 0D 
      14.  00:23E7                      	db	"John Hassink - music",13
      14.  00:23E7  4A 6F 68 6E 20 48 61 73 73 69 6E 6B 20 2D 20 6D 
      14.  00:23F7  75 73 69 63 0D 
      15.  00:23FC                      	db	"Eric Boez - cover & testing",13
      15.  00:23FC  45 72 69 63 20 42 6F 65 7A 20 2D 20 63 6F 76 65 
      15.  00:240C  72 20 26 20 74 65 73 74 69 6E 67 0D 
      16.  00:2418                      	db	"Bieno Marti - testing",13
      16.  00:2418  42 69 65 6E 6F 20 4D 61 72 74 69 20 2D 20 74 65 
      16.  00:2428  73 74 69 6E 67 0D 
      17.  00:242E                      
      18.  00:242E                      	
      19.  00:242E                      	
      20.  00:242E                      
      21.  00:242E                      prstr:
      22.  00:242E  EB                  	ex de,hl
      23.  00:242F  CD 3B 3F            	call setwrtvram
      24.  00:2432  EB                  	ex de,hl
      25.  00:2433  1A                  1:	ld   a,(de)
      26.  00:2434  13                  	inc  de
      27.  00:2435  FE 0D               	cp	13
      28.  00:2437  C8                  	ret  z
      29.  00:2438  C6 E0               	add	a,-'!'+1
      30.  00:243A  D3 98               	out (0x98),a
      31.  00:243C  18 F5               	jr   1b
      32.  00:243E                      
      33.  00:243E                      cls:
      34.  00:243E                      	_setvdpwvram 0x1800
      34.  00:243E                    >  if (value & 0xFF)
      34.  00:243E                    ~   ld a,value & 0xFF
      34.  00:243E                    ~  else
      34.  00:243E  AF                >   xor a
      34.  00:243F                    >  endif
      34.  00:243F  D3 99             >  out (0x99),a
      34.  00:2441  3E 58             >  ld a,0x40 + (value/256)
      34.  00:2443  D3 99             >  out (0x99),a
      35.  00:2445  AF                  	xor	a
      36.  00:2446  06 C0               	ld	b,192
      37.  00:2448  CD A4 24            1:	call set4
      38.  00:244B  10 FB               	djnz	1b
      39.  00:244D  C9                  	ret
      40.  00:244E                      	
      41.  00:244E                      print_page:
      42.  00:244E  F3                  	di
      43.  00:244F  CD 3E 24            	call	cls
      44.  00:2452                      	
      45.  00:2452  11 4C 23            	ld	de,text
      46.  00:2455  21 27 18            	ld	hl,0x1800+32*1+7
      47.  00:2458  CD 2E 24            	call	prstr
      48.  00:245B  21 6C 18            	ld	hl,0x1800+32*3+12
      49.  00:245E  CD 2E 24            	call	prstr
      50.  00:2461  21 AC 18            	ld	hl,0x1800+32*5+12
      51.  00:2464  CD 2E 24            	call	prstr
      52.  00:2467  21 CC 18            	ld	hl,0x1800+32*6+12
      53.  00:246A  CD 2E 24            	call	prstr
      54.  00:246D  21 08 19            	ld	hl,0x1800+32*8+8
      55.  00:2470  CD 2E 24            	call	prstr
      56.  00:2473  21 41 19            	ld	hl,0x1800+32*10+1
      57.  00:2476  CD 2E 24            	call	prstr
      58.  00:2479  21 69 19            	ld	hl,0x1800+32*11+9
      59.  00:247C  CD 2E 24            	call	prstr
      60.  00:247F  21 A1 19            	ld	hl,0x1800+32*13+1
      61.  00:2482  CD 2E 24            	call	prstr
      62.  00:2485  21 C8 19            	ld	hl,0x1800+32*14+8
      63.  00:2488  CD 2E 24            	call	prstr
      64.  00:248B  21 E3 19            	ld	hl,0x1800+32*15+3
      65.  00:248E  CD 2E 24            	call	prstr
      66.  00:2491  21 02 1A            	ld	hl,0x1800+32*16+2
      67.  00:2494  CD 2E 24            	call	prstr
      68.  00:2497  21 25 1A            	ld	hl,0x1800+32*17+5
      69.  00:249A  CD 2E 24            	call	prstr
      70.  00:249D  21 43 1A            	ld	hl,0x1800+32*18+3
      71.  00:24A0  CD 2E 24            	call	prstr
      72.  00:24A3  C9                  	ret
      73.  00:24A4                      	
      74.  00:24A4                      	; ld	a,(victory)
      75.  00:24A4                      	; and	a
      76.  00:24A4                      	; ret	z
      77.  00:24A4                      	
      78.  00:24A4                      	; _setvdpwvram (0x1800+32*10)
      79.  00:24A4                      	; xor	a
      80.  00:24A4                      	; ld	(victory),a		; avoid greetings if you play another time and die
      81.  00:24A4                      	; ld	b,a
      82.  00:24A4                      ; 1:	out	(0x98),a
      83.  00:24A4                      	; djnz	1b
      84.  00:24A4                      	; ld	b,32
      85.  00:24A4                      ; 1:	out	(0x98),a
      86.  00:24A4                      	; djnz	1b
      87.  00:24A4                      	
      88.  00:24A4                      	; ld	de,greetings
      89.  00:24A4                      	; ld	hl,0x1800+32*10+5
      90.  00:24A4                      	; call	prstr
      91.  00:24A4                      	; ld	hl,0x1800+32*12+3
      92.  00:24A4                      	; call	prstr
      93.  00:24A4                      	; ld	hl,0x1800+32*13+2
      94.  00:24A4                      	; call	prstr
      95.  00:24A4                      	; ld	hl,0x1800+32*14+7
      96.  00:24A4                      	; call	prstr
      97.  00:24A4                      	; ld	hl,0x1800+32*15+8
      98.  00:24A4                      	; call	prstr
      99.  00:24A4                      	; ld	hl,0x1800+32*16+8
     100.  00:24A4                      	; call	prstr
     101.  00:24A4                      	; ld	hl,0x1800+32*17+6
     102.  00:24A4                      	; call	prstr
     103.  00:24A4                      	; ld	hl,0x1800+32*18+8
     104.  00:24A4                      	; call	prstr
     105.  00:24A4                      	
     106.  00:24A4                      	; ret
     107.  00:24A4                      	
     108.  00:24A4                      
     109.  00:24A4                      	
     110.  00:24A4                      set4:
     111.  00:24A4                      	repeat	4
     112.  00:24A4                    < 	out	(0x98),a
     113.  00:24A4                    < 	push	af
     114.  00:24A4                    < 	pop		af
     115.  00:24A4                    < 	endrepeat
     115.  00:24A4  D3 98 F5 F1 D3 98 F5 F1 D3 98 F5 F1 D3 98 F5 F1 
     116.  00:24B4  C9                  	ret
     117.  00:24B5                      
     118.  00:24B5                      plot_title_screen:
     119.  00:24B5  F3                  	di
     120.  00:24B6  CD FC 3E            	call	disscr
     121.  00:24B9                      	
     122.  00:24B9                      	; set shapes	
     123.  00:24B9                      	_setvdpwvram 0x0000
     123.  00:24B9                    >  if (value & 0xFF)
     123.  00:24B9                    ~   ld a,value & 0xFF
     123.  00:24B9                    ~  else
     123.  00:24B9  AF                >   xor a
     123.  00:24BA                    >  endif
     123.  00:24BA  D3 99             >  out (0x99),a
     123.  00:24BC  3E 40             >  ld a,0x40 + (value/256)
     123.  00:24BE  D3 99             >  out (0x99),a
     124.  00:24C0                      	repeat 3
     125.  00:24C0                    < 	ld	hl,ram_tileset
     126.  00:24C0                    < 	call	write_256
     127.  00:24C0                    < 	endrepeat
     127.  00:24C0  21 7F F8 CD 0B 3F 21 7F F8 CD 0B 3F 21 7F F8 CD 
     127.  00:24D0  0B 3F 
     128.  00:24D2                      	
     129.  00:24D2                      	; set colours
     130.  00:24D2                      	_setvdpwvram 0x2000
     130.  00:24D2                    >  if (value & 0xFF)
     130.  00:24D2                    ~   ld a,value & 0xFF
     130.  00:24D2                    ~  else
     130.  00:24D2  AF                >   xor a
     130.  00:24D3                    >  endif
     130.  00:24D3  D3 99             >  out (0x99),a
     130.  00:24D5  3E 60             >  ld a,0x40 + (value/256)
     130.  00:24D7  D3 99             >  out (0x99),a
     131.  00:24D9  01 03 00            	ld	bc,0x0003
     132.  00:24DC  3E 51               1:	ld	a,0x51
     133.  00:24DE  CD A4 24            	call	set4
     134.  00:24E1  3E 41               	ld	a,0x41
     135.  00:24E3  CD A4 24            	call	set4
     136.  00:24E6  10 F4               	djnz	1b
     137.  00:24E8  0D                  	dec	c
     138.  00:24E9  20 F1               	jr	nz,1b
     139.  00:24EB                      	
     140.  00:24EB                      	_setvdpwvram (0x2000+95*8)
     140.  00:24EB                    >  if (value & 0xFF)
     140.  00:24EB  3E F8             >   ld a,value & 0xFF
     140.  00:24ED                    >  else
     140.  00:24ED                    ~   xor a
     140.  00:24ED                    ~  endif
     140.  00:24ED  D3 99             >  out (0x99),a
     140.  00:24EF  3E 62             >  ld a,0x40 + (value/256)
     140.  00:24F1  D3 99             >  out (0x99),a
     141.  00:24F3  06 40               	ld	b,8*8
     142.  00:24F5  3E 60               	ld	a,0x60
     143.  00:24F7  D3 98               1:	out	(0x98),a
     144.  00:24F9  10 FC               	djnz	1b
     145.  00:24FB  06 38               	ld	b,7*8
     146.  00:24FD  3E D0               	ld	a,0xD0
     147.  00:24FF  D3 98               1:	out	(0x98),a
     148.  00:2501  10 FC               	djnz	1b
     149.  00:2503                      
     150.  00:2503  AF                  	xor	a
     151.  00:2504  32 20 EC            	ld	(toshiba_switch),a
     152.  00:2507                      
     153.  00:2507                      	; ld	a,(victory)
     154.  00:2507                      	; and	a
     155.  00:2507                      	; push	af
     156.  00:2507                      	; call	z,intro_music
     157.  00:2507                      	; pop		af
     158.  00:2507                      	; call	nz,ending_music
     159.  00:2507                      
     160.  00:2507  CD 6A 25            	call	intro_music
     161.  00:250A                      
     162.  00:250A  CD 14 37            	call	menu0
     163.  00:250D                      	
     164.  00:250D  3A D8 ED            1:	ld	a,(ayFX_PRIORITY)
     165.  00:2510  3C                  	inc	a
     166.  00:2511  20 FA               	jr	nz,1b				; wait for last sfx
     167.  00:2513                      	
     168.  00:2513  CD 62 42            	call	PT3_MUTE
     169.  00:2516  C9                  	ret
     170.  00:2517                      	
     171.  00:2517                      
     172.  00:2517                      
     173.  00:2517                      ;Ln B_7 B_6 B_5 B_4 B_3 B_2 B_1 B_0
     174.  00:2517                      ; 0 "7" "6" "5" "4" "3" "2" "1" "0"
     175.  00:2517                      ; 1 ";" "]" "[" "\" "=" "-" "9" "8"
     176.  00:2517                      ; 2 "B" "A" ??? "/" "." "," "'" "`"
     177.  00:2517                      ; 3 "J" "I" "H" "G" "F" "E" "D" "C"
     178.  00:2517                      ; 4 "R" "Q" "P" "O" "N" "M" "L" "K"
     179.  00:2517                      ; 5 "Z" "Y" "X" "W" "V" "U" "T" "S"
     180.  00:2517                      ; 6 F3 F2  F1 CODE CAP GRAPH CTR SHIFT
     181.  00:2517                      ; 7 RET SEL BS STOP TAB ESC F5  F4
     182.  00:2517                      ; 8 RIGHT DOWN UP LEFT DEL INS HOME SPACE
     183.  00:2517                      
     184.  00:2517                      ;;;;;;;;;;;;;;;;;;;;
     185.  00:2517                      ; Keyboard testing
     186.  00:2517                      ayFX_test:
     187.  00:2517                      
     188.  00:2517  3A D8 ED            		ld	a,(ayFX_PRIORITY)
     189.  00:251A  FE FF               		cp      255
     190.  00:251C  C0                  		ret     nz              	; play only if no sfx is active
     191.  00:251D                      		
     192.  00:251D  1E 03               		ld      e,3				; 3 "J" "I" "H" "G" "F" "E" "D" "C"
     193.  00:251F  CD 30 3F            		call    checkkbd
     194.  00:2522  06 08               		ld      b,8
     195.  00:2524  4F                  		ld      c,a
     196.  00:2525                      1:
     197.  00:2525  78                  		ld      a,b
     198.  00:2526  3D                  		dec     a
     199.  00:2527  6F                  		ld      l,a
     200.  00:2528  79                  		ld      a,c
     201.  00:2529  87                  		add     a,a
     202.  00:252A  4F                  		ld      c,a
     203.  00:252B  C5                  		push    bc
     204.  00:252C  7D                  		ld      a,l
     205.  00:252D  D4 64 25            		call    nc,_ayFX_INIT
     206.  00:2530  C1                  		pop     bc
     207.  00:2531  10 F2               		djnz    1B
     208.  00:2533                      		
     209.  00:2533  1E 04               		ld      e,4				; 4 "R" "Q" "P" "O" "N" "M" "L" "K"
     210.  00:2535  CD 30 3F            		call    checkkbd
     211.  00:2538  06 08               		ld      b,8
     212.  00:253A  4F                  		ld      c,a
     213.  00:253B                      1:
     214.  00:253B  78                  		ld      a,b
     215.  00:253C  3D                  		dec     a
     216.  00:253D  C6 08               		add		a,8
     217.  00:253F  6F                  		ld      l,a
     218.  00:2540  79                  		ld      a,c
     219.  00:2541  87                  		add     a,a
     220.  00:2542  4F                  		ld      c,a
     221.  00:2543  C5                  		push    bc
     222.  00:2544  7D                  		ld      a,l
     223.  00:2545  D4 64 25            		call    nc,_ayFX_INIT
     224.  00:2548  C1                  		pop     bc
     225.  00:2549  10 F0               		djnz    1B
     226.  00:254B                      		
     227.  00:254B  1E 05               		ld      e,5				; 5 "Z" "Y" "X" "W" "V" "U" "T" "S"
     228.  00:254D  CD 30 3F            		call    checkkbd
     229.  00:2550  06 08               		ld      b,8
     230.  00:2552  4F                  		ld      c,a
     231.  00:2553                      1:
     232.  00:2553  78                  		ld      a,b
     233.  00:2554  3D                  		dec     a
     234.  00:2555  C6 10               		add		a,16
     235.  00:2557  6F                  		ld      l,a
     236.  00:2558  79                  		ld      a,c
     237.  00:2559  87                  		add     a,a
     238.  00:255A  4F                  		ld      c,a
     239.  00:255B  C5                  		push    bc
     240.  00:255C  7D                  		ld      a,l
     241.  00:255D  D4 64 25            		call    nc,_ayFX_INIT
     242.  00:2560  C1                  		pop     bc
     243.  00:2561  10 F0               		djnz    1B
     244.  00:2563  C9                  		ret
     245.  00:2564                      _ayFX_INIT:
     246.  00:2564  FE 15               		cp	n_sfx+1
     247.  00:2566  D0                  		ret	nc
     248.  00:2567  C3 BE 05            		jp	AFXPLAY
     249.  00:256A                      		
     250.  00:256A                      intro_music:
     251.  00:256A  F3                  	di
     252.  00:256B  CD 40 41            	call	enpage3
     253.  00:256E  21 CA 25            	ld		hl,mus_intro-100+16
     254.  00:2571  CD 94 42            	call	PT3_INIT
     255.  00:2574  21 1E 26            	ld		hl,mus_intro
     256.  00:2577  CD 83 35            	call 	wavemap_init
     257.  00:257A  CD 15 49            	call	ayFX_SETUP
     258.  00:257D  CD 3A 41            	call	enpage2
     259.  00:2580  FB                  	ei
     260.  00:2581  C9                  	ret
     261.  00:2582                      ending_music:
     262.  00:2582  F3                  	di
     263.  00:2583  CD 40 41            	call	enpage3
     264.  00:2586  21 AC 28            	ld		hl,mus_end-100+16
     265.  00:2589  CD 94 42            	call	PT3_INIT
     266.  00:258C  21 00 29            	ld		hl,mus_end
     267.  00:258F  CD 83 35            	call 	wavemap_init
     268.  00:2592  CD 15 49            	call	ayFX_SETUP
     269.  00:2595  CD 3A 41            	call	enpage2
     270.  00:2598  FB                  	ei
     271.  00:2599  C9                  	ret
     177   00:259A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     178   00:259A                      mus_mute:
     179   00:259A                      	db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
     179   00:259A  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
     180   00:25AA  (0074)              	incbin UR_mute.BIN
     181   00:261E                      mus_intro:
     182   00:261E                      	db 00,00,01,01,09,03,01,03,13,00,00,00,00,00,00,00
     182   00:261E  00 00 01 01 09 03 01 03 0D 00 00 00 00 00 00 00 
     183   00:262E  (02D2)              	incbin UR_TITLE.MIZ
     184   00:2900                      mus_end:
     185   00:2900                      	db 00,05,15,15,06,00,00,15,00,00,00,00,00,00,00,00
     185   00:2900  00 05 0F 0F 06 00 00 0F 00 00 00 00 00 00 00 00 
     186   00:2910  (020F)              	incbin UR_ENDING.MIZ
     187   00:2B1F                      mus_red:
     188   00:2B1F                      	db 00,06,00,06,13,13,13,13,13,00,00,06,00,00,00,00
     188   00:2B1F  00 06 00 06 0D 0D 0D 0D 0D 00 00 06 00 00 00 00 
     189   00:2B2F  (02A9)              	incbin UR_RED.MIZ
     190   00:2DD8                      mus_green:
     191   00:2DD8                      	db 00,05,14,06,05,05,05,05,05,00,00,00,00,00,00,00
     191   00:2DD8  00 05 0E 06 05 05 05 05 05 00 00 00 00 00 00 00 
     192   00:2DE8  (0214)              	incbin UR_GREEN.MIZ
     193   00:2FFC                      mus_blue:
     194   00:2FFC                      	db 00,15,14,12,15,15,15,15,15,00,00,00,06,12,08,00
     194   00:2FFC  00 0F 0E 0C 0F 0F 0F 0F 0F 00 00 00 06 0C 08 00 
     195   00:300C  (0577)              	incbin UR_BLUE.MIZ
     196   00:3583                      	
     197   00:3583                      wavemap_init:
     198   00:3583  11 C7 ED            	ld	de,_waves			; set waves
     199   00:3586  01 10 00            	ld	bc,16
     200   00:3589  ED B0               	ldir
     201   00:358B  C9                  	ret
     202   00:358C  (00:0003)           n_musics equ 3
     203   00:358C                      music_tables:
     204   00:358C                      	dw	mus_blue,mus_red,mus_green,mus_end,mus_intro
     204   00:358C  FC 2F 1F 2B D8 2D 00 29 1E 26 
     205   00:3596                      
     206   00:3596                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     207   00:3596                      	include options.asm
       1.  00:3596                      joy_read:
       2.  00:3596  F3                  	di
       3.  00:3597  DD E5               	push	ix
       4.  00:3599  3A F8 ED            	ld	a,(joystick)
       5.  00:359C  32 F9 ED            	ld	(old_joystick),a
       6.  00:359F  CD E0 68            	call	ms_ctrl.rd_joy
       7.  00:35A2  3A F8 ED            	ld	a,(joystick)
       8.  00:35A5  47                  	ld	b,a
       9.  00:35A6  3A F9 ED            	ld	a,(old_joystick)
      10.  00:35A9  A8                  	xor	b
      11.  00:35AA  A0                  	and	b
      12.  00:35AB  32 FA ED            	ld	(chang_joystick),a
      13.  00:35AE  DD E1               	pop		ix
      14.  00:35B0  FB                  	ei
      15.  00:35B1  C9                  	ret
      16.  00:35B2                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      17.  00:35B2                      ; 0	Input joystick pin 1	(up)
      18.  00:35B2                      ; 1	Input joystick pin 2	(down)
      19.  00:35B2                      ; 2	Input joystick pin 3	(left)
      20.  00:35B2                      ; 3	Input joystick pin 4	(right)
      21.  00:35B2                      ; 4	Input joystick pin 6	(trigger A)
      22.  00:35B2                      
      23.  00:35B2                      	struct menu_entry
      24.  00:35B2                    < vramxy			dw	0
      25.  00:35B2                    < txt_pntr		dw	0
      26.  00:35B2                    < code			dw	0
      27.  00:35B2                    < 	ends
      28.  00:35B2                      
      29.  00:35B2                      mnu0
      30.  00:35B2                      .opt0:	db	"   Start",13
      30.  00:35B2  20 20 20 53 74 61 72 74 0D 
      31.  00:35BB                      .opt1:	db 	"  Settings",13
      31.  00:35BB  20 20 53 65 74 74 69 6E 67 73 0D 
      32.  00:35C6                      .opt2:	db 	"Instructions",13
      32.  00:35C6  49 6E 73 74 72 75 63 74 69 6F 6E 73 0D 
      33.  00:35D3                      
      34.  00:35D3                      mnu0_data
      35.  00:35D3  AA 02 B2 35 3A 39   	menu_entry 21*32+10,mnu0.opt0,game_start
      36.  00:35D9  CA 02 BB 35 05 37   	menu_entry 22*32+10,mnu0.opt1,menu1
      37.  00:35DF  EA 02 C6 35 3C 39   	menu_entry 23*32+10,mnu0.opt2,instructions
      38.  00:35E5  FF FF FF FF FF FF   	menu_entry -1,-1,-1
      39.  00:35EB                      
      40.  00:35EB                      mnu1:
      41.  00:35EB                      .opt0:	db	"    Game mode",13		
      41.  00:35EB  20 20 20 20 47 61 6D 65 20 6D 6F 64 65 0D 
      42.  00:35F9                      .opt1:	db	"   VDP Type",13
      42.  00:35F9  20 20 20 56 44 50 20 54 79 70 65 0D 
      43.  00:3605                      .opt2:	db	"  Enhanced enemies ",13
      43.  00:3605  20 20 45 6E 68 61 6E 63 65 64 20 65 6E 65 6D 69 
      43.  00:3615  65 73 20 0D 
      44.  00:3619                      .opt3:	db	"  SCC on/off",13
      44.  00:3619  20 20 53 43 43 20 6F 6E 2F 6F 66 66 0D 
      45.  00:3626                      .opt4:	db	"  SCC volume",13
      45.  00:3626  20 20 53 43 43 20 76 6F 6C 75 6D 65 0D 
      46.  00:3633                      .opt5:	db	"  PSG volume",13
      46.  00:3633  20 20 50 53 47 20 76 6F 6C 75 6D 65 0D 
      47.  00:3640                      .opt6:	db	"  SFX volume",13
      47.  00:3640  20 20 53 46 58 20 76 6F 6C 75 6D 65 0D 
      48.  00:364D                      .opt7:	db	"    Music",13
      48.  00:364D  20 20 20 20 4D 75 73 69 63 0D 
      49.  00:3657                      .optA:	db	"  SFX test",13
      49.  00:3657  20 20 53 46 58 20 74 65 73 74 0D 
      50.  00:3662                      .opt8:	db	"  God  Mode",13
      50.  00:3662  20 20 47 6F 64 20 20 4D 6F 64 65 0D 
      51.  00:366E                      .opt9:	db	"    Exit",13
      51.  00:366E  20 20 20 20 45 78 69 74 0D 
      52.  00:3677                      	
      53.  00:3677                      mnu1_data
      54.  00:3677  08 01 EB 35 D9 37   	menu_entry  8*32+8,mnu1.opt0,set_difficulty
      55.  00:367D  49 01 F9 35 6D 38   	menu_entry 10*32+9,mnu1.opt1,set_compatibility
      56.  00:3683  86 01 05 36 93 39   	menu_entry 12*32+6,mnu1.opt2,set_enemies
      57.  00:3689  C9 01 19 36 B7 38   	menu_entry 14*32+9,mnu1.opt3,set_scc
      58.  00:368F  E9 01 26 36 EB 39   	menu_entry 15*32+9,mnu1.opt4,set_scc_volume
      59.  00:3695  09 02 33 36 44 3B   	menu_entry 16*32+9,mnu1.opt5,set_psg_volume
      60.  00:369B  29 02 40 36 9D 3C   	menu_entry 17*32+9,mnu1.opt6,set_sfx_volume
      61.  00:36A1  49 02 4D 36 F3 3D   	menu_entry 18*32+9,mnu1.opt7,set_music
      62.  00:36A7  69 02 57 36 B4 3E   	menu_entry 19*32+9,mnu1.optA,set_sfx
      63.  00:36AD  89 02 62 36 40 39   	menu_entry 20*32+9,mnu1.opt8,set_god_mode
      64.  00:36B3  C9 02 6E 36 00 37   	menu_entry 22*32+9,mnu1.opt9,return
      65.  00:36B9  FF FF FF FF FF FF   	menu_entry -1,-1,-1
      66.  00:36BF                      
      67.  00:36BF                      select_menu:
      68.  00:36BF  DD 6E 04            	ld	l,(ix+menu_entry.code)
      69.  00:36C2  DD 66 05            	ld	h,(ix+menu_entry.code+1)
      70.  00:36C5  E9                  	jp	(hl)
      71.  00:36C6                      		
      72.  00:36C6                      print_menu:
      73.  00:36C6  11 4C 23            	ld	de,text
      74.  00:36C9  21 27 18            	ld	hl,0x1800+32*1+7
      75.  00:36CC  CD 2E 24            	call	prstr
      76.  00:36CF  21 6C 18            	ld	hl,0x1800+32*3+12
      77.  00:36D2  CD 2E 24            	call	prstr
      78.  00:36D5  21 AC 18            	ld	hl,0x1800+32*5+12
      79.  00:36D8  CD 2E 24            	call	prstr
      80.  00:36DB  21 CC 18            	ld	hl,0x1800+32*6+12
      81.  00:36DE  CD 2E 24            	call	prstr
      82.  00:36E1                      
      83.  00:36E1  DD 6E 00            1:	ld	l,(ix+menu_entry.vramxy)
      84.  00:36E4  DD 66 01            	ld	h,(ix+menu_entry.vramxy+1)
      85.  00:36E7  11 00 18            	ld	de,0x1800
      86.  00:36EA  19                  	add	hl,de
      87.  00:36EB  DD 5E 02            	ld	e,(ix+menu_entry.txt_pntr)
      88.  00:36EE  DD 56 03            	ld	d,(ix+menu_entry.txt_pntr+1)
      89.  00:36F1  CD 2E 24            	call	prstr
      90.  00:36F4  11 06 00            	ld	de,menu_entry
      91.  00:36F7  DD 19               	add	ix,de
      92.  00:36F9  DD 7E 00            	ld	a,(ix)
      93.  00:36FC  3C                  	inc	a
      94.  00:36FD  20 E2               	jr	nz,1b
      95.  00:36FF  C9                  	ret
      96.  00:3700                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      97.  00:3700                      return:
      98.  00:3700  F1                  	pop		af
      99.  00:3701  F1                  	pop		af
     100.  00:3702  C3 14 37            	jp	menu0
     101.  00:3705                      	
     102.  00:3705                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     103.  00:3705                      ;
     104.  00:3705                      menu1:
     105.  00:3705  3E 01               	ld	a,1
     106.  00:3707  32 FF ED            	ld	(menu_level),a
     107.  00:370A  CD 3E 24            	call	cls
     108.  00:370D  DD 21 77 36         	ld	ix,mnu1_data
     109.  00:3711  C3 37 37            	jp	_menu
     110.  00:3714                      menu0:
     111.  00:3714  AF                  	xor	a
     112.  00:3715  32 FF ED            	ld	(menu_level),a
     113.  00:3718  CD 4E 24            	call	print_page	
     114.  00:371B                      
     115.  00:371B  F3                  	di	
     116.  00:371C  3E 04               	ld	a,4
     117.  00:371E  32 F4 ED            	ld		(next_level),a
     118.  00:3721  AF                  	xor	a
     119.  00:3722  32 9E FC            	ld	(JIFFY),a
     120.  00:3725  32 2A EC            	ld	(PT3_SETUP),a
     121.  00:3728  3D                  	dec	a
     122.  00:3729  32 F8 ED            	ld	(joystick),a
     123.  00:372C  32 F9 ED            	ld	(old_joystick),a
     124.  00:372F  CD F5 3E            	call	enascr
     125.  00:3732  FB                  	ei	
     126.  00:3733                      
     127.  00:3733  DD 21 D3 35         	ld	ix,mnu0_data
     128.  00:3737                      _menu:
     129.  00:3737  DD E5               	push	ix
     130.  00:3739  CD C6 36            	call	print_menu
     131.  00:373C  AF                  	xor	a
     132.  00:373D  32 FB ED            	ld	(menu_item),a
     133.  00:3740  DD E1               	pop		ix
     134.  00:3742  11 D5 37            	ld	de,cursr
     135.  00:3745  CD A9 37            	call	print_cursor
     136.  00:3748  CD 96 35            1:	call	joy_read
     137.  00:374B                      	; ld	a,(chang_joystick)
     138.  00:374B  E6 1C               	and	0x1C				;fire, right,left ; bit 4,3,2
     139.  00:374D  C4 BF 36            	call	nz,select_menu
     140.  00:3750                      
     141.  00:3750  3A FA ED            	ld	a,(chang_joystick)
     142.  00:3753  CB 47               	bit	0,a					; up
     143.  00:3755  C4 8F 37            	call	nz,decrease_menu_item
     144.  00:3758  3A FA ED            	ld	a,(chang_joystick)
     145.  00:375B  CB 4F               	bit	1,a					; down
     146.  00:375D  C4 71 37            	call	nz,increase_menu_item
     147.  00:3760                      	
     148.  00:3760  3A FF ED            	ld	a,(menu_level)
     149.  00:3763  E6 01               	and	1
     150.  00:3765  20 E1               	jr	nz,1b				; attract mode starts only in menu0
     151.  00:3767  3A 2A EC            	ld	a,(PT3_SETUP)
     152.  00:376A  E6 80               	and	128
     153.  00:376C  C2 A0 5E            	jp	nz,attract_mode		; when music ends or loops
     154.  00:376F                      	; call ayFX_test
     155.  00:376F  18 D7               	jr	1b
     156.  00:3771                      
     157.  00:3771                      increase_menu_item:
     158.  00:3771  DD 7E 06            	ld	a,(ix+menu_entry)
     159.  00:3774  3C                  	inc	a
     160.  00:3775  C8                  	ret	z
     161.  00:3776  11 D1 37            	ld	de,space
     162.  00:3779  CD A9 37            	call	print_cursor
     163.  00:377C  01 06 00            	ld	bc,menu_entry
     164.  00:377F  DD 09               	add	ix,bc
     165.  00:3781  11 D5 37            	ld	de,cursr
     166.  00:3784  CD A9 37            	call	print_cursor
     167.  00:3787  3A FB ED            	ld	a,(menu_item)
     168.  00:378A  3C                  	inc	a
     169.  00:378B  32 FB ED            	ld	(menu_item),a
     170.  00:378E  C9                  	ret
     171.  00:378F                      decrease_menu_item:
     172.  00:378F  3A FB ED            	ld	a,(menu_item)
     173.  00:3792  3D                  	dec	a
     174.  00:3793  F8                  	ret	m
     175.  00:3794  32 FB ED            	ld	(menu_item),a
     176.  00:3797  11 D1 37            	ld	de,space
     177.  00:379A  CD A9 37            	call	print_cursor
     178.  00:379D  01 FA FF            	ld	bc,-menu_entry
     179.  00:37A0  DD 09               	add	ix,bc
     180.  00:37A2  11 D5 37            	ld	de,cursr
     181.  00:37A5  CD A9 37            	call	print_cursor
     182.  00:37A8  C9                  	ret
     183.  00:37A9                      
     184.  00:37A9                      print_cursor:
     185.  00:37A9  DD 6E 00            	ld	l,(ix+menu_entry.vramxy)
     186.  00:37AC  DD 66 01            	ld	h,(ix+menu_entry.vramxy+1)
     187.  00:37AF  01 FE 17            	ld	bc,0x1800-2
     188.  00:37B2  09                  	add	hl,bc
     189.  00:37B3  CD 2E 24            	call	prstr
     190.  00:37B6  DD 6E 00            	ld	l,(ix+menu_entry.vramxy)
     191.  00:37B9  DD 66 01            	ld	h,(ix+menu_entry.vramxy+1)
     192.  00:37BC  01 FE 17            	ld	bc,0x1800-2
     193.  00:37BF  09                  	add	hl,bc
     194.  00:37C0  7D                  	ld	a,l
     195.  00:37C1  E6 1F               	and	31
     196.  00:37C3  47                  	ld	b,a
     197.  00:37C4  3E 1F               	ld	a,31
     198.  00:37C6  90                  	sub	a,b
     199.  00:37C7  47                  	ld	b,a
     200.  00:37C8  7D                  	ld	a,l
     201.  00:37C9  E6 E0               	and	0xE0
     202.  00:37CB  B0                  	or	b
     203.  00:37CC  6F                  	ld	l,a
     204.  00:37CD  CD 2E 24            	call	prstr
     205.  00:37D0  C9                  	ret
     206.  00:37D1                      space:
     207.  00:37D1  20 0D               	db 	" ",13
     208.  00:37D3  20 0D               	db 	" ",13
     209.  00:37D5                      cursr:
     210.  00:37D5  3E 0D               	db 	">",13
     211.  00:37D7  3C 0D               	db 	"<",13
     212.  00:37D9                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     213.  00:37D9                      
     214.  00:37D9                      set_difficulty:
     215.  00:37D9  3E 0A               	ld      a,10			; simple shot 
     216.  00:37DB  CD BE 05            	call    AFXPLAY
     217.  00:37DE  CD 4D 38            	call	show_difficulty
     218.  00:37E1                      	
     219.  00:37E1  CD 96 35            1:	call	joy_read
     220.  00:37E4                      	; ld	a,(chang_joystick)
     221.  00:37E4  CB 5F               	bit	3,a			; right 
     222.  00:37E6  C4 33 38            	call nz,decrease_diff
     223.  00:37E9  3A FA ED            	ld	a,(chang_joystick)
     224.  00:37EC  CB 57               	bit	2,a			; left 
     225.  00:37EE  C4 41 38            	call nz,increase_diff
     226.  00:37F1  3A FA ED            	ld	a,(chang_joystick)
     227.  00:37F4  E6 13               	and	0x13		; up/down/fire
     228.  00:37F6  C0                  	ret	nz
     229.  00:37F7  C3 E1 37            	jp	1b
     230.  00:37FA                      	
     231.  00:37FA                      diff_txt:
     232.  00:37FA  22 38 11 38 00 38   	dw	hard,normal,easy
     233.  00:3800                      easy:	db	"Game mode: Easy ",13	;  Game mode: Easy -> Game mode: Normal -> Game mode: Hard
     233.  00:3800  47 61 6D 65 20 6D 6F 64 65 3A 20 45 61 73 79 20 
     233.  00:3810  0D 
     234.  00:3811                      normal:	db	"Game mode:Normal",13
     234.  00:3811  47 61 6D 65 20 6D 6F 64 65 3A 4E 6F 72 6D 61 6C 
     234.  00:3821  0D 
     235.  00:3822                      hard:	db	"Game mode: Hard ",13
     235.  00:3822  47 61 6D 65 20 6D 6F 64 65 3A 20 48 61 72 64 20 
     235.  00:3832  0D 
     236.  00:3833                      	
     237.  00:3833                      decrease_diff:
     238.  00:3833  3A 21 EC            	ld	a,(game_speed)
     239.  00:3836  3C                  	inc	a
     240.  00:3837  FE 04               	cp	4
     241.  00:3839  DA 4A 38            	jp	c,1f
     242.  00:383C  3E 01               	ld	a,1
     243.  00:383E  C3 4A 38            	jp	 1f
     244.  00:3841                      increase_diff:
     245.  00:3841  3A 21 EC            	ld	a,(game_speed)
     246.  00:3844  3D                  	dec	a
     247.  00:3845  C2 4A 38            	jp	nz,1f
     248.  00:3848  3E 03               	ld	a,3
     249.  00:384A  32 21 EC            1:	ld	(game_speed),a
     250.  00:384D                      	
     251.  00:384D                      show_difficulty:
     252.  00:384D  3A 21 EC            	ld	a,(game_speed)
     253.  00:3850  3D                  	dec	a
     254.  00:3851  21 FA 37            	ld	hl,diff_txt
     255.  00:3854                      plot_option:
     256.  00:3854  87                  	add	a,a
     257.  00:3855  85                  	add	a,l
     258.  00:3856  6F                  	ld	l,a
     259.  00:3857  7C                  	ld	a,h
     260.  00:3858  CE 00               	adc	a,0
     261.  00:385A  67                  	ld	h,a
     262.  00:385B  5E                  	ld	e,(hl)
     263.  00:385C  23                  	inc	hl
     264.  00:385D  56                  	ld	d,(hl)
     265.  00:385E  DD 6E 00            	ld	l,(ix+menu_entry.vramxy)
     266.  00:3861  DD 66 01            	ld	h,(ix+menu_entry.vramxy+1)
     267.  00:3864  01 00 18            	ld	bc,0x1800
     268.  00:3867  09                  	add	hl,bc
     269.  00:3868  CD 2E 24            	call	prstr
     270.  00:386B  FB                  	ei
     271.  00:386C  C9                  	ret
     272.  00:386D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     273.  00:386D                      set_compatibility:
     274.  00:386D  3E 0A               	ld      a,10			; simple shot 
     275.  00:386F  CD BE 05            	call    AFXPLAY
     276.  00:3872  CD AE 38            	call	show_compatibility
     277.  00:3875  CD 96 35            1:	call	joy_read
     278.  00:3878                      	; ld	a,(chang_joystick)
     279.  00:3878  E6 1C               	and	0x1c				; right/left/fire
     280.  00:387A  C4 A6 38            	call	nz,_set_compatibility
     281.  00:387D  3A FA ED            	ld	a,(chang_joystick)
     282.  00:3880  E6 03               	and	0x03				; up/down
     283.  00:3882  C0                  	ret	nz
     284.  00:3883  C3 75 38            	jp	1b
     285.  00:3886                      comp_txt:
     286.  00:3886  8A 38 98 38         	dw	.tms,.toshiba
     287.  00:388A                      .tms:		db	" VDP:TMS99x8A",13
     287.  00:388A  20 56 44 50 3A 54 4D 53 39 39 78 38 41 0D 
     288.  00:3898                      .toshiba:	db	" VDP: Toshiba",13
     288.  00:3898  20 56 44 50 3A 20 54 6F 73 68 69 62 61 0D 
     289.  00:38A6                      
     290.  00:38A6                      _set_compatibility:
     291.  00:38A6  3A 20 EC            	ld	a,(toshiba_switch)
     292.  00:38A9  EE 01               	xor	1
     293.  00:38AB  32 20 EC            	ld	(toshiba_switch),a
     294.  00:38AE                      show_compatibility:
     295.  00:38AE  3A 20 EC            	ld	a,(toshiba_switch)
     296.  00:38B1  21 86 38            	ld	hl,comp_txt
     297.  00:38B4  C3 54 38            	jp	plot_option
     298.  00:38B7                      	
     299.  00:38B7                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     300.  00:38B7                      set_scc:
     301.  00:38B7  3E 0A               	ld      a,10			; simple shot 
     302.  00:38B9  CD BE 05            	call    AFXPLAY
     303.  00:38BC                      	
     304.  00:38BC  3A C7 FF            	ld	a,(SCC)
     305.  00:38BF  3C                  	inc	a				; 255 == off
     306.  00:38C0  28 06               	jr	z, 1f		
     307.  00:38C2  3D                  	dec	a				; save SCC slot only if SCC is present
     308.  00:38C3  32 14 EE            	ld	(save_SCC),a
     309.  00:38C6  3E 01               	ld	a,1				; other == on
     310.  00:38C8  32 13 EE            1:	ld 	(toggle_scc),a	; 0 = off, 1 == on
     311.  00:38CB                      	
     312.  00:38CB  CD 12 39            	call	show_scc
     313.  00:38CE  3A 14 EE            	ld	a,(save_SCC)
     314.  00:38D1  3C                  	inc	a
     315.  00:38D2  C8                  	ret	z		; if	SCC is not present return
     316.  00:38D3                      	
     317.  00:38D3  CD 96 35            1:	call	joy_read
     318.  00:38D6                      	; ld	a,(chang_joystick)
     319.  00:38D6  E6 1C               	and	0x1c		; right/left/fire
     320.  00:38D8  C4 02 39            	call	nz,_set_scc
     321.  00:38DB  3A FA ED            	ld	a,(chang_joystick)
     322.  00:38DE  E6 03               	and	0x03		; up/down
     323.  00:38E0  C0                  	ret	nz
     324.  00:38E1  C3 D3 38            	jp	1b
     325.  00:38E4                      scc_txt:
     326.  00:38E4  E8 38 F5 38         	dw	.scc_off,.scc_on
     327.  00:38E8                      .scc_off:	db	"    SCC off ",13
     327.  00:38E8  20 20 20 20 53 43 43 20 6F 66 66 20 0D 
     328.  00:38F5                      .scc_on:	db	"    SCC on  ",13
     328.  00:38F5  20 20 20 20 53 43 43 20 6F 6E 20 20 0D 
     329.  00:3902                      				
     330.  00:3902                      _set_scc:
     331.  00:3902  3A 13 EE            	ld	a,(toggle_scc)
     332.  00:3905  EE 01               	xor 1
     333.  00:3907  32 13 EE            	ld	(toggle_scc),a
     334.  00:390A  F5                  	push	af
     335.  00:390B  C4 33 39            	call	nz,set_scc_on
     336.  00:390E  F1                  	pop	af
     337.  00:390F  CC 1B 39            	call	z,set_scc_off
     338.  00:3912                      show_scc:
     339.  00:3912  3A 13 EE            	ld	a,(toggle_scc)
     340.  00:3915  21 E4 38            	ld	hl,scc_txt
     341.  00:3918  C3 54 38            	jp	plot_option
     342.  00:391B                      	
     343.  00:391B                      set_scc_off
     344.  00:391B  CD 90 59            	call 	en_scc
     345.  00:391E  AF                  	XOR	A
     346.  00:391F  67                  	LD	H,A
     347.  00:3920  6F                  	LD	L,A
     348.  00:3921  32 BC ED            	LD	( AYREGS_CPY+AR_AmplA),A
     349.  00:3924  22 BD ED            	LD	( AYREGS_CPY+AR_AmplB),HL
     350.  00:3927  CD F0 58            	call    SCCROUT	
     351.  00:392A  CD AC 59            	call 	en_slot
     352.  00:392D  3E FF               	ld	a,255
     353.  00:392F  32 C7 FF            	ld	(SCC),a
     354.  00:3932  C9                  	ret
     355.  00:3933                      set_scc_on
     356.  00:3933  3A 14 EE            	ld	a,(save_SCC)
     357.  00:3936  32 C7 FF            	ld	(SCC),a
     358.  00:3939  C9                  	ret
     359.  00:393A                      
     360.  00:393A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     361.  00:393A                      game_start:		
     362.  00:393A  F1                  	pop	af
     363.  00:393B  C9                  	ret
     364.  00:393C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     365.  00:393C                      instructions:
     366.  00:393C  CD 7A 5B            	call show_instructions
     367.  00:393F  C9                  	ret
     368.  00:3940                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     369.  00:3940                      set_god_mode:
     370.  00:3940  3A 29 EC            	ld	a,(enable_cheat)
     371.  00:3943  A7                  	and	a
     372.  00:3944  3E 0E               	ld	a,14
     373.  00:3946  CA BE 05            	jp	z,AFXPLAY
     374.  00:3949  3E 0A               	ld      a,10			; simple shot 
     375.  00:394B  CD BE 05            	call    AFXPLAY
     376.  00:394E  CD 8A 39            	call	show_god_mode
     377.  00:3951  CD 96 35            1:	call	joy_read
     378.  00:3954                      	; ld	a,(chang_joystick)
     379.  00:3954  E6 1C               	and	0x1c		; right/left/fire
     380.  00:3956  C4 82 39            	call	nz,_set_god_mode
     381.  00:3959  3A FA ED            	ld	a,(chang_joystick)
     382.  00:395C  E6 03               	and	0x03		; up/down
     383.  00:395E  C0                  	ret	nz
     384.  00:395F  C3 51 39            	jp	1b
     385.  00:3962                      god_txt:
     386.  00:3962  66 39 74 39         	dw	.op1,.op2
     387.  00:3966                      .op1:	db	" God mode off",13
     387.  00:3966  20 47 6F 64 20 6D 6F 64 65 20 6F 66 66 0D 
     388.  00:3974                      .op2:	db	" God mode on ",13
     388.  00:3974  20 47 6F 64 20 6D 6F 64 65 20 6F 6E 20 0D 
     389.  00:3982                      
     390.  00:3982                      _set_god_mode:
     391.  00:3982  3A FD ED            	ld	a,(god_mode)
     392.  00:3985  EE 01               	xor	1
     393.  00:3987  32 FD ED            	ld	(god_mode),a
     394.  00:398A                      show_god_mode:
     395.  00:398A  3A FD ED            	ld	a,(god_mode)
     396.  00:398D  21 62 39            	ld	hl,god_txt
     397.  00:3990  C3 54 38            	jp	plot_option
     398.  00:3993                      	
     399.  00:3993                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     400.  00:3993                      set_enemies:
     401.  00:3993  3E 0A               	ld      a,10			; simple shot 
     402.  00:3995  CD BE 05            	call    AFXPLAY
     403.  00:3998  CD E2 39            	call	show_3clr
     404.  00:399B  CD 96 35            1:	call	joy_read
     405.  00:399E                      	; ld	a,(chang_joystick)
     406.  00:399E  E6 1C               	and	0x1c		; right/left/fire
     407.  00:39A0  C4 DA 39            	call	nz,_set_3clr
     408.  00:39A3  3A FA ED            	ld	a,(chang_joystick)
     409.  00:39A6  E6 03               	and	0x03		; up/down
     410.  00:39A8  C0                  	ret	nz
     411.  00:39A9  C3 9B 39            	jp	1b
     412.  00:39AC                      sprite_3c_txt:
     413.  00:39AC  B0 39 C5 39         	dw	.op1,.op2
     414.  00:39B0                      .op1:	db	"Enhanced enemies OFF",13		; Enhanced enemies ON/OFF
     414.  00:39B0  45 6E 68 61 6E 63 65 64 20 65 6E 65 6D 69 65 73 
     414.  00:39C0  20 4F 46 46 0D 
     415.  00:39C5                      .op2:	db	"Enhanced enemies ON ",13
     415.  00:39C5  45 6E 68 61 6E 63 65 64 20 65 6E 65 6D 69 65 73 
     415.  00:39D5  20 4F 4E 20 0D 
     416.  00:39DA                      
     417.  00:39DA                      _set_3clr:
     418.  00:39DA  3A F5 ED            	ld	a,(sprite_3c)
     419.  00:39DD  EE 01               	xor	1
     420.  00:39DF  32 F5 ED            	ld	(sprite_3c),a
     421.  00:39E2                      show_3clr:
     422.  00:39E2  3A F5 ED            	ld	a,(sprite_3c)
     423.  00:39E5  21 AC 39            	ld	hl,sprite_3c_txt
     424.  00:39E8  C3 54 38            	jp	plot_option
     425.  00:39EB                      	
     426.  00:39EB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     427.  00:39EB                      
     428.  00:39EB                      set_scc_volume:
     429.  00:39EB  3E 0A               	ld      a,10			; simple shot 
     430.  00:39ED  CD BE 05            	call    AFXPLAY
     431.  00:39F0  CD 26 3A            	call	.show_volume
     432.  00:39F3                      	
     433.  00:39F3  CD 96 35            1:	call	joy_read
     434.  00:39F6                      	; ld	a,(chang_joystick)
     435.  00:39F6  CB 5F               	bit	3,a				; right 
     436.  00:39F8  C4 0C 3A            	call nz,.decrease_volume
     437.  00:39FB  3A FA ED            	ld	a,(chang_joystick)
     438.  00:39FE  CB 57               	bit	2,a				; left 
     439.  00:3A00  C4 18 3A            	call nz,.increase_volume
     440.  00:3A03  3A FA ED            	ld	a,(chang_joystick)
     441.  00:3A06  E6 13               	and	0x13			; up/down/fire
     442.  00:3A08  C0                  	ret	nz
     443.  00:3A09  C3 F3 39            	jp	1b
     444.  00:3A0C                      
     445.  00:3A0C                      .decrease_volume:
     446.  00:3A0C  3A AD ED            	ld	a,(_scc_vol_fix)
     447.  00:3A0F  3D                  	dec	a
     448.  00:3A10  FE F0               	cp	-16
     449.  00:3A12  20 0F               	jr	nz,1f
     450.  00:3A14  AF                  	xor	a
     451.  00:3A15  C3 23 3A            	jp	 1f
     452.  00:3A18                      .increase_volume:
     453.  00:3A18  3A AD ED            	ld	a,(_scc_vol_fix)
     454.  00:3A1B  3C                  	inc	a
     455.  00:3A1C  FE 01               	cp	1
     456.  00:3A1E  C2 23 3A            	jp	nz,1f
     457.  00:3A21  3E F1               	ld	a,-15
     458.  00:3A23  32 AD ED            1:	ld	(_scc_vol_fix),a
     459.  00:3A26                      	
     460.  00:3A26                      .show_volume:
     461.  00:3A26  CD 30 56            	call 	_SCC_PSG_Volume_balance
     462.  00:3A29  3A AD ED            	ld	a,(_scc_vol_fix)
     463.  00:3A2C  C6 0F               	add	a,15
     464.  00:3A2E  21 34 3A            	ld	hl,set_scc_volume.volume
     465.  00:3A31  C3 54 38            	jp	plot_option
     466.  00:3A34                      	
     467.  00:3A34                      .volume:
     468.  00:3A34                      	dw	.optF,.optE,.optD,.optC,.optB,.optA,.opt9,.opt8
     468.  00:3A34  35 3B 26 3B 17 3B 08 3B F9 3A EA 3A DB 3A CC 3A 
     469.  00:3A44                      	dw	.opt7,.opt6,.opt5,.opt4,.opt3,.opt2,.opt1,.opt0
     469.  00:3A44  BD 3A AE 3A 9F 3A 90 3A 81 3A 72 3A 63 3A 54 3A 
     470.  00:3A54                      .opt0:	db	"SCC volume: 0 ",13
     470.  00:3A54  53 43 43 20 76 6F 6C 75 6D 65 3A 20 30 20 0D 
     471.  00:3A63                      .opt1:	db	"SCC volume:-1 ",13
     471.  00:3A63  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 31 20 0D 
     472.  00:3A72                      .opt2:	db	"SCC volume:-2 ",13
     472.  00:3A72  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 32 20 0D 
     473.  00:3A81                      .opt3:	db	"SCC volume:-3 ",13
     473.  00:3A81  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 33 20 0D 
     474.  00:3A90                      .opt4:	db	"SCC volume:-4 ",13
     474.  00:3A90  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 34 20 0D 
     475.  00:3A9F                      .opt5:	db	"SCC volume:-5 ",13
     475.  00:3A9F  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 35 20 0D 
     476.  00:3AAE                      .opt6:	db	"SCC volume:-6 ",13
     476.  00:3AAE  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 36 20 0D 
     477.  00:3ABD                      .opt7:	db	"SCC volume:-7 ",13
     477.  00:3ABD  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 37 20 0D 
     478.  00:3ACC                      .opt8:	db	"SCC volume:-8 ",13
     478.  00:3ACC  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 38 20 0D 
     479.  00:3ADB                      .opt9:	db	"SCC volume:-9 ",13
     479.  00:3ADB  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 39 20 0D 
     480.  00:3AEA                      .optA:	db	"SCC volume:-10",13
     480.  00:3AEA  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 31 30 0D 
     481.  00:3AF9                      .optB:	db	"SCC volume:-11",13
     481.  00:3AF9  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 31 31 0D 
     482.  00:3B08                      .optC:	db	"SCC volume:-12",13
     482.  00:3B08  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 31 32 0D 
     483.  00:3B17                      .optD:	db	"SCC volume:-13",13
     483.  00:3B17  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 31 33 0D 
     484.  00:3B26                      .optE:	db	"SCC volume:-14",13
     484.  00:3B26  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 31 34 0D 
     485.  00:3B35                      .optF:	db	"SCC volume:-15",13
     485.  00:3B35  53 43 43 20 76 6F 6C 75 6D 65 3A 2D 31 35 0D 
     486.  00:3B44                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     487.  00:3B44                      
     488.  00:3B44                      set_psg_volume:
     489.  00:3B44  3E 0A               	ld      a,10			; simple shot 
     490.  00:3B46  CD BE 05            	call    AFXPLAY
     491.  00:3B49  CD 7F 3B            	call	.show_volume
     492.  00:3B4C                      	
     493.  00:3B4C  CD 96 35            1:	call	joy_read
     494.  00:3B4F                      	; ld	a,(chang_joystick)
     495.  00:3B4F  CB 5F               	bit	3,a				; right 
     496.  00:3B51  C4 65 3B            	call nz,.decrease_volume
     497.  00:3B54  3A FA ED            	ld	a,(chang_joystick)
     498.  00:3B57  CB 57               	bit	2,a				; left 
     499.  00:3B59  C4 71 3B            	call nz,.increase_volume
     500.  00:3B5C  3A FA ED            	ld	a,(chang_joystick)
     501.  00:3B5F  E6 13               	and	0x13			; up/down/fire
     502.  00:3B61  C0                  	ret	nz
     503.  00:3B62  C3 4C 3B            	jp	1b
     504.  00:3B65                      	
     505.  00:3B65                      .decrease_volume:
     506.  00:3B65  3A AB ED            	ld	a,(_psg_vol_fix)
     507.  00:3B68  3D                  	dec	a
     508.  00:3B69  FE F0               	cp	-16
     509.  00:3B6B  20 0F               	jr	nz,1f
     510.  00:3B6D  AF                  	xor	a
     511.  00:3B6E  C3 7C 3B            	jp	 1f
     512.  00:3B71                      .increase_volume:
     513.  00:3B71  3A AB ED            	ld	a,(_psg_vol_fix)
     514.  00:3B74  3C                  	inc	a
     515.  00:3B75  FE 01               	cp	1
     516.  00:3B77  C2 7C 3B            	jp	nz,1f
     517.  00:3B7A  3E F1               	ld	a,-15
     518.  00:3B7C  32 AB ED            1:	ld	(_psg_vol_fix),a
     519.  00:3B7F                      	
     520.  00:3B7F                      .show_volume:
     521.  00:3B7F  CD 30 56            	call 	_SCC_PSG_Volume_balance
     522.  00:3B82  3A AB ED            	ld	a,(_psg_vol_fix)
     523.  00:3B85  C6 0F               	add	a,15
     524.  00:3B87  21 8D 3B            	ld	hl,set_psg_volume.volume
     525.  00:3B8A  C3 54 38            	jp	plot_option
     526.  00:3B8D                      
     527.  00:3B8D                      .volume:
     528.  00:3B8D                      	dw	.optF,.optE,.optD,.optC,.optB,.optA,.opt9,.opt8
     528.  00:3B8D  8E 3C 7F 3C 70 3C 61 3C 52 3C 43 3C 34 3C 25 3C 
     529.  00:3B9D                      	dw	.opt7,.opt6,.opt5,.opt4,.opt3,.opt2,.opt1,.opt0
     529.  00:3B9D  16 3C 07 3C F8 3B E9 3B DA 3B CB 3B BC 3B AD 3B 
     530.  00:3BAD                      .opt0:	db	"PSG volume: 0 ",13
     530.  00:3BAD  50 53 47 20 76 6F 6C 75 6D 65 3A 20 30 20 0D 
     531.  00:3BBC                      .opt1:	db	"PSG volume:-1 ",13
     531.  00:3BBC  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 31 20 0D 
     532.  00:3BCB                      .opt2:	db	"PSG volume:-2 ",13
     532.  00:3BCB  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 32 20 0D 
     533.  00:3BDA                      .opt3:	db	"PSG volume:-3 ",13
     533.  00:3BDA  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 33 20 0D 
     534.  00:3BE9                      .opt4:	db	"PSG volume:-4 ",13
     534.  00:3BE9  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 34 20 0D 
     535.  00:3BF8                      .opt5:	db	"PSG volume:-5 ",13
     535.  00:3BF8  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 35 20 0D 
     536.  00:3C07                      .opt6:	db	"PSG volume:-6 ",13
     536.  00:3C07  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 36 20 0D 
     537.  00:3C16                      .opt7:	db	"PSG volume:-7 ",13
     537.  00:3C16  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 37 20 0D 
     538.  00:3C25                      .opt8:	db	"PSG volume:-8 ",13
     538.  00:3C25  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 38 20 0D 
     539.  00:3C34                      .opt9:	db	"PSG volume:-9 ",13
     539.  00:3C34  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 39 20 0D 
     540.  00:3C43                      .optA:	db	"PSG volume:-10",13
     540.  00:3C43  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 31 30 0D 
     541.  00:3C52                      .optB:	db	"PSG volume:-11",13
     541.  00:3C52  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 31 31 0D 
     542.  00:3C61                      .optC:	db	"PSG volume:-12",13
     542.  00:3C61  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 31 32 0D 
     543.  00:3C70                      .optD:	db	"PSG volume:-13",13
     543.  00:3C70  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 31 33 0D 
     544.  00:3C7F                      .optE:	db	"PSG volume:-14",13
     544.  00:3C7F  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 31 34 0D 
     545.  00:3C8E                      .optF:	db	"PSG volume:-15",13
     545.  00:3C8E  50 53 47 20 76 6F 6C 75 6D 65 3A 2D 31 35 0D 
     546.  00:3C9D                      
     547.  00:3C9D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     548.  00:3C9D                      
     549.  00:3C9D                      set_sfx_volume:
     550.  00:3C9D  3E 0A               	ld      a,10			; simple shot 
     551.  00:3C9F  CD BE 05            	call    AFXPLAY
     552.  00:3CA2  CD D8 3C            	call	.show_volume
     553.  00:3CA5                      	
     554.  00:3CA5  CD 96 35            1:	call	joy_read
     555.  00:3CA8                      	; ld	a,(chang_joystick)
     556.  00:3CA8  CB 5F               	bit	3,a				; right 
     557.  00:3CAA  C4 BE 3C            	call nz,.decrease_volume
     558.  00:3CAD  3A FA ED            	ld	a,(chang_joystick)
     559.  00:3CB0  CB 57               	bit	2,a				; left 
     560.  00:3CB2  C4 CA 3C            	call nz,.increase_volume
     561.  00:3CB5  3A FA ED            	ld	a,(chang_joystick)
     562.  00:3CB8  E6 13               	and	0x13			; up/down/fire
     563.  00:3CBA  C0                  	ret	nz
     564.  00:3CBB  C3 A5 3C            	jp	1b
     565.  00:3CBE                      
     566.  00:3CBE                      	
     567.  00:3CBE                      .decrease_volume:
     568.  00:3CBE  3A AC ED            	ld	a,(_sfx_vol_fix)
     569.  00:3CC1  3D                  	dec	a
     570.  00:3CC2  FE F0               	cp	-16
     571.  00:3CC4  20 0F               	jr	nz,1f
     572.  00:3CC6  AF                  	xor	a
     573.  00:3CC7  C3 D5 3C            	jp	 1f
     574.  00:3CCA                      .increase_volume:
     575.  00:3CCA  3A AC ED            	ld	a,(_sfx_vol_fix)
     576.  00:3CCD  3C                  	inc	a
     577.  00:3CCE  FE 01               	cp	1
     578.  00:3CD0  C2 D5 3C            	jp	nz,1f
     579.  00:3CD3  3E F1               	ld	a,-15
     580.  00:3CD5  32 AC ED            1:	ld	(_sfx_vol_fix),a
     581.  00:3CD8                      	
     582.  00:3CD8                      .show_volume:
     583.  00:3CD8  3A AC ED            	ld	a,(_sfx_vol_fix)
     584.  00:3CDB  C6 0F               	add	a,15
     585.  00:3CDD  21 E3 3C            	ld	hl,set_sfx_volume.volume
     586.  00:3CE0  C3 54 38            	jp	plot_option
     587.  00:3CE3                      
     588.  00:3CE3                      	
     589.  00:3CE3                      .volume:
     590.  00:3CE3                      	dw	.optF,.optE,.optD,.optC,.optB,.optA,.opt9,.opt8
     590.  00:3CE3  E4 3D D5 3D C6 3D B7 3D A8 3D 99 3D 8A 3D 7B 3D 
     591.  00:3CF3                      	dw	.opt7,.opt6,.opt5,.opt4,.opt3,.opt2,.opt1,.opt0
     591.  00:3CF3  6C 3D 5D 3D 4E 3D 3F 3D 30 3D 21 3D 12 3D 03 3D 
     592.  00:3D03                      .opt0:	db	"SFX volume: 0 ",13
     592.  00:3D03  53 46 58 20 76 6F 6C 75 6D 65 3A 20 30 20 0D 
     593.  00:3D12                      .opt1:	db	"SFX volume:-1 ",13
     593.  00:3D12  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 31 20 0D 
     594.  00:3D21                      .opt2:	db	"SFX volume:-2 ",13
     594.  00:3D21  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 32 20 0D 
     595.  00:3D30                      .opt3:	db	"SFX volume:-3 ",13
     595.  00:3D30  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 33 20 0D 
     596.  00:3D3F                      .opt4:	db	"SFX volume:-4 ",13
     596.  00:3D3F  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 34 20 0D 
     597.  00:3D4E                      .opt5:	db	"SFX volume:-5 ",13
     597.  00:3D4E  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 35 20 0D 
     598.  00:3D5D                      .opt6:	db	"SFX volume:-6 ",13
     598.  00:3D5D  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 36 20 0D 
     599.  00:3D6C                      .opt7:	db	"SFX volume:-7 ",13
     599.  00:3D6C  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 37 20 0D 
     600.  00:3D7B                      .opt8:	db	"SFX volume:-8 ",13
     600.  00:3D7B  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 38 20 0D 
     601.  00:3D8A                      .opt9:	db	"SFX volume:-9 ",13
     601.  00:3D8A  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 39 20 0D 
     602.  00:3D99                      .optA:	db	"SFX volume:-10",13
     602.  00:3D99  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 31 30 0D 
     603.  00:3DA8                      .optB:	db	"SFX volume:-11",13
     603.  00:3DA8  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 31 31 0D 
     604.  00:3DB7                      .optC:	db	"SFX volume:-12",13
     604.  00:3DB7  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 31 32 0D 
     605.  00:3DC6                      .optD:	db	"SFX volume:-13",13
     605.  00:3DC6  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 31 33 0D 
     606.  00:3DD5                      .optE:	db	"SFX volume:-14",13
     606.  00:3DD5  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 31 34 0D 
     607.  00:3DE4                      .optF:	db	"SFX volume:-15",13
     607.  00:3DE4  53 46 58 20 76 6F 6C 75 6D 65 3A 2D 31 35 0D 
     608.  00:3DF3                      
     609.  00:3DF3                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     610.  00:3DF3                      set_music:
     611.  00:3DF3                      	; ld	a,(enable_cheat)
     612.  00:3DF3                      	; and	a
     613.  00:3DF3                      	; jp	nz,jukebox
     614.  00:3DF3                      	; push	ix
     615.  00:3DF3                      	; call	PT3_MUTE
     616.  00:3DF3                      	; call	intro_music
     617.  00:3DF3                      	; pop		ix
     618.  00:3DF3                      	; ret
     619.  00:3DF3                      ; jukebox:
     620.  00:3DF3                      	; ld	a,4
     621.  00:3DF3                      	; ld		(next_level),a
     622.  00:3DF3  CD 2C 3E            	call	.show_music
     623.  00:3DF6                      	
     624.  00:3DF6  CD 96 35            1:	call	joy_read
     625.  00:3DF9                      	; ld	a,(chang_joystick)
     626.  00:3DF9  CB 5F               	bit	3,a			; right 
     627.  00:3DFB  C4 11 3E            	call nz,.decrease
     628.  00:3DFE  3A FA ED            	ld	a,(chang_joystick)
     629.  00:3E01  CB 57               	bit	2,a			; left 
     630.  00:3E03  C4 1E 3E            	call nz,.increase
     631.  00:3E06  3A FA ED            	ld	a,(chang_joystick)
     632.  00:3E09  E6 13               	and	0x13		; up/down/fire
     633.  00:3E0B  C2 85 3E            	jp	nz,.start_mus
     634.  00:3E0E  C3 F6 3D            	jp	1b
     635.  00:3E11                      .decrease:
     636.  00:3E11  3A F4 ED            	ld	a,(next_level)
     637.  00:3E14  3C                  	inc	a
     638.  00:3E15  FE 05               	cp	5
     639.  00:3E17  C2 29 3E            	jp	nz,1f
     640.  00:3E1A  AF                  	xor	a
     641.  00:3E1B  C3 29 3E            	jp	 1f
     642.  00:3E1E                      .increase
     643.  00:3E1E  3A F4 ED            	ld	a,(next_level)
     644.  00:3E21  3D                  	dec	a
     645.  00:3E22  FE FF               	cp	255
     646.  00:3E24  C2 29 3E            	jp	nz,1f
     647.  00:3E27  3E 04               	ld	a,4
     648.  00:3E29  32 F4 ED            1:	ld	(next_level),a	
     649.  00:3E2C                      
     650.  00:3E2C                      .show_music:
     651.  00:3E2C  3A F4 ED            	ld	a,(next_level)
     652.  00:3E2F  21 35 3E            	ld	hl,.music_names
     653.  00:3E32  C3 54 38            	jp	plot_option
     654.  00:3E35                      .music_names:
     655.  00:3E35                      	dw	.opt0,.opt1,.opt2,.opt3,.opt4
     655.  00:3E35  3F 3E 4D 3E 5B 3E 69 3E 77 3E 
     656.  00:3E3F                      .opt0:	db	"  Blue theme ",13
     656.  00:3E3F  20 20 42 6C 75 65 20 74 68 65 6D 65 20 0D 
     657.  00:3E4D                      .opt1:	db	"  Red theme  ",13	
     657.  00:3E4D  20 20 52 65 64 20 74 68 65 6D 65 20 20 0D 
     658.  00:3E5B                      .opt2:	db	" Green theme ",13	
     658.  00:3E5B  20 47 72 65 65 6E 20 74 68 65 6D 65 20 0D 
     659.  00:3E69                      .opt3:	db	" Ending theme",13	
     659.  00:3E69  20 45 6E 64 69 6E 67 20 74 68 65 6D 65 0D 
     660.  00:3E77                      .opt4:	db	" Intro theme ",13	
     660.  00:3E77  20 49 6E 74 72 6F 20 74 68 65 6D 65 20 0D 
     661.  00:3E85                      
     662.  00:3E85                      .start_mus:
     663.  00:3E85  DD E5               	push	ix
     664.  00:3E87  CD 62 42            	call	PT3_MUTE
     665.  00:3E8A  DD E1               	pop		ix
     666.  00:3E8C  3A F4 ED            	ld		a,(next_level)
     667.  00:3E8F                      start_song:
     668.  00:3E8F  DD E5               	push	ix
     669.  00:3E91  F5                  	push	af
     670.  00:3E92  CD 40 41            	call	enpage3
     671.  00:3E95  FB                  	ei
     672.  00:3E96  F1                  	pop		af
     673.  00:3E97  87                  	add		a,a
     674.  00:3E98  5F                  	ld		e,a
     675.  00:3E99  16 00               	ld		d,0
     676.  00:3E9B  21 8C 35            	ld		hl,music_tables
     677.  00:3E9E  19                  	add		hl,de
     678.  00:3E9F  7E                  	ld		a,(hl)
     679.  00:3EA0  23                  	inc		hl
     680.  00:3EA1  66                  	ld		h,(hl)
     681.  00:3EA2  6F                  	ld		l,a
     682.  00:3EA3  CD 83 35            	call 	wavemap_init
     683.  00:3EA6  11 9C FF            	ld		de,-100
     684.  00:3EA9  19                  	add		hl,de
     685.  00:3EAA  CD 94 42            	call	PT3_INIT
     686.  00:3EAD  CD 3A 41            	call	enpage2
     687.  00:3EB0  FB                  	ei
     688.  00:3EB1  DD E1               	pop	ix
     689.  00:3EB3  C9                  	ret
     690.  00:3EB4                      	
     691.  00:3EB4                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     692.  00:3EB4                      	
     693.  00:3EB4                      set_sfx:
     694.  00:3EB4  3E 0A               	ld      a,10			; simple shot 
     695.  00:3EB6  CD BE 05            	call    AFXPLAY
     696.  00:3EB9  CD EE 3E            	call	.show_sfx_help
     697.  00:3EBC  CD 96 35            1:	call	joy_read
     698.  00:3EBF  E6 03               	and	0x03		; up/down
     699.  00:3EC1  C2 EA 3E            	jp	nz,.end_sxftest
     700.  00:3EC4  CD 17 25            	call ayFX_test
     701.  00:3EC7  C3 BC 3E            	jp	1b
     702.  00:3ECA                      .sfx_help:
     703.  00:3ECA  CE 3E DC 3E         	dw	.op1,.op2
     704.  00:3ECE                      .op1:	db	" press C to W",13		
     704.  00:3ECE  20 70 72 65 73 73 20 43 20 74 6F 20 57 0D 
     705.  00:3EDC                      .op2:	db	"  SFX test   ",13
     705.  00:3EDC  20 20 53 46 58 20 74 65 73 74 20 20 20 0D 
     706.  00:3EEA                      ;"J" "I" "H" "G" "F" "E" "D" "C"
     707.  00:3EEA                      ;"R" "Q" "P" "O" "N" "M" "L" "K"
     708.  00:3EEA                      ;"Z" "Y" "X" "W" "V" "U" "T" "S"
     709.  00:3EEA                      .end_sxftest:
     710.  00:3EEA  3E 01               	ld	a,1
     711.  00:3EEC  18 01               	jr  1f
     712.  00:3EEE                      .show_sfx_help:
     713.  00:3EEE  AF                  	xor a
     714.  00:3EEF  21 CA 3E            1:	ld	hl,.sfx_help
     715.  00:3EF2  C3 54 38            	jp	plot_option
     208   00:3EF5                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     209   00:3EF5                      	
     210   00:3EF5                      	code  @	4000h, page 1
     211   01:4000                      rom_header:
     212   01:4000  41 42               	db "AB"		; rom header
     213   01:4002  72 5F                   dw initmain
     214   01:4004  00 (12)                 ds    12
     215   01:4010                          dz 'TRI004'
     215   01:4010  54 52 49 30 30 34 00 
     216   01:4017                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     217   01:4017                      	include sprtinit.asm
       1.  01:4017                      
       2.  01:4017                      add16_de:
       3.  01:4017  E5                  	push	hl
       4.  01:4018  21 10 00            	ld hl,16
       5.  01:401B  19                  	add hl,de
       6.  01:401C  EB                  	ex de,hl
       7.  01:401D  E1                  	pop hl
       8.  01:401E  C9                  	ret	
       9.  01:401F                      	
      10.  01:401F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      11.  01:401F                      ;
      12.  01:401F                      ;	load sprites in vram
      13.  01:401F                      
      14.  01:401F                      sprite_init:
      15.  01:401F  F3                  	di
      16.  01:4020  21 88 6F            	ld	hl,test_spt
      17.  01:4023  3A F5 ED            	ld	a,(sprite_3c)
      18.  01:4026  A7                  	and	a
      19.  01:4027  28 03               	jr	z,1f
      20.  01:4029  21 FA 73            	ld	hl,test_spt_3c
      21.  01:402C  11 00 D4            1:	ld	de,level_buffer
      22.  01:402F  CD 0D 05            	call	mom_depack_rom
      23.  01:4032  21 00 D4            	ld	hl,level_buffer
      24.  01:4035                      	_setvdpwvram 0x3800
      24.  01:4035                    >  if (value & 0xFF)
      24.  01:4035                    ~   ld a,value & 0xFF
      24.  01:4035                    ~  else
      24.  01:4035  AF                >   xor a
      24.  01:4036                    >  endif
      24.  01:4036  D3 99             >  out (0x99),a
      24.  01:4038  3E 78             >  ld a,0x40 + (value/256)
      24.  01:403A  D3 99             >  out (0x99),a
      25.  01:403C  CD 0B 3F            	call	write_256
      26.  01:403F                      	
      27.  01:403F                      	_setvdpwvram 0x1B80				 ; sprites in the score bar
      27.  01:403F                    >  if (value & 0xFF)
      27.  01:403F  3E 80             >   ld a,value & 0xFF
      27.  01:4041                    >  else
      27.  01:4041                    ~   xor a
      27.  01:4041                    ~  endif
      27.  01:4041  D3 99             >  out (0x99),a
      27.  01:4043  3E 5B             >  ld a,0x40 + (value/256)
      27.  01:4045  D3 99             >  out (0x99),a
      28.  01:4047  21 35 78            	ld	hl,scorebar_sat
      29.  01:404A  01 98 80            	ld	bc,0x8098
      30.  01:404D  ED B3               	otir
      31.  01:404F                      
      32.  01:404F  21 C6 65            	ld	hl,line1
      33.  01:4052  11 28 1C            	ld	de,0x1C08+32
      34.  01:4055  CD D0 65            	call	print_str
      35.  01:4058                      
      36.  01:4058  21 00 00            	ld	hl,0
      37.  01:405B  22 0E EE            	ld	(score_bin),hl
      38.  01:405E  22 10 EE            	ld	(score_bin+2),hl
      39.  01:4061                      
      40.  01:4061  3E 07               	ld	a,7
      41.  01:4063  32 12 EE            	ld	(lives_bin),a
      42.  01:4066                      
      43.  01:4066  21 00 EE            	ld	hl,lives
      44.  01:4069  11 01 EE            	ld	de,lives+1
      45.  01:406C  36 0D               	ld	(hl),13
      46.  01:406E  01 0D 00            	ld	bc,14-1				; lives and score are strings in ram
      47.  01:4071  ED B0               	ldir
      48.  01:4073                      
      49.  01:4073                      	;	set Manta icon
      50.  01:4073  F3                  	di
      51.  01:4074                      	_setvdpwvram  0x1C08
      51.  01:4074                    >  if (value & 0xFF)
      51.  01:4074  3E 08             >   ld a,value & 0xFF
      51.  01:4076                    >  else
      51.  01:4076                    ~   xor a
      51.  01:4076                    ~  endif
      51.  01:4076  D3 99             >  out (0x99),a
      51.  01:4078  3E 5C             >  ld a,0x40 + (value/256)
      51.  01:407A  D3 99             >  out (0x99),a
      52.  01:407C  21 EF FB            	ld	hl,ram_tileset+110*8
      53.  01:407F  01 98 08            	ld	bc,0x898
      54.  01:4082  ED B3               	otir
      55.  01:4084                      	_setvdpwvram  (0x1C08+16)
      55.  01:4084                    >  if (value & 0xFF)
      55.  01:4084  3E 18             >   ld a,value & 0xFF
      55.  01:4086                    >  else
      55.  01:4086                    ~   xor a
      55.  01:4086                    ~  endif
      55.  01:4086  D3 99             >  out (0x99),a
      55.  01:4088  3E 5C             >  ld a,0x40 + (value/256)
      55.  01:408A  D3 99             >  out (0x99),a
      56.  01:408C  06 08               	ld	b,0x8
      57.  01:408E  ED B3               	otir
      58.  01:4090                      	_setvdpwvram  (0x1C08+4*32)
      58.  01:4090                    >  if (value & 0xFF)
      58.  01:4090  3E 88             >   ld a,value & 0xFF
      58.  01:4092                    >  else
      58.  01:4092                    ~   xor a
      58.  01:4092                    ~  endif
      58.  01:4092  D3 99             >  out (0x99),a
      58.  01:4094  3E 5C             >  ld a,0x40 + (value/256)
      58.  01:4096  D3 99             >  out (0x99),a
      59.  01:4098  06 08               	ld	b,0x8
      60.  01:409A  ED B3               	otir
      61.  01:409C                      	_setvdpwvram  (0x1C08+4*32+16)
      61.  01:409C                    >  if (value & 0xFF)
      61.  01:409C  3E 98             >   ld a,value & 0xFF
      61.  01:409E                    >  else
      61.  01:409E                    ~   xor a
      61.  01:409E                    ~  endif
      61.  01:409E  D3 99             >  out (0x99),a
      61.  01:40A0  3E 5C             >  ld a,0x40 + (value/256)
      61.  01:40A2  D3 99             >  out (0x99),a
      62.  01:40A4  06 08               	ld	b,0x8
      63.  01:40A6  ED B3               	otir
      64.  01:40A8                      	
      65.  01:40A8                      	;	set Uridium sign
      66.  01:40A8                      
      67.  01:40A8  11 08 1E            	ld	de,0x1C00+16*32+ 8*1
      68.  01:40AB  21 77 FB            	ld hl,ram_tileset+95*8
      69.  01:40AE  06 0C               	ld	b,12
      70.  01:40B0  C5                  1:	push	bc
      71.  01:40B1  CD 3B 3F            	call	setwrtvram	
      72.  01:40B4  06 08               	ld	b,0x8 
      73.  01:40B6  ED B3               	otir
      74.  01:40B8  CD 17 40            	call	add16_de
      75.  01:40BB  C1                  	pop	bc
      76.  01:40BC  10 F2               	djnz	1b
      77.  01:40BE                      	
      78.  01:40BE  21 BF FB            	ld hl,ram_tileset+104*8
      79.  01:40C1  CD 3B 3F            	call	setwrtvram	
      80.  01:40C4  06 08               	ld	b,0x8 
      81.  01:40C6  ED B3               	otir
      82.  01:40C8  CD 17 40            	call	add16_de
      83.  01:40CB                      	
      84.  01:40CB  21 D7 FB            	ld hl,ram_tileset+107*8
      85.  01:40CE  06 03               	ld	b,3	
      86.  01:40D0  C5                  1:	push	bc
      87.  01:40D1  CD 3B 3F            	call	setwrtvram	
      88.  01:40D4  06 08               	ld	b,0x8 
      89.  01:40D6  ED B3               	otir
      90.  01:40D8  CD 17 40            	call	add16_de
      91.  01:40DB  C1                  	pop	bc
      92.  01:40DC  10 F2               	djnz	1b
      93.  01:40DE                      	
      94.  01:40DE  AF                  	xor a
      95.  01:40DF  32 D7 ED            	ld	(reverse_sat),a
      96.  01:40E2                      
      97.  01:40E2  21 09 FD            	ld	hl,ram_sat
      98.  01:40E5  11 0A FD            	ld	de,ram_sat+1
      99.  01:40E8  01 7F 00            	ld	bc,127
     100.  01:40EB  77                  	ld	(hl),a
     101.  01:40EC  ED B0               	ldir
     102.  01:40EE                      
     103.  01:40EE  C9                  	ret
     104.  01:40EF                      
     218   01:40EF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     219   01:40EF                      	include rominit64.asm	
       1.  01:40EF                      
       2.  01:40EF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  01:40EF                      ; set pages and subslot
       4.  01:40EF                      ;
       5.  01:40EF                      
       6.  01:40EF                      
       7.  01:40EF  (01:0024)           ENASLT:			equ		024h
       8.  01:40EF  (01:0138)           RSLREG:			equ		0138h
       9.  01:40EF  (01:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  01:40EF                      
      11.  01:40EF                      
      12.  01:40EF                      ; ----------------------------
      13.  01:40EF                      ; pre-set main slot for page 3
      14.  01:40EF                      ; and set sub-slot for page 3
      15.  01:40EF                      ; ----------------------------
      16.  01:40EF                      	macro	mainslot_setup n
      17.  01:40EF                    < 	and		3
      18.  01:40EF                    < [2]	rrca
      19.  01:40EF                    < 	and		0xC0
      20.  01:40EF                    < 	ld		c,a
      21.  01:40EF                    < 	ld		a,d
      22.  01:40EF                    < 	and		0x3F
      23.  01:40EF                    < 	or		c
      24.  01:40EF                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  01:40EF                    < 
      26.  01:40EF                    < 	ld		a,b
      27.  01:40EF                    < 	and		0x0C
      28.  01:40EF                    < [2]	rrca
      29.  01:40EF                    < 	and		3
      30.  01:40EF                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  01:40EF                    < 	ld		a,c
      32.  01:40EF                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  01:40EF                    < 	ld		a,(0FFFFh)
      34.  01:40EF                    < 	cpl
      35.  01:40EF                    < 	if (n<=4)
      36.  01:40EF                    < [n]	RLCA
      37.  01:40EF                    < 	else
      38.  01:40EF                    < [8-n] RRCA	
      39.  01:40EF                    < 	endif
      40.  01:40EF                    < 	and		0xFC
      41.  01:40EF                    < 	or		b
      42.  01:40EF                    < 	if (n<=4)
      43.  01:40EF                    < [n]	RRCA
      44.  01:40EF                    < 	else
      45.  01:40EF                    < [8-n] RLCA
      46.  01:40EF                    < 	endif
      47.  01:40EF                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  01:40EF                    < 	ld		b,a				; save for later	
      49.  01:40EF                    < 	endmacro
      50.  01:40EF                      		
      51.  01:40EF                      
      52.  01:40EF                      ; ------------------------------
      53.  01:40EF                      ; SEARCH_SLOT
      54.  01:40EF                      ; look for the slot of our rom
      55.  01:40EF                      ; active in page 1
      56.  01:40EF                      ; ------------------------------
      57.  01:40EF                      
      58.  01:40EF                      search_slot:
      59.  01:40EF  CD 38 01            	call	RSLREG
      60.  01:40F2  0F 0F               [2]	rrca
      61.  01:40F4  E6 03               	and		3
      62.  01:40F6  4F                  	ld		c,a
      63.  01:40F7  06 00               	ld		b,0
      64.  01:40F9  21 C1 FC            	ld		hl,EXPTBL
      65.  01:40FC  09                  	add		hl,bc
      66.  01:40FD  7E                  	ld		a,(hl)
      67.  01:40FE  E6 80               	and		080h
      68.  01:4100  B1                  	or		c
      69.  01:4101  4F                  	ld		c,a
      70.  01:4102  23 23 23 23         [4]	inc		hl
      71.  01:4106  7E                  	ld		a,(hl)
      72.  01:4107  E6 0C               	and		0Ch
      73.  01:4109  B1                  	or		c
      74.  01:410A  32 C5 FF            	ld		(slotvar),a
      75.  01:410D  C9                  	ret
      76.  01:410E                      	
      77.  01:410E                      ; ------------------------------
      78.  01:410E                      ; look for the slot of ram
      79.  01:410E                      ; active in page 3
      80.  01:410E                      ; ------------------------------
      81.  01:410E                      
      82.  01:410E                      search_slotram:
      83.  01:410E  F3                  	di
      84.  01:410F  CD 38 01            	call	RSLREG
      85.  01:4112  07 07               [2]	rlca
      86.  01:4114  E6 03               	and		3
      87.  01:4116  4F                  	ld		c,a
      88.  01:4117  06 00               	ld		b,0
      89.  01:4119  21 C1 FC            	ld		hl,EXPTBL
      90.  01:411C  09                  	add		hl,bc
      91.  01:411D  7E                  	ld		a,(hl)
      92.  01:411E  E6 80               	and		080h
      93.  01:4120  28 0D               	jr		z,search_slotram0
      94.  01:4122  B1                  	or		c
      95.  01:4123  4F                  	ld		c,a
      96.  01:4124  23 23 23 23         [4]	inc		hl
      97.  01:4128  7E                  	ld		a,(hl)
      98.  01:4129  07 07 07 07         [4]	rlca
      99.  01:412D  E6 0C               	and		0Ch
     100.  01:412F                      search_slotram0:
     101.  01:412F  B1                  	or		c
     102.  01:4130  32 C6 FF            	ld		(slotram),a
     103.  01:4133  C9                  	ret
     104.  01:4134                      	
     105.  01:4134                      ; ------------------------------
     106.  01:4134                      ; SETROMPAGE0
     107.  01:4134                      ; Set the chart in
     108.  01:4134                      ; Page 0
     109.  01:4134                      ; -----------------------------
     110.  01:4134                      
     111.  01:4134                      setrompage0:
     112.  01:4134  3A C5 FF            	ld		a,(slotvar)
     113.  01:4137  C3 55 41            	jp		setslotpage0
     114.  01:413A                      
     115.  01:413A                      setrompage2:
     116.  01:413A  3A C5 FF            	ld		a,(slotvar)
     117.  01:413D  C3 CB 41            	jp		setslotpage2
     118.  01:4140                      
     119.  01:4140                      setrampage2:
     120.  01:4140  3A C6 FF            	ld		a,(slotram)
     121.  01:4143  C3 CB 41            	jp		setslotpage2
     122.  01:4146                      	
     123.  01:4146                      setrompage3:
     124.  01:4146  3A C5 FF            	ld		a,(slotvar)
     125.  01:4149  C3 12 42            	jp		setslotpage3
     126.  01:414C                      
     127.  01:414C                      setrampage3:
     128.  01:414C  3A C6 FF            	ld		a,(slotram)
     129.  01:414F  C3 12 42            	jp		setslotpage3
     130.  01:4152                      	
     131.  01:4152                      ; ------------------------------
     132.  01:4152                      ; RECBIOS
     133.  01:4152                      ; set the bios ROM
     134.  01:4152                      ; -------------------------------
     135.  01:4152                      recbios:
     136.  01:4152  3A C1 FC            	ld		a,(EXPTBL)
     137.  01:4155                      
     138.  01:4155                      ; ---------------------------
     139.  01:4155                      ; SETSLOTPAGE0
     140.  01:4155                      ; Set the slot passed in A
     141.  01:4155                      ; at page 0 in the Z80 address space
     142.  01:4155                      ; A: Format FxxxSSPP
     143.  01:4155                      ; ----------------------------
     144.  01:4155                      
     145.  01:4155                      setslotpage0:
     146.  01:4155  F3                  	di
     147.  01:4156  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     148.  01:4157  DB A8               	in		a,(0A8h)
     149.  01:4159  E6 FC               	and		0xFC
     150.  01:415B  57                  	ld		d,a					; D = Primary slot value
     151.  01:415C  78                  	ld		a,b
     152.  01:415D  E6 03               	and		3
     153.  01:415F  B2                  	or		d
     154.  01:4160  57                  	ld		d,a		; D = Final Value for primary slot
     155.  01:4161  78                  	ld		a,b		; Check if expanded
     156.  01:4162  CB 7F               	bit		7,a
     157.  01:4164  28 22               	jr		z,1f	; Not Expanded
     158.  01:4166                      	mainslot_setup	0
     158.  01:4166  E6 03             >  and  3
     158.  01:4168  0F 0F             > [2] rrca
     158.  01:416A  E6 C0             >  and  0xC0
     158.  01:416C  4F                >  ld  c,a
     158.  01:416D  7A                >  ld  a,d
     158.  01:416E  E6 3F             >  and  0x3F
     158.  01:4170  B1                >  or  c
     158.  01:4171  4F                >  ld  c,a
     158.  01:4172                    > 
     158.  01:4172  78                >  ld  a,b
     158.  01:4173  E6 0C             >  and  0x0C
     158.  01:4175  0F 0F             > [2] rrca
     158.  01:4177  E6 03             >  and  3
     158.  01:4179  47                >  ld  b,a
     158.  01:417A  79                >  ld  a,c
     158.  01:417B  D3 A8             >  out  (0A8h),a
     158.  01:417D  3A FF FF          >  ld  a,(0FFFFh)
     158.  01:4180  2F                >  cpl
     158.  01:4181                    >  if (n<=4)
     158.  01:4181                    > [n] RLCA
     158.  01:4181                    >  else
     158.  01:4181                    ~ [8-n] RRCA
     158.  01:4181                    ~  endif
     158.  01:4181  E6 FC             >  and  0xFC
     158.  01:4183  B0                >  or  b
     158.  01:4184                    >  if (n<=4)
     158.  01:4184                    > [n] RRCA
     158.  01:4184                    >  else
     158.  01:4184                    ~ [8-n] RLCA
     158.  01:4184                    ~  endif
     158.  01:4184  32 FF FF          >  ld  (0FFFFh),a
     158.  01:4187  47                >  ld  b,a
     159.  01:4188  7A                  1:	ld		a,d				; A = Final value
     160.  01:4189  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     161.  01:418B  C9                  	ret
     162.  01:418C                      
     163.  01:418C                      ; ---------------------------
     164.  01:418C                      ; SETSLOTPAGE1
     165.  01:418C                      ; Set the slot passed in A
     166.  01:418C                      ; at page 1 in the Z80 address space
     167.  01:418C                      ; A: Format FxxxSSPP
     168.  01:418C                      ; ----------------------------
     169.  01:418C                      
     170.  01:418C                      setslotpage1:
     171.  01:418C  F3                  	di
     172.  01:418D  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     173.  01:418E  DB A8               	in		a,(0A8h)
     174.  01:4190  0F 0F               [2]	RRCA
     175.  01:4192  E6 FC               	and		0xFC
     176.  01:4194  57                  	ld		d,a					; D = Primary slot value
     177.  01:4195  78                  	ld		a,b
     178.  01:4196  E6 03               	and		3
     179.  01:4198  B2                  	or		d
     180.  01:4199  07 07               [2]	RLCA
     181.  01:419B  57                  	ld		d,a		; D = Final Value for primary slot
     182.  01:419C  78                  	ld		a,b		; Check if expanded
     183.  01:419D  CB 7F               	bit		7,a
     184.  01:419F  28 26               	jr		z,1f	; Not Expanded
     185.  01:41A1                      	mainslot_setup	6
     185.  01:41A1  E6 03             >  and  3
     185.  01:41A3  0F 0F             > [2] rrca
     185.  01:41A5  E6 C0             >  and  0xC0
     185.  01:41A7  4F                >  ld  c,a
     185.  01:41A8  7A                >  ld  a,d
     185.  01:41A9  E6 3F             >  and  0x3F
     185.  01:41AB  B1                >  or  c
     185.  01:41AC  4F                >  ld  c,a
     185.  01:41AD                    > 
     185.  01:41AD  78                >  ld  a,b
     185.  01:41AE  E6 0C             >  and  0x0C
     185.  01:41B0  0F 0F             > [2] rrca
     185.  01:41B2  E6 03             >  and  3
     185.  01:41B4  47                >  ld  b,a
     185.  01:41B5  79                >  ld  a,c
     185.  01:41B6  D3 A8             >  out  (0A8h),a
     185.  01:41B8  3A FF FF          >  ld  a,(0FFFFh)
     185.  01:41BB  2F                >  cpl
     185.  01:41BC                    >  if (n<=4)
     185.  01:41BC                    ~ [n] RLCA
     185.  01:41BC                    ~  else
     185.  01:41BC  0F 0F             > [8-n] RRCA
     185.  01:41BE                    >  endif
     185.  01:41BE  E6 FC             >  and  0xFC
     185.  01:41C0  B0                >  or  b
     185.  01:41C1                    >  if (n<=4)
     185.  01:41C1                    ~ [n] RRCA
     185.  01:41C1                    ~  else
     185.  01:41C1  07 07             > [8-n] RLCA
     185.  01:41C3                    >  endif
     185.  01:41C3  32 FF FF          >  ld  (0FFFFh),a
     185.  01:41C6  47                >  ld  b,a
     186.  01:41C7  7A                  1:	ld		a,d				; A = Final value
     187.  01:41C8  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     188.  01:41CA  C9                  	ret
     189.  01:41CB                      	
     190.  01:41CB                      
     191.  01:41CB                      ; ---------------------------
     192.  01:41CB                      ; SETSLOTPAGE2
     193.  01:41CB                      ; Set the slot passed in A
     194.  01:41CB                      ; at page 2 in the Z80 address space
     195.  01:41CB                      ; A: Format FxxxSSPP
     196.  01:41CB                      ; ----------------------------
     197.  01:41CB                      
     198.  01:41CB                      setslotpage2:
     199.  01:41CB  F3                  	di
     200.  01:41CC  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     201.  01:41CD  DB A8               	in		a,(0A8h)
     202.  01:41CF  07 07 07 07         [4]	RLCA
     203.  01:41D3  E6 FC               	and		0xFC
     204.  01:41D5  57                  	ld		d,a					; D = Primary slot value
     205.  01:41D6  78                  	ld		a,b
     206.  01:41D7  E6 03               	and		3
     207.  01:41D9  B2                  	or		d
     208.  01:41DA  0F 0F 0F 0F         [4]	RRCA
     209.  01:41DE  57                  	ld		d,a		; D = Final Value for primary slot
     210.  01:41DF  78                  	ld		a,b		; Check if expanded
     211.  01:41E0  CB 7F               	bit		7,a
     212.  01:41E2  28 2A               	jr		z,1f	; Not Expanded
     213.  01:41E4                      	mainslot_setup	4
     213.  01:41E4  E6 03             >  and  3
     213.  01:41E6  0F 0F             > [2] rrca
     213.  01:41E8  E6 C0             >  and  0xC0
     213.  01:41EA  4F                >  ld  c,a
     213.  01:41EB  7A                >  ld  a,d
     213.  01:41EC  E6 3F             >  and  0x3F
     213.  01:41EE  B1                >  or  c
     213.  01:41EF  4F                >  ld  c,a
     213.  01:41F0                    > 
     213.  01:41F0  78                >  ld  a,b
     213.  01:41F1  E6 0C             >  and  0x0C
     213.  01:41F3  0F 0F             > [2] rrca
     213.  01:41F5  E6 03             >  and  3
     213.  01:41F7  47                >  ld  b,a
     213.  01:41F8  79                >  ld  a,c
     213.  01:41F9  D3 A8             >  out  (0A8h),a
     213.  01:41FB  3A FF FF          >  ld  a,(0FFFFh)
     213.  01:41FE  2F                >  cpl
     213.  01:41FF                    >  if (n<=4)
     213.  01:41FF  07 07 07 07       > [n] RLCA
     213.  01:4203                    >  else
     213.  01:4203                    ~ [8-n] RRCA
     213.  01:4203                    ~  endif
     213.  01:4203  E6 FC             >  and  0xFC
     213.  01:4205  B0                >  or  b
     213.  01:4206                    >  if (n<=4)
     213.  01:4206  0F 0F 0F 0F       > [n] RRCA
     213.  01:420A                    >  else
     213.  01:420A                    ~ [8-n] RLCA
     213.  01:420A                    ~  endif
     213.  01:420A  32 FF FF          >  ld  (0FFFFh),a
     213.  01:420D  47                >  ld  b,a
     214.  01:420E  7A                  1:	ld		a,d				; A = Final value
     215.  01:420F  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     216.  01:4211  C9                  	ret
     217.  01:4212                      	
     218.  01:4212                      ; ---------------------------
     219.  01:4212                      ; SETSLOTPAGE3
     220.  01:4212                      ; Set the slot passed in A
     221.  01:4212                      ; at page 3 in the Z80 address space
     222.  01:4212                      ; A: Format FxxxSSPP
     223.  01:4212                      ; ----------------------------
     224.  01:4212                      	
     225.  01:4212                      setslotpage3:
     226.  01:4212  F3                  	di
     227.  01:4213  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     228.  01:4214  DB A8               	in		a,(0A8h)
     229.  01:4216  07 07               [2]	RLCA
     230.  01:4218  E6 FC               	and		0xFC
     231.  01:421A  57                  	ld		d,a					; D = Primary slot value
     232.  01:421B  78                  	ld		a,b
     233.  01:421C  E6 03               	and		3
     234.  01:421E  B2                  	or		d
     235.  01:421F  0F 0F               [2]	RRCA	
     236.  01:4221  57                  	ld		d,a		; D = Final Value for primary slot
     237.  01:4222  78                  	ld		a,b		; Check if expanded
     238.  01:4223  CB 7F               	bit		7,a
     239.  01:4225  28 26               	jr		z,1f	; Not Expanded
     240.  01:4227                      	mainslot_setup	2
     240.  01:4227  E6 03             >  and  3
     240.  01:4229  0F 0F             > [2] rrca
     240.  01:422B  E6 C0             >  and  0xC0
     240.  01:422D  4F                >  ld  c,a
     240.  01:422E  7A                >  ld  a,d
     240.  01:422F  E6 3F             >  and  0x3F
     240.  01:4231  B1                >  or  c
     240.  01:4232  4F                >  ld  c,a
     240.  01:4233                    > 
     240.  01:4233  78                >  ld  a,b
     240.  01:4234  E6 0C             >  and  0x0C
     240.  01:4236  0F 0F             > [2] rrca
     240.  01:4238  E6 03             >  and  3
     240.  01:423A  47                >  ld  b,a
     240.  01:423B  79                >  ld  a,c
     240.  01:423C  D3 A8             >  out  (0A8h),a
     240.  01:423E  3A FF FF          >  ld  a,(0FFFFh)
     240.  01:4241  2F                >  cpl
     240.  01:4242                    >  if (n<=4)
     240.  01:4242  07 07             > [n] RLCA
     240.  01:4244                    >  else
     240.  01:4244                    ~ [8-n] RRCA
     240.  01:4244                    ~  endif
     240.  01:4244  E6 FC             >  and  0xFC
     240.  01:4246  B0                >  or  b
     240.  01:4247                    >  if (n<=4)
     240.  01:4247  0F 0F             > [n] RRCA
     240.  01:4249                    >  else
     240.  01:4249                    ~ [8-n] RLCA
     240.  01:4249                    ~  endif
     240.  01:4249  32 FF FF          >  ld  (0FFFFh),a
     240.  01:424C  47                >  ld  b,a
     241.  01:424D  7A                  1:	ld		a,d				; A = Final value
     242.  01:424E  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     243.  01:4250  C9                  	ret
     220   01:4251                      	include PT3-ROM.ASM
       1.  01:4251                      		; --- PT3 REPLAYER WORKING ON ROM ---
       2.  01:4251                      		; --- Can be assembled with sjasm ---
       3.  01:4251                      		; --- ROM version: MSX-KUN        ---
       4.  01:4251                      		; --- sjasm version: ArtRag       ---
       5.  01:4251                      
       6.  01:4251                      ; Based on MSX version of PT3 by Dioniso
       7.  01:4251                      ;
       8.  01:4251                      ; This version of the replayer uses a fixed volume and note table, if you need a 
       9.  01:4251                      ; different note table you can copy it from TABLES.TXT file, distributed with the
      10.  01:4251                      ; original PT3 distribution. This version also allows the use of PT3 commands.
      11.  01:4251                      ;
      12.  01:4251                      ; PLAY and PSG WRITE routines seperated to allow independent calls
      13.  01:4251                      ;
      14.  01:4251                      ; ROM LENGTH: 1528 bytes
      15.  01:4251                      ; RAM LENGTH:  382 bytes
      16.  01:4251                      
      17.  01:4251                      		; --- CONSTANT VALUES DEFINITION ---
      18.  01:4251                      
      19.  01:4251                      ;ChannelsVars
      20.  01:4251                      ;struc	CHNPRM
      21.  01:4251                      ;reset group
      22.  01:4251  (01:0000)           CHNPRM_PsInOr	equ 0	;RESB 1
      23.  01:4251  (01:0001)           CHNPRM_PsInSm	equ 1	;RESB 1
      24.  01:4251  (01:0002)           CHNPRM_CrAmSl	equ 2	;RESB 1
      25.  01:4251  (01:0003)           CHNPRM_CrNsSl	equ 3	;RESB 1
      26.  01:4251  (01:0004)           CHNPRM_CrEnSl	equ 4	;RESB 1
      27.  01:4251  (01:0005)           CHNPRM_TSlCnt	equ 5	;RESB 1
      28.  01:4251  (01:0006)           CHNPRM_CrTnSl	equ 6	;RESW 1
      29.  01:4251  (01:0008)           CHNPRM_TnAcc	equ 8	;RESW 1
      30.  01:4251  (01:000A)           CHNPRM_COnOff	equ 10	;RESB 1
      31.  01:4251                      ;reset group
      32.  01:4251                      
      33.  01:4251  (01:000B)           CHNPRM_OnOffD	equ 11	;RESB 1
      34.  01:4251                      
      35.  01:4251                      ;IX for PTDECOD here ( +12)
      36.  01:4251  (01:000C)           CHNPRM_OffOnD	equ 12	;RESB 1
      37.  01:4251  (01:000D)           CHNPRM_OrnPtr	equ 13	;RESW 1
      38.  01:4251  (01:000F)           CHNPRM_SamPtr	equ 15	;RESW 1
      39.  01:4251  (01:0011)           CHNPRM_NNtSkp	equ 17	;RESB 1
      40.  01:4251  (01:0012)           CHNPRM_Note	equ 18	;RESB 1
      41.  01:4251  (01:0013)           CHNPRM_SlToNt	equ 19	;RESB 1
      42.  01:4251  (01:0014)           CHNPRM_Env_En	equ 20	;RESB 1
      43.  01:4251  (01:0015)           CHNPRM_Flags	equ 21	;RESB 1
      44.  01:4251                       ;Enabled - 0,SimpleGliss - 2
      45.  01:4251  (01:0016)           CHNPRM_TnSlDl	equ 22	;RESB 1
      46.  01:4251  (01:0017)           CHNPRM_TSlStp	equ 23	;RESW 1
      47.  01:4251  (01:0019)           CHNPRM_TnDelt	equ 25	;RESW 1
      48.  01:4251  (01:001B)           CHNPRM_NtSkCn	equ 27	;RESB 1
      49.  01:4251  (01:001C)           CHNPRM_Volume	equ 28	;RESB 1
      50.  01:4251  (01:001D)           nsample EQU 29
      51.  01:4251  (01:001E)           CHNPRM_Size		equ 30	;RESB 1
      52.  01:4251                      ;endstruc
      53.  01:4251                      
      54.  01:4251                      ;struc	AR
      55.  01:4251  (01:0000)           AR_TonA		equ 0	;RESW 1
      56.  01:4251  (01:0002)           AR_TonB		equ 2	;RESW 1
      57.  01:4251  (01:0004)           AR_TonC		equ 4	;RESW 1
      58.  01:4251  (01:0006)           AR_Noise	equ 6	;RESB 1
      59.  01:4251  (01:0007)           AR_Mixer	equ 7	;RESB 1
      60.  01:4251  (01:0008)           AR_AmplA	equ 8	;RESB 1
      61.  01:4251  (01:0009)           AR_AmplB	equ 9	;RESB 1
      62.  01:4251  (01:000A)           AR_AmplC	equ 10	;RESB 1
      63.  01:4251  (01:000B)           AR_Env		equ 11	;RESW 1
      64.  01:4251  (01:000D)           AR_EnvTp	equ 13	;RESB 1
      65.  01:4251                      ;endstruc
      66.  01:4251                      
      67.  01:4251                      		; --- CODE STARTS HERE ---
      68.  01:4251                      
      69.  01:4251  21 2A EC            CHECKLP:	LD	HL,PT3_SETUP
      70.  01:4254  CB FE               		SET	7,( HL)
      71.  01:4256  CB 46               		BIT	0,( HL)
      72.  01:4258  C8                  		RET	Z
      73.  01:4259  E1                  		POP	HL
      74.  01:425A  21 A5 EC            		LD	HL,DelyCnt
      75.  01:425D  34                  		INC	( HL)
      76.  01:425E  21 66 EC            		LD	HL,ChanA+CHNPRM_NtSkCn
      77.  01:4261  34                  		INC	( HL)
      78.  01:4262                      PT3_MUTE:	
      79.  01:4262  AF                  		XOR	A
      80.  01:4263  32 C9 FF            		ld	(music_flag),a
      81.  01:4266  67                  		LD	H,A
      82.  01:4267  6F                  		LD	L,A
      83.  01:4268  32 B3 EC            		LD	( AYREGS+AR_AmplA),A
      84.  01:426B  22 B4 EC            		LD	( AYREGS+AR_AmplB),HL
      85.  01:426E  3D                  		dec a
      86.  01:426F  32 B2 EC            		ld  (AYREGS+AR_Mixer),a
      87.  01:4272  21 46 25            		ld	hl,mus_mute-100+16
      88.  01:4275  CD A6 42            		call	mute_entry
      89.  01:4278  CD D7 56            		call	PT3_ROUT
      90.  01:427B  CD 90 59            		call 	en_scc
      91.  01:427E  C8                  		ret	z
      92.  01:427F  21 AB EC            		ld      hl,AYREGS
      93.  01:4282  11 B4 ED            		ld      de,AYREGS_CPY
      94.  01:4285  01 0D 00            		ld      bc,13
      95.  01:4288  ED B0               		ldir                        ; save a copy of AY register to avoid that SCCROUT get affected by AYFX
      96.  01:428A  CD 24 59            		call    probewavechanges
      97.  01:428D  CD F0 58            		call    SCCROUT	
      98.  01:4290  CD AC 59            		call 	en_slot
      99.  01:4293  C9                  		ret
     100.  01:4294                      		
     101.  01:4294                      PT3_INIT:	;HL - AddressOfModule - 100
     102.  01:4294  3E FF               		ld	a,0xff
     103.  01:4296  32 C9 FF            		ld	(music_flag),a
     104.  01:4299                      
     105.  01:4299                      ; call unpack with hl pointing to some compressed data, and de pointing to the destination.
     106.  01:4299  11 64 00            		ld  de,100
     107.  01:429C  19                  		add hl,de
     108.  01:429D  11 17 B2            		ld  de,music_miz_buffer
     109.  01:42A0  CD 0D 05            		call mom_depack_rom
     110.  01:42A3  21 B3 B1            		ld  hl,music_miz_buffer-100
     111.  01:42A6                      mute_entry:		
     112.  01:42A6  22 2B EC            		LD ( PT3_MODADDR),HL
     113.  01:42A9  E5                  		PUSH HL
     114.  01:42AA  11 64 00            		LD DE,100
     115.  01:42AD  19                  		ADD HL,DE
     116.  01:42AE  7E                  		LD A,( HL)
     117.  01:42AF  32 46 EC            		LD ( PT3_Delay),A
     118.  01:42B2  E5                  		PUSH HL
     119.  01:42B3  DD E1               		POP IX
     120.  01:42B5  19                  		ADD HL,DE
     121.  01:42B6  22 2D EC            		LD ( PT3_CrPsPtr),HL
     122.  01:42B9  DD 5E 02            		LD E,( IX+102-100)
     123.  01:42BC  19                  		ADD HL,DE
     124.  01:42BD  23                  		INC HL
     125.  01:42BE  22 42 EC            		LD ( PT3_LPosPtr),HL
     126.  01:42C1  D1                  		POP DE
     127.  01:42C2  DD 6E 03            		LD L,( IX+103-100)
     128.  01:42C5  DD 66 04            		LD H,( IX+104-100)
     129.  01:42C8  19                  		ADD HL,DE
     130.  01:42C9  22 44 EC            		LD ( PT3_PatsPtr),HL
     131.  01:42CC  21 A9 00            		LD HL,169
     132.  01:42CF  19                  		ADD HL,DE
     133.  01:42D0  22 31 EC            		LD ( PT3_OrnPtrs),HL
     134.  01:42D3  21 69 00            		LD HL,105
     135.  01:42D6  19                  		ADD HL,DE
     136.  01:42D7  22 2F EC            		LD ( PT3_SAMPTRS),HL
     137.  01:42DA  21 2A EC            		LD HL,PT3_SETUP
     138.  01:42DD  CB BE               		RES 7,( HL)
     139.  01:42DF                      
     140.  01:42DF                      		; --- CREATE PT3 VOLUME TABLE (c) Ivan Roshin, adapted by SapphiRe ---
     141.  01:42DF  21 11 00            		ld	hl,0x11
     142.  01:42E2  54                  		ld	d,h
     143.  01:42E3  5C                  		ld	e,h
     144.  01:42E4  DD 21 BB EC         		ld	IX,VT_+16
     145.  01:42E8  06 0F               		ld	b,15
     146.  01:42EA  E5                  _INITV1:	push	hl
     147.  01:42EB  19                  		add	hl,de
     148.  01:42EC  EB                  		ex	de,hl
     149.  01:42ED  ED 62               		sbc	hl,hl
     150.  01:42EF  48                  		ld	c,b
     151.  01:42F0  06 10               		ld	b,16
     152.  01:42F2  7D                  _INITV2:	ld	a,l
     153.  01:42F3  17                  		rla
     154.  01:42F4  7C                  		ld	a,h
     155.  01:42F5  CE 00               		adc	a,0
     156.  01:42F7  DD 77 00            		ld	( ix),a
     157.  01:42FA  DD 23               		inc	ix
     158.  01:42FC  19                  		add	hl,de
     159.  01:42FD  10 F3               		djnz	_INITV2
     160.  01:42FF  E1                  		pop	hl
     161.  01:4300  7B                  		ld	a,e
     162.  01:4301  FE 77               		cp	0x77
     163.  01:4303  20 01               		jr	nz,_INITV3
     164.  01:4305  1C                  		inc	e
     165.  01:4306  41                  _INITV3:	ld	b,c
     166.  01:4307  10 E1               		djnz	_INITV1
     167.  01:4309                      
     168.  01:4309                      		; --- INITIALIZE PT3 VARIABLES ---
     169.  01:4309  AF                  		XOR A
     170.  01:430A  21 4B EC            		LD HL,VARS
     171.  01:430D  77                  		LD ( HL),A
     172.  01:430E  11 4C EC            		LD DE,VARS+1
     173.  01:4311  01 6F 00            		LD BC,VAR0END-VARS-1
     174.  01:4314  ED B0               		LDIR
     175.  01:4316                      
     176.  01:4316  3C                  		INC A
     177.  01:4317  32 A5 EC            		LD ( DelyCnt),A
     178.  01:431A  21 01 F0            		LD HL,0xF001 ;H - CHNPRM_Volume, L - CHNPRM_NtSkCn
     179.  01:431D  22 66 EC            		LD ( ChanA+CHNPRM_NtSkCn),HL
     180.  01:4320  22 84 EC            		LD ( ChanB+CHNPRM_NtSkCn),HL
     181.  01:4323  22 A2 EC            		LD ( ChanC+CHNPRM_NtSkCn),HL
     182.  01:4326                      
     183.  01:4326  21 4F 47            		LD HL,EMPTYSAMORN
     184.  01:4329  22 3C EC            		LD ( PT3_AdInPtA),HL ;ptr to zero
     185.  01:432C  22 58 EC            		LD ( ChanA+CHNPRM_OrnPtr),HL ;ornament 0 is "0,1,0"
     186.  01:432F  22 76 EC            		LD ( ChanB+CHNPRM_OrnPtr),HL ;in all versions from
     187.  01:4332  22 94 EC            		LD ( ChanC+CHNPRM_OrnPtr),HL ;3.xx to 3.6x and VTII
     188.  01:4335                      
     189.  01:4335  22 5A EC            		LD ( ChanA+CHNPRM_SamPtr),HL ;S1 There is no default
     190.  01:4338  22 78 EC            		LD ( ChanB+CHNPRM_SamPtr),HL ;S2 sample in PT3, so, you
     191.  01:433B  22 96 EC            		LD ( ChanC+CHNPRM_SamPtr),HL ;S3 can comment S1,2,3; see
     192.  01:433E                      					    ;also EMPTYSAMORN comment
     193.  01:433E  C9                  		RET
     194.  01:433F                      
     195.  01:433F                      		;pattern decoder
     196.  01:433F                      PD_OrSm:	
     197.  01:433F  DD 36 08 00         		LD ( IX+(CHNPRM_Env_En-12)),0
     198.  01:4343  CD CC 44            		CALL SETORN
     199.  01:4346  0A                  		LD A,( BC)
     200.  01:4347  03                  		INC BC
     201.  01:4348  0F                  		RRCA
     202.  01:4349                      
     203.  01:4349  87                  PD_SAM:		ADD A,A
     204.  01:434A  5F                  PD_SAM_:	LD E,A
     205.  01:434B  16 00               		LD D,0
     206.  01:434D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     207.  01:434D                      ; SCC patch
     208.  01:434D                      ;
     209.  01:434D  DD 77 11            		LD (IX-12+ nsample),A
     210.  01:4350                      
     211.  01:4350  2A 2F EC            		LD HL,( PT3_SAMPTRS)
     212.  01:4353  19                  		ADD HL,DE
     213.  01:4354  5E                  		LD E,( HL)
     214.  01:4355  23                  		INC HL
     215.  01:4356  56                  		LD D,( HL)
     216.  01:4357  2A 2B EC            		LD HL,( PT3_MODADDR)
     217.  01:435A  19                  		ADD HL,DE
     218.  01:435B  DD 75 03            		LD ( IX+(CHNPRM_SamPtr-12)),L
     219.  01:435E  DD 74 04            		LD ( IX+(CHNPRM_SamPtr+1-12)),H
     220.  01:4361  18 41               		JR PD_LOOP
     221.  01:4363                      
     222.  01:4363  07                  PD_VOL:		RLCA
     223.  01:4364  07                  		RLCA
     224.  01:4365  07                  		RLCA
     225.  01:4366  07                  		RLCA
     226.  01:4367  DD 77 10            		LD ( IX+(CHNPRM_Volume-12)),A
     227.  01:436A  18 3B               		JR PD_LP2
     228.  01:436C                      	
     229.  01:436C  DD 77 08            PD_EOff:	LD ( IX+(CHNPRM_Env_En-12)),A
     230.  01:436F  DD 77 F4            		LD ( IX+(CHNPRM_PsInOr-12)),A
     231.  01:4372  18 33               		JR PD_LP2
     232.  01:4374                      
     233.  01:4374  3D                  PD_SorE:	DEC A
     234.  01:4375  20 07               		JR NZ,PD_ENV
     235.  01:4377  0A                  		LD A,( BC)
     236.  01:4378  03                  		INC BC
     237.  01:4379  DD 77 05            		LD ( IX+(CHNPRM_NNtSkp-12)),A
     238.  01:437C  18 29               		JR PD_LP2
     239.  01:437E                      
     240.  01:437E  CD B0 44            PD_ENV:		CALL SETENV
     241.  01:4381  18 24               		JR PD_LP2
     242.  01:4383                      
     243.  01:4383  CD CC 44            PD_ORN:		CALL SETORN
     244.  01:4386  18 1C               		JR PD_LOOP
     245.  01:4388                             
     246.  01:4388  DD 77 08            PD_ESAM:	LD ( IX+(CHNPRM_Env_En-12)),A
     247.  01:438B  DD 77 F4            		LD ( IX+(CHNPRM_PsInOr-12)),A
     248.  01:438E  C4 B0 44            		CALL NZ,SETENV
     249.  01:4391  0A                  		LD A,( BC)
     250.  01:4392  03                  		INC BC
     251.  01:4393  18 B5               		JR PD_SAM_
     252.  01:4395                      
     253.  01:4395  DD 7E 06            PTDECOD:	LD A,( IX+(CHNPRM_Note-12))
     254.  01:4398  32 39 EC            		LD ( PT3_PrNote),A
     255.  01:439B  DD 6E FA            		LD L,( IX+(CHNPRM_CrTnSl-12))
     256.  01:439E  DD 66 FB            		LD H,( IX+(CHNPRM_CrTnSl+1-12))
     257.  01:43A1  22 3A EC            		LD ( PT3_PrSlide),HL
     258.  01:43A4                      
     259.  01:43A4  11 10 20            PD_LOOP:	LD DE,0x2010
     260.  01:43A7  0A                  PD_LP2:		LD A,( BC)
     261.  01:43A8  03                  		INC BC
     262.  01:43A9  83                  		ADD A,E
     263.  01:43AA  38 93               		JR C,PD_OrSm
     264.  01:43AC  82                  		ADD A,D
     265.  01:43AD  28 4A               		JR Z,PD_FIN
     266.  01:43AF  38 98               		JR C,PD_SAM
     267.  01:43B1  83                  		ADD A,E
     268.  01:43B2  28 25               		JR Z,PD_REL
     269.  01:43B4  38 AD               		JR C,PD_VOL
     270.  01:43B6  83                  		ADD A,E
     271.  01:43B7  28 B3               		JR Z,PD_EOff
     272.  01:43B9  38 B9               		JR C,PD_SorE
     273.  01:43BB  C6 60               		ADD A,96
     274.  01:43BD  38 20               		JR C,PD_NOTE
     275.  01:43BF  83                  		ADD A,E
     276.  01:43C0  38 C1               		JR C,PD_ORN
     277.  01:43C2  82                  		ADD A,D
     278.  01:43C3  38 0F               		JR C,PD_NOIS
     279.  01:43C5  83                  		ADD A,E
     280.  01:43C6  38 C0               		JR C,PD_ESAM
     281.  01:43C8  87                  		ADD A,A
     282.  01:43C9  5F                  		LD E,A
     283.  01:43CA  21 05 24            		LD HL,0xFFFF & (SPCCOMS+0xFF20-0x2000)
     284.  01:43CD  19                  		ADD HL,DE
     285.  01:43CE  5E                  		LD E,( HL)
     286.  01:43CF  23                  		INC HL
     287.  01:43D0  56                  		LD D,( HL)
     288.  01:43D1  D5                  		PUSH DE
     289.  01:43D2  18 D0               		JR PD_LOOP
     290.  01:43D4                      
     291.  01:43D4  32 A9 EC            PD_NOIS:	LD ( Ns_Base),A
     292.  01:43D7  18 CE               		JR PD_LP2
     293.  01:43D9                      
     294.  01:43D9  DD CB 09 86         PD_REL:		RES 0,( IX+(CHNPRM_Flags-12))
     295.  01:43DD  18 08               		JR PD_RES
     296.  01:43DF                      	
     297.  01:43DF  DD 77 06            PD_NOTE:	LD ( IX+(CHNPRM_Note-12)),A
     298.  01:43E2  DD CB 09 C6         		SET 0,( IX+(CHNPRM_Flags-12))
     299.  01:43E6  AF                  		XOR A
     300.  01:43E7                      
     301.  01:43E7  ED 73 33 EC         PD_RES:		LD ( PT3_PDSP),SP
     302.  01:43EB  DD F9               		LD SP,IX
     303.  01:43ED  67                  		LD H,A
     304.  01:43EE  6F                  		LD L,A
     305.  01:43EF  E5                  		PUSH HL
     306.  01:43F0  E5                  		PUSH HL
     307.  01:43F1  E5                  		PUSH HL
     308.  01:43F2  E5                  		PUSH HL
     309.  01:43F3  E5                  		PUSH HL
     310.  01:43F4  E5                  		PUSH HL
     311.  01:43F5  ED 7B 33 EC         		LD SP,( PT3_PDSP)
     312.  01:43F9                      
     313.  01:43F9  DD 7E 05            PD_FIN:		LD A,( IX+(CHNPRM_NNtSkp-12))
     314.  01:43FC  DD 77 0F            		LD ( IX+(CHNPRM_NtSkCn-12)),A
     315.  01:43FF  C9                  		RET
     316.  01:4400                      
     317.  01:4400  DD CB 09 96         C_PORTM:	RES 2,( IX+(CHNPRM_Flags-12))
     318.  01:4404  0A                  		LD A,( BC)
     319.  01:4405  03                  		INC BC
     320.  01:4406                      		;SKIP PRECALCULATED TONE DELTA ( BECAUSE
     321.  01:4406                      		;CANNOT BE RIGHT AFTER PT3 COMPILATION)
     322.  01:4406  03                  		INC BC
     323.  01:4407  03                  		INC BC
     324.  01:4408  DD 77 0A            		LD ( IX+(CHNPRM_TnSlDl-12)),A
     325.  01:440B  DD 77 F9            		LD ( IX+(CHNPRM_TSlCnt-12)),A
     326.  01:440E  11 53 47            		LD DE,NT_
     327.  01:4411  DD 7E 06            		LD A,( IX+(CHNPRM_Note-12))
     328.  01:4414  DD 77 07            		LD ( IX+(CHNPRM_SlToNt-12)),A
     329.  01:4417  87                  		ADD A,A
     330.  01:4418  6F                  		LD L,A
     331.  01:4419  26 00               		LD H,0
     332.  01:441B  19                  		ADD HL,DE
     333.  01:441C  7E                  		LD A,( HL)
     334.  01:441D  23                  		INC HL
     335.  01:441E  66                  		LD H,( HL)
     336.  01:441F  6F                  		LD L,A
     337.  01:4420  E5                  		PUSH HL
     338.  01:4421  3A 39 EC            		LD A,( PT3_PrNote)
     339.  01:4424  DD 77 06            		LD ( IX+(CHNPRM_Note-12)),A
     340.  01:4427  87                  		ADD A,A
     341.  01:4428  6F                  		LD L,A
     342.  01:4429  26 00               		LD H,0
     343.  01:442B  19                  		ADD HL,DE
     344.  01:442C  5E                  		LD E,( HL)
     345.  01:442D  23                  		INC HL
     346.  01:442E  56                  		LD D,( HL)
     347.  01:442F  E1                  		POP HL
     348.  01:4430  ED 52               		SBC HL,DE
     349.  01:4432  DD 75 0D            		LD ( IX+(CHNPRM_TnDelt-12)),L
     350.  01:4435  DD 74 0E            		LD ( IX+(CHNPRM_TnDelt+1-12)),H
     351.  01:4438  ED 5B 3A EC         		LD DE,( PT3_PrSlide)
     352.  01:443C  DD 73 FA            		LD ( IX+(CHNPRM_CrTnSl-12)),E
     353.  01:443F  DD 72 FB            		LD ( IX+(CHNPRM_CrTnSl+1-12)),D
     354.  01:4442  0A                  		LD A,( BC) ;SIGNED TONE STEP
     355.  01:4443  03                  		INC BC
     356.  01:4444  08                  		EX AF,AF'
     357.  01:4445  0A                  		LD A,( BC)
     358.  01:4446  03                  		INC BC
     359.  01:4447  A7                  		AND A
     360.  01:4448  28 01               		JR Z,_NOSIG
     361.  01:444A  EB                  		EX DE,HL
     362.  01:444B  ED 52               _NOSIG:	SBC HL,DE
     363.  01:444D  F2 55 44            		JP P,SET_STP
     364.  01:4450  2F                  		CPL
     365.  01:4451  08                  		EX AF,AF'
     366.  01:4452  ED 44               		NEG
     367.  01:4454  08                  		EX AF,AF'
     368.  01:4455  DD 77 0C            SET_STP:	LD ( IX+(CHNPRM_TSlStp+1-12)),A
     369.  01:4458  08                  		EX AF,AF'
     370.  01:4459  DD 77 0B            		LD ( IX+(CHNPRM_TSlStp-12)),A
     371.  01:445C  DD 36 FE 00         		LD ( IX+(CHNPRM_COnOff-12)),0
     372.  01:4460  C9                  		RET
     373.  01:4461                      
     374.  01:4461  DD CB 09 D6         C_GLISS:	SET 2,( IX+(CHNPRM_Flags-12))
     375.  01:4465  0A                  		LD A,( BC)
     376.  01:4466  03                  		INC BC
     377.  01:4467  DD 77 0A            		LD ( IX+(CHNPRM_TnSlDl-12)),A
     378.  01:446A  DD 77 F9            		LD ( IX+(CHNPRM_TSlCnt-12)),A
     379.  01:446D  0A                  		LD A,( BC)
     380.  01:446E  03                  		INC BC
     381.  01:446F  08                  		EX AF,AF'
     382.  01:4470  0A                  		LD A,( BC)
     383.  01:4471  03                  		INC BC
     384.  01:4472  18 E1               		JR SET_STP
     385.  01:4474                      
     386.  01:4474  0A                  C_SMPOS:	LD A,( BC)
     387.  01:4475  03                  		INC BC
     388.  01:4476  DD 77 F5            		LD ( IX+(CHNPRM_PsInSm-12)),A
     389.  01:4479  C9                  		RET
     390.  01:447A                      
     391.  01:447A  0A                  C_ORPOS:	LD A,( BC)
     392.  01:447B  03                  		INC BC
     393.  01:447C  DD 77 F4            		LD ( IX+(CHNPRM_PsInOr-12)),A
     394.  01:447F  C9                  		RET
     395.  01:4480                      
     396.  01:4480  0A                  C_VIBRT:	LD A,( BC)
     397.  01:4481  03                  		INC BC
     398.  01:4482  DD 77 FF            		LD ( IX+(CHNPRM_OnOffD-12)),A
     399.  01:4485  DD 77 FE            		LD ( IX+(CHNPRM_COnOff-12)),A
     400.  01:4488  0A                  		LD A,( BC)
     401.  01:4489  03                  		INC BC
     402.  01:448A  DD 77 00            		LD ( IX+(CHNPRM_OffOnD-12)),A
     403.  01:448D  AF                  		XOR A
     404.  01:448E  DD 77 F9            		LD ( IX+(CHNPRM_TSlCnt-12)),A
     405.  01:4491  DD 77 FA            		LD ( IX+(CHNPRM_CrTnSl-12)),A
     406.  01:4494  DD 77 FB            		LD ( IX+(CHNPRM_CrTnSl+1-12)),A
     407.  01:4497  C9                  		RET
     408.  01:4498                      
     409.  01:4498  0A                  C_ENGLS:	LD A,( BC)
     410.  01:4499  03                  		INC BC
     411.  01:449A  32 48 EC            		LD ( PT3_Env_Del),A
     412.  01:449D  32 A8 EC            		LD ( CurEDel),A
     413.  01:44A0  0A                  		LD A,( BC)
     414.  01:44A1  03                  		INC BC
     415.  01:44A2  6F                  		LD L,A
     416.  01:44A3  0A                  		LD A,( BC)
     417.  01:44A4  03                  		INC BC
     418.  01:44A5  67                  		LD H,A
     419.  01:44A6  22 49 EC            		LD ( PT3_ESldAdd),HL
     420.  01:44A9  C9                  		RET
     421.  01:44AA                      
     422.  01:44AA  0A                  C_DELAY:	LD A,( BC)
     423.  01:44AB  03                  		INC BC
     424.  01:44AC  32 46 EC            		LD ( PT3_Delay),A
     425.  01:44AF  C9                  		RET
     426.  01:44B0                      	
     427.  01:44B0  DD 73 08            SETENV:		LD ( IX+(CHNPRM_Env_En-12)),E
     428.  01:44B3  32 B8 EC            		LD ( AYREGS+AR_EnvTp),A
     429.  01:44B6  0A                  		LD A,( BC)
     430.  01:44B7  03                  		INC BC
     431.  01:44B8  67                  		LD H,A
     432.  01:44B9  0A                  		LD A,( BC)
     433.  01:44BA  03                  		INC BC
     434.  01:44BB  6F                  		LD L,A
     435.  01:44BC  22 B9 EC            		LD ( EnvBase),HL
     436.  01:44BF  AF                  		XOR A
     437.  01:44C0  DD 77 F4            		LD ( IX+(CHNPRM_PsInOr-12)),A
     438.  01:44C3  32 A8 EC            		LD ( CurEDel),A
     439.  01:44C6  67                  		LD H,A
     440.  01:44C7  6F                  		LD L,A
     441.  01:44C8  22 A6 EC            		LD ( CurESld),HL
     442.  01:44CB  C9                  C_NOP:		RET
     443.  01:44CC                      
     444.  01:44CC  87                  SETORN:		ADD A,A
     445.  01:44CD  5F                  		LD E,A
     446.  01:44CE  16 00               		LD D,0
     447.  01:44D0  DD 72 F4            		LD ( IX+(CHNPRM_PsInOr-12)),D
     448.  01:44D3  2A 31 EC            		LD HL,( PT3_OrnPtrs)
     449.  01:44D6  19                  		ADD HL,DE
     450.  01:44D7  5E                  		LD E,( HL)
     451.  01:44D8  23                  		INC HL
     452.  01:44D9  56                  		LD D,( HL)
     453.  01:44DA  2A 2B EC            		LD HL,( PT3_MODADDR)
     454.  01:44DD  19                  		ADD HL,DE
     455.  01:44DE  DD 75 01            		LD ( IX+(CHNPRM_OrnPtr-12)),L
     456.  01:44E1  DD 74 02            		LD ( IX+(CHNPRM_OrnPtr+1-12)),H
     457.  01:44E4  C9                  		RET
     458.  01:44E5                      
     459.  01:44E5                      		;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
     460.  01:44E5  CB 44               SPCCOMS:	dw C_NOP
     461.  01:44E7  61 44               		dw C_GLISS
     462.  01:44E9  00 44               		dw C_PORTM
     463.  01:44EB  74 44               		dw C_SMPOS
     464.  01:44ED  7A 44               		dw C_ORPOS
     465.  01:44EF  80 44               		dw C_VIBRT
     466.  01:44F1  CB 44               		dw C_NOP
     467.  01:44F3  CB 44               		dw C_NOP
     468.  01:44F5  98 44               		dw C_ENGLS
     469.  01:44F7  AA 44               		dw C_DELAY
     470.  01:44F9  CB 44               		dw C_NOP
     471.  01:44FB  CB 44               		dw C_NOP
     472.  01:44FD  CB 44               		dw C_NOP
     473.  01:44FF  CB 44               		dw C_NOP
     474.  01:4501  CB 44               		dw C_NOP
     475.  01:4503  CB 44               		dw C_NOP
     476.  01:4505                      
     477.  01:4505  AF                  CHREGS:		XOR A
     478.  01:4506  32 B5 EC            		LD ( AYREGS+AR_AmplC),A
     479.  01:4509  DD CB 15 46         		BIT 0,( IX+CHNPRM_Flags)
     480.  01:450D  E5                  		PUSH HL
     481.  01:450E  CA 34 46            		JP Z,_CH_EXIT
     482.  01:4511  ED 73 35 EC         		LD ( PT3_CSP),SP
     483.  01:4515  DD 6E 0D            		LD L,( IX+CHNPRM_OrnPtr)
     484.  01:4518  DD 66 0E            		LD H,( IX+CHNPRM_OrnPtr+1)
     485.  01:451B  F9                  		LD SP,HL
     486.  01:451C  D1                  		POP DE
     487.  01:451D  67                  		LD H,A
     488.  01:451E  DD 7E 00            		LD A,( IX+CHNPRM_PsInOr)
     489.  01:4521  6F                  		LD L,A
     490.  01:4522  39                  		ADD HL,SP
     491.  01:4523  3C                  		INC A
     492.  01:4524  BA                  		CP D
     493.  01:4525  38 01               		JR C,_CH_ORPS
     494.  01:4527  7B                  		LD A,E
     495.  01:4528  DD 77 00            _CH_ORPS:	LD ( IX+CHNPRM_PsInOr),A
     496.  01:452B  DD 7E 12            		LD A,( IX+CHNPRM_Note)
     497.  01:452E  86                  		ADD A,( HL)
     498.  01:452F  F2 33 45            		JP P,_CH_NTP
     499.  01:4532  AF                  		XOR A
     500.  01:4533  FE 60               _CH_NTP:	CP 96
     501.  01:4535  38 02               		JR C,_CH_NOK
     502.  01:4537  3E 5F               		LD A,95
     503.  01:4539  87                  _CH_NOK:	ADD A,A
     504.  01:453A  08                  		EX AF,AF'
     505.  01:453B  DD 6E 0F            		LD L,( IX+CHNPRM_SamPtr)
     506.  01:453E  DD 66 10            		LD H,( IX+CHNPRM_SamPtr+1)
     507.  01:4541  F9                  		LD SP,HL
     508.  01:4542  D1                  		POP DE
     509.  01:4543  26 00               		LD H,0
     510.  01:4545  DD 7E 01            		LD A,( IX+CHNPRM_PsInSm)
     511.  01:4548  47                  		LD B,A
     512.  01:4549  87                  		ADD A,A
     513.  01:454A  87                  		ADD A,A
     514.  01:454B  6F                  		LD L,A
     515.  01:454C  39                  		ADD HL,SP
     516.  01:454D  F9                  		LD SP,HL
     517.  01:454E  78                  		LD A,B
     518.  01:454F  3C                  		INC A
     519.  01:4550  BA                  		CP D
     520.  01:4551  38 01               		JR C,_CH_SMPS
     521.  01:4553  7B                  		LD A,E
     522.  01:4554  DD 77 01            _CH_SMPS:	LD ( IX+CHNPRM_PsInSm),A
     523.  01:4557  C1                  		POP BC
     524.  01:4558  E1                  		POP HL
     525.  01:4559  DD 5E 08            		LD E,( IX+CHNPRM_TnAcc)
     526.  01:455C  DD 56 09            		LD D,( IX+CHNPRM_TnAcc+1)
     527.  01:455F  19                  		ADD HL,DE
     528.  01:4560  CB 70               		BIT 6,B
     529.  01:4562  28 06               		JR Z,_CH_NOAC
     530.  01:4564  DD 75 08            		LD ( IX+CHNPRM_TnAcc),L
     531.  01:4567  DD 74 09            		LD ( IX+CHNPRM_TnAcc+1),H
     532.  01:456A  EB                  _CH_NOAC:	EX DE,HL
     533.  01:456B  08                  		EX AF,AF'
     534.  01:456C  6F                  		LD L,A
     535.  01:456D  26 00               		LD H,0
     536.  01:456F  31 53 47            		LD SP,NT_
     537.  01:4572  39                  		ADD HL,SP
     538.  01:4573  F9                  		LD SP,HL
     539.  01:4574  E1                  		POP HL
     540.  01:4575  19                  		ADD HL,DE
     541.  01:4576  DD 5E 06            		LD E,( IX+CHNPRM_CrTnSl)
     542.  01:4579  DD 56 07            		LD D,( IX+CHNPRM_CrTnSl+1)
     543.  01:457C  19                  		ADD HL,DE
     544.  01:457D  ED 7B 35 EC         		LD SP,( PT3_CSP)
     545.  01:4581  E3                  		EX ( SP),HL
     546.  01:4582  AF                  		XOR A
     547.  01:4583  DD B6 05            		OR ( IX+CHNPRM_TSlCnt)
     548.  01:4586  28 3E               		JR Z,_CH_AMP
     549.  01:4588  DD 35 05            		DEC ( IX+CHNPRM_TSlCnt)
     550.  01:458B  20 39               		JR NZ,_CH_AMP
     551.  01:458D  DD 7E 16            		LD A,( IX+CHNPRM_TnSlDl)
     552.  01:4590  DD 77 05            		LD ( IX+CHNPRM_TSlCnt),A
     553.  01:4593  DD 6E 17            		LD L,( IX+CHNPRM_TSlStp)
     554.  01:4596  DD 66 18            		LD H,( IX+CHNPRM_TSlStp+1)
     555.  01:4599  7C                  		LD A,H
     556.  01:459A  19                  		ADD HL,DE
     557.  01:459B  DD 75 06            		LD ( IX+CHNPRM_CrTnSl),L
     558.  01:459E  DD 74 07            		LD ( IX+CHNPRM_CrTnSl+1),H
     559.  01:45A1  DD CB 15 56         		BIT 2,( IX+CHNPRM_Flags)
     560.  01:45A5  20 1F               		JR NZ,_CH_AMP
     561.  01:45A7  DD 5E 19            		LD E,( IX+CHNPRM_TnDelt)
     562.  01:45AA  DD 56 1A            		LD D,( IX+CHNPRM_TnDelt+1)
     563.  01:45AD  A7                  		AND A
     564.  01:45AE  28 01               		JR Z,_CH_STPP
     565.  01:45B0  EB                  		EX DE,HL
     566.  01:45B1  ED 52               _CH_STPP:	SBC HL,DE
     567.  01:45B3  FA C6 45            		JP M,_CH_AMP
     568.  01:45B6  DD 7E 13            		LD A,( IX+CHNPRM_SlToNt)
     569.  01:45B9  DD 77 12            		LD ( IX+CHNPRM_Note),A
     570.  01:45BC  AF                  		XOR A
     571.  01:45BD  DD 77 05            		LD ( IX+CHNPRM_TSlCnt),A
     572.  01:45C0  DD 77 06            		LD ( IX+CHNPRM_CrTnSl),A
     573.  01:45C3  DD 77 07            		LD ( IX+CHNPRM_CrTnSl+1),A
     574.  01:45C6  DD 7E 02            _CH_AMP:	LD A,( IX+CHNPRM_CrAmSl)
     575.  01:45C9  CB 79               		BIT 7,C
     576.  01:45CB  28 13               		JR Z,_CH_NOAM
     577.  01:45CD  CB 71               		BIT 6,C
     578.  01:45CF  28 07               		JR Z,_CH_AMIN
     579.  01:45D1  FE 0F               		CP 15
     580.  01:45D3  28 0B               		JR Z,_CH_NOAM
     581.  01:45D5  3C                  		INC A
     582.  01:45D6  18 05               		JR _CH_SVAM
     583.  01:45D8  FE F1               _CH_AMIN:	CP -15
     584.  01:45DA  28 04               		JR Z,_CH_NOAM
     585.  01:45DC  3D                  		DEC A
     586.  01:45DD  DD 77 02            _CH_SVAM:	LD ( IX+CHNPRM_CrAmSl),A
     587.  01:45E0  6F                  _CH_NOAM:	LD L,A
     588.  01:45E1  78                  		LD A,B
     589.  01:45E2  E6 0F               		AND 15
     590.  01:45E4  85                  		ADD A,L
     591.  01:45E5  F2 E9 45            		JP P,_CH_APOS
     592.  01:45E8  AF                  		XOR A
     593.  01:45E9  FE 10               _CH_APOS:	CP 16
     594.  01:45EB  38 02               		JR C,_CH_VOL
     595.  01:45ED  3E 0F               		LD A,15
     596.  01:45EF  DD B6 1C            _CH_VOL:	OR ( IX+CHNPRM_Volume)
     597.  01:45F2  6F                  		LD L,A
     598.  01:45F3  26 00               		LD H,0
     599.  01:45F5  11 AB EC            		LD DE,VT_
     600.  01:45F8  19                  		ADD HL,DE
     601.  01:45F9  7E                  		LD A,( HL)
     602.  01:45FA  CB 41               _CH_ENV:	BIT 0,C
     603.  01:45FC  20 03               		JR NZ,_CH_NOEN
     604.  01:45FE  DD B6 14            		OR ( IX+CHNPRM_Env_En)
     605.  01:4601  32 B5 EC            _CH_NOEN:	LD ( AYREGS+AR_AmplC),A
     606.  01:4604  CB 78               		BIT 7,B
     607.  01:4606  79                  		LD A,C
     608.  01:4607  28 19               		JR Z,_NO_ENSL
     609.  01:4609  17                  		RLA
     610.  01:460A  17                  		RLA
     611.  01:460B  CB 2F               		SRA A
     612.  01:460D  CB 2F               		SRA A
     613.  01:460F  CB 2F               		SRA A
     614.  01:4611  DD 86 04            		ADD A,( IX+CHNPRM_CrEnSl) ;SEE COMMENT BELOW
     615.  01:4614  CB 68               		BIT 5,B
     616.  01:4616  28 03               		JR Z,_NO_ENAC
     617.  01:4618  DD 77 04            		LD ( IX+CHNPRM_CrEnSl),A
     618.  01:461B  21 47 EC            _NO_ENAC:	LD HL,PT3_AddToEn
     619.  01:461E  86                  		ADD A,( HL) ;BUG IN PT3 - NEED WORD HERE.
     620.  01:461F                      			   ;FIX IT IN NEXT VERSION?
     621.  01:461F  77                  		LD ( HL),A
     622.  01:4620  18 0E               		JR _CH_MIX
     623.  01:4622  1F                  _NO_ENSL:	RRA
     624.  01:4623  DD 86 03            		ADD A,( IX+CHNPRM_CrNsSl)
     625.  01:4626  32 AA EC            		LD ( AddToNs),A
     626.  01:4629  CB 68               		BIT 5,B
     627.  01:462B  28 03               		JR Z,_CH_MIX
     628.  01:462D  DD 77 03            		LD ( IX+CHNPRM_CrNsSl),A
     629.  01:4630  78                  _CH_MIX:	LD A,B
     630.  01:4631  1F                  		RRA
     631.  01:4632  E6 48               		AND 0x48
     632.  01:4634  21 B2 EC            _CH_EXIT:	LD HL,AYREGS+AR_Mixer
     633.  01:4637  B6                  		OR ( HL)
     634.  01:4638  0F                  		RRCA
     635.  01:4639  77                  		LD ( HL),A
     636.  01:463A  E1                  		POP HL
     637.  01:463B  AF                  		XOR A
     638.  01:463C  DD B6 0A            		OR ( IX+CHNPRM_COnOff)
     639.  01:463F  C8                  		RET Z
     640.  01:4640  DD 35 0A            		DEC ( IX+CHNPRM_COnOff)
     641.  01:4643  C0                  		RET NZ
     642.  01:4644  DD AE 15            		XOR ( IX+CHNPRM_Flags)
     643.  01:4647  DD 77 15            		LD ( IX+CHNPRM_Flags),A
     644.  01:464A  1F                  		RRA
     645.  01:464B  DD 7E 0B            		LD A,( IX+CHNPRM_OnOffD)
     646.  01:464E  38 03               		JR C,_CH_ONDL
     647.  01:4650  DD 7E 0C            		LD A,( IX+CHNPRM_OffOnD)
     648.  01:4653  DD 77 0A            _CH_ONDL:	LD ( IX+CHNPRM_COnOff),A
     649.  01:4656  C9                  		RET
     650.  01:4657                      
     651.  01:4657  AF                  PT3_PLAY:	XOR A
     652.  01:4658  32 47 EC            		LD ( PT3_AddToEn),A
     653.  01:465B  32 B2 EC            		LD ( AYREGS+AR_Mixer),A
     654.  01:465E  3D                  		DEC A
     655.  01:465F  32 B8 EC            		LD ( AYREGS+AR_EnvTp),A
     656.  01:4662  21 A5 EC            		LD HL,DelyCnt
     657.  01:4665  35                  		DEC ( HL)
     658.  01:4666  C2 ED 46            		JP NZ,_PL2
     659.  01:4669  21 66 EC            		LD HL,ChanA+CHNPRM_NtSkCn
     660.  01:466C  35                  		DEC ( HL)
     661.  01:466D  20 4E               		JR NZ,_PL1B
     662.  01:466F  ED 4B 3C EC         		LD BC,( PT3_AdInPtA)
     663.  01:4673  0A                  		LD A,( BC)
     664.  01:4674  A7                  		AND A
     665.  01:4675  20 3B               		JR NZ,_PL1A
     666.  01:4677  57                  		LD D,A
     667.  01:4678  32 A9 EC            		LD ( Ns_Base),A
     668.  01:467B  2A 2D EC            		LD HL,( PT3_CrPsPtr)
     669.  01:467E  23                  		INC HL
     670.  01:467F  7E                  		LD A,( HL)
     671.  01:4680  3C                  		INC A
     672.  01:4681  20 08               		JR NZ,_PLNLP
     673.  01:4683  CD 51 42            		CALL CHECKLP
     674.  01:4686  2A 42 EC            		LD HL,( PT3_LPosPtr)
     675.  01:4689  7E                  		LD A,( HL)
     676.  01:468A  3C                  		INC A
     677.  01:468B  22 2D EC            _PLNLP:	LD ( PT3_CrPsPtr),HL
     678.  01:468E  3D                  		DEC A
     679.  01:468F  87                  		ADD A,A
     680.  01:4690  5F                  		LD E,A
     681.  01:4691  CB 12               		RL D
     682.  01:4693  2A 44 EC            		LD HL,( PT3_PatsPtr)
     683.  01:4696  19                  		ADD HL,DE
     684.  01:4697  ED 5B 2B EC         		LD DE,( PT3_MODADDR)
     685.  01:469B  ED 73 37 EC         		LD ( PT3_PSP),SP
     686.  01:469F  F9                  		LD SP,HL
     687.  01:46A0  E1                  		POP HL
     688.  01:46A1  19                  		ADD HL,DE
     689.  01:46A2  44                  		LD B,H
     690.  01:46A3  4D                  		LD C,L
     691.  01:46A4  E1                  		POP HL
     692.  01:46A5  19                  		ADD HL,DE
     693.  01:46A6  22 3E EC            		LD ( PT3_AdInPtB),HL
     694.  01:46A9  E1                  		POP HL
     695.  01:46AA  19                  		ADD HL,DE
     696.  01:46AB  22 40 EC            		LD ( PT3_AdInPtC),HL
     697.  01:46AE  ED 7B 37 EC         		LD SP,( PT3_PSP)
     698.  01:46B2                      
     699.  01:46B2  DD 21 57 EC         _PL1A:		LD IX,ChanA+12
     700.  01:46B6  CD 95 43            		CALL PTDECOD
     701.  01:46B9  ED 43 3C EC         		LD ( PT3_AdInPtA),BC
     702.  01:46BD                      
     703.  01:46BD  21 84 EC            _PL1B:		LD HL,ChanB+CHNPRM_NtSkCn
     704.  01:46C0  35                  		DEC ( HL)
     705.  01:46C1  20 0F               		JR NZ,_PL1C
     706.  01:46C3  DD 21 75 EC         		LD IX,ChanB+12
     707.  01:46C7  ED 4B 3E EC         		LD BC,( PT3_AdInPtB)
     708.  01:46CB  CD 95 43            		CALL PTDECOD
     709.  01:46CE  ED 43 3E EC         		LD ( PT3_AdInPtB),BC
     710.  01:46D2                      
     711.  01:46D2  21 A2 EC            _PL1C:		LD HL,ChanC+CHNPRM_NtSkCn
     712.  01:46D5  35                  		DEC ( HL)
     713.  01:46D6  20 0F               		JR NZ,_PL1D
     714.  01:46D8  DD 21 93 EC         		LD IX,ChanC+12
     715.  01:46DC  ED 4B 40 EC         		LD BC,( PT3_AdInPtC)
     716.  01:46E0  CD 95 43            		CALL PTDECOD
     717.  01:46E3  ED 43 40 EC         		LD ( PT3_AdInPtC),BC
     718.  01:46E7                      
     719.  01:46E7  3A 46 EC            _PL1D:		LD A,( PT3_Delay)
     720.  01:46EA  32 A5 EC            		LD ( DelyCnt),A
     721.  01:46ED                      
     722.  01:46ED  DD 21 4B EC         _PL2:		LD IX,ChanA
     723.  01:46F1  2A AB EC            		LD HL,( AYREGS+AR_TonA)
     724.  01:46F4  CD 05 45            		CALL CHREGS
     725.  01:46F7  22 AB EC            		LD ( AYREGS+AR_TonA),HL
     726.  01:46FA  3A B5 EC            		LD A,( AYREGS+AR_AmplC)
     727.  01:46FD  32 B3 EC            		LD ( AYREGS+AR_AmplA),A
     728.  01:4700  DD 21 69 EC         		LD IX,ChanB
     729.  01:4704  2A AD EC            		LD HL,( AYREGS+AR_TonB)
     730.  01:4707  CD 05 45            		CALL CHREGS
     731.  01:470A  22 AD EC            		LD ( AYREGS+AR_TonB),HL
     732.  01:470D  3A B5 EC            		LD A,( AYREGS+AR_AmplC)
     733.  01:4710  32 B4 EC            		LD ( AYREGS+AR_AmplB),A
     734.  01:4713  DD 21 87 EC         		LD IX,ChanC
     735.  01:4717  2A AF EC            		LD HL,( AYREGS+AR_TonC)
     736.  01:471A  CD 05 45            		CALL CHREGS
     737.  01:471D  22 AF EC            		LD ( AYREGS+AR_TonC),HL
     738.  01:4720                      
     739.  01:4720  2A 7D BF            		LD HL,( Ns_Base_AddToNs)
     740.  01:4723  7C                  		LD A,H
     741.  01:4724  85                  		ADD A,L
     742.  01:4725  32 B1 EC            		LD ( AYREGS+AR_Noise),A
     743.  01:4728                      
     744.  01:4728  3A 47 EC            		LD A,( PT3_AddToEn)
     745.  01:472B  5F                  		LD E,A
     746.  01:472C  87                  		ADD A,A
     747.  01:472D  9F                  		SBC A,A
     748.  01:472E  57                  		LD D,A
     749.  01:472F  2A B9 EC            		LD HL,( EnvBase)
     750.  01:4732  19                  		ADD HL,DE
     751.  01:4733  ED 5B A6 EC         		LD DE,( CurESld)
     752.  01:4737  19                  		ADD HL,DE
     753.  01:4738  22 B6 EC            		LD ( AYREGS+AR_Env),HL
     754.  01:473B                      
     755.  01:473B  AF                  		XOR A
     756.  01:473C  21 A8 EC            		LD HL,CurEDel
     757.  01:473F  B6                  		OR ( HL)
     758.  01:4740  C8                  		RET Z
     759.  01:4741  35                  		DEC ( HL)
     760.  01:4742  C0                  		RET NZ
     761.  01:4743  3A 48 EC            		LD A,( PT3_Env_Del)
     762.  01:4746  77                  		LD ( HL),A
     763.  01:4747  2A 49 EC            		LD HL,( PT3_ESldAdd)
     764.  01:474A  19                  		ADD HL,DE
     765.  01:474B  22 A6 EC            		LD ( CurESld),HL
     766.  01:474E  C9                  		RET
     767.  01:474F                      
     768.  01:474F                      
     769.  01:474F  00 01 00 90         EMPTYSAMORN: 	db 0,1,0,0x90 ;delete $90 if you don't need default sample
     770.  01:4753                      
     771.  01:4753                      NT_:	;Note table 2 ( if you use another in Vortex Tracker II copy it and paste
     772.  01:4753                      	;it from TABLES.TXT)
     773.  01:4753                      
     774.  01:4753                      	dw 0x0D10,0x0C55,0x0BA4,0x0AFC,0x0A5F,0x09CA,0x093D,0x08B8,0x083B,0x07C5,0x0755,0x06EC
     774.  01:4753  10 0D 55 0C A4 0B FC 0A 5F 0A CA 09 3D 09 B8 08 
     774.  01:4763  3B 08 C5 07 55 07 EC 06 
     775.  01:476B                      	dw 0x0688,0x062A,0x05D2,0x057E,0x052F,0x04E5,0x049E,0x045C,0x041D,0x03E2,0x03AB,0x0376
     775.  01:476B  88 06 2A 06 D2 05 7E 05 2F 05 E5 04 9E 04 5C 04 
     775.  01:477B  1D 04 E2 03 AB 03 76 03 
     776.  01:4783                      	dw 0x0344,0x0315,0x02E9,0x02BF,0x0298,0x0272,0x024F,0x022E,0x020F,0x01F1,0x01D5,0x01BB
     776.  01:4783  44 03 15 03 E9 02 BF 02 98 02 72 02 4F 02 2E 02 
     776.  01:4793  0F 02 F1 01 D5 01 BB 01 
     777.  01:479B                      	dw 0x01A2,0x018B,0x0174,0x0160,0x014C,0x0139,0x0128,0x0117,0x0107,0x00F9,0x00EB,0x00DD
     777.  01:479B  A2 01 8B 01 74 01 60 01 4C 01 39 01 28 01 17 01 
     777.  01:47AB  07 01 F9 00 EB 00 DD 00 
     778.  01:47B3                      	dw 0x00D1,0x00C5,0x00BA,0x00B0,0x00A6,0x009D,0x0094,0x008C,0x0084,0x007C,0x0075,0x006F
     778.  01:47B3  D1 00 C5 00 BA 00 B0 00 A6 00 9D 00 94 00 8C 00 
     778.  01:47C3  84 00 7C 00 75 00 6F 00 
     779.  01:47CB                      	dw 0x0069,0x0063,0x005D,0x0058,0x0053,0x004E,0x004A,0x0046,0x0042,0x003E,0x003B,0x0037
     779.  01:47CB  69 00 63 00 5D 00 58 00 53 00 4E 00 4A 00 46 00 
     779.  01:47DB  42 00 3E 00 3B 00 37 00 
     780.  01:47E3                      	dw 0x0034,0x0031,0x002F,0x002C,0x0029,0x0027,0x0025,0x0023,0x0021,0x001F,0x001D,0x001C
     780.  01:47E3  34 00 31 00 2F 00 2C 00 29 00 27 00 25 00 23 00 
     780.  01:47F3  21 00 1F 00 1D 00 1C 00 
     781.  01:47FB                      	dw 0x001A,0x0019,0x0017,0x0016,0x0015,0x0014,0x0012,0x0011,0x0010,0x000F,0x000E,0x000D
     781.  01:47FB  1A 00 19 00 17 00 16 00 15 00 14 00 12 00 11 00 
     781.  01:480B  10 00 0F 00 0E 00 0D 00 
     221   01:4813                      	include AYFX-ROM.ASM
       1.  01:4813                      		; --- ayFX REPLAYER v1.11r ---
       2.  01:4813                      
       3.  01:4813                      		; --- v1.11s AFB file support
       4.  01:4813                      		; --- v1.11r If a frame volume is zero then no AYREGS update
       5.  01:4813                      		; --- v1.1r  Relative volume using PT3 Volume Table
       6.  01:4813                      		; --- v1.1   Explicit priority (as suggested by AR)
       7.  01:4813                      		; --- v1.0f  Bug fixed (error when using noise)
       8.  01:4813                      		; --- v1.0   Initial release
       9.  01:4813                      
      10.  01:4813  (01:0014)           n_sfx	equ	20
      11.  01:4813  (00ED)              	align 0x100
      12.  01:4900                      sfx_prio:
      13.  01:4900                      	;	00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20
      14.  01:4900                      	db	03,00,02,02,02,02,01,01,04,00,03,01,01,00,00,00,00,00,00,00,00
      14.  01:4900  03 00 02 02 02 02 01 01 04 00 03 01 01 00 00 00 
      14.  01:4910  00 00 00 00 00 
      15.  01:4915                      	
      16.  01:4915  (01:C800)           ayFX_STREAMS equ miz_buffer	
      17.  01:4915                      
      18.  01:4915                      ayFX_SETUP:	; --- ayFX replayer setup ---
      19.  01:4915  21 C3 05            		ld	hl,	sfxBank_miz
      20.  01:4918  11 00 C8            		ld	de,miz_buffer
      21.  01:491B  CD 0D 05            		call	mom_depack_rom
      22.  01:491E  3E 01               		ld	a,1				; Starting channel
      23.  01:4920  32 E1 ED            		ld	(ayFX_CHANNEL),a		; Updated
      24.  01:4923                      	
      25.  01:4923                      ayFX_END:	; --- End of an ayFX stream ---
      26.  01:4923  3E FF               		ld	a,255				; Lowest ayFX priority
      27.  01:4925  32 D8 ED            		ld	(ayFX_PRIORITY),a		; Priority saved (not playing ayFX stream)
      28.  01:4928  C9                  		ret					; Return
      29.  01:4929                      
      30.  01:4929                      ayFX_INIT:	; ---     INIT A NEW ayFX STREAM     ---
      31.  01:4929                      		; --- INPUT: A -> sound to be played ---
      32.  01:4929                      		; ---        C -> Volume     ---
      33.  01:4929  C5                  		push	bc				; Store bc in stack
      34.  01:492A  D5                  		push	de				; Store de in stack
      35.  01:492B  E5                  		push	hl				; Store hl in stack
      36.  01:492C  6F                  		ld	l,a					; l:=a (new ayFX stream index)
      37.  01:492D  26 49               		ld	h,high sfx_prio		
      38.  01:492F  66                  		ld	h,(hl)				; h:=New priority
      39.  01:4930                      		
      40.  01:4930  3A D8 ED            		ld	a,(ayFX_PRIORITY)	; a:=Current ayFX stream priority
      41.  01:4933  BC                  		cp	h					; If new ayFX stream priority is higher than currently one...
      42.  01:4934  DA 69 49            		jp	c,_INIT_END			; ...we don't start the new ayFX stream
      43.  01:4937                      		; --- INITS ---
      44.  01:4937  7C                  		ld	a,h
      45.  01:4938  32 D8 ED            		ld	(ayFX_PRIORITY),a	; new ayFX stream priority saved in RAM
      46.  01:493B  45                  		ld	b,l					; b:=l (new ayFX stream index)
      47.  01:493C                      		; --- Volume adjust using PT3 volume table ---
      48.  01:493C                      								; c:=New volume 
      49.  01:493C  3E 0F               		ld	a,15				; a:=15
      50.  01:493E  91                  		sub	c					; a:=15-New volume = relative volume
      51.  01:493F  CA 6D 49            		jp	z,_INIT_NOSOUND		; If priority is 15 -> no sound output (volume is zero)
      52.  01:4942                      
      53.  01:4942  21 AC ED                    ld  hl,_sfx_vol_fix
      54.  01:4945  86                          add a,(hl)
      55.  01:4946  FA 6D 49                    jp  m,_INIT_NOSOUND
      56.  01:4949                      
      57.  01:4949  20 01               		jr  nz,1f
      58.  01:494B  3C                  		inc	a
      59.  01:494C                      1:        
      60.  01:494C                      
      61.  01:494C  87                  		add	a,a				; a:=a*2
      62.  01:494D  87                  		add	a,a				; a:=a*4
      63.  01:494E  87                  		add	a,a				; a:=a*8
      64.  01:494F  87                  		add	a,a				; a:=a*16
      65.  01:4950  5F                  		ld	e,a				; e:=a
      66.  01:4951  16 00               		ld	d,0				; de:=a
      67.  01:4953  21 AB EC            		ld	hl,VT_				; hl:=PT3 volume table
      68.  01:4956  19                  		add	hl,de				; hl is a pointer to the relative volume table
      69.  01:4957  22 E2 ED            		ld	(ayFX_VT),hl			; Save pointer
      70.  01:495A                      		; --- ayFX stream pointer ---
      71.  01:495A  68                  		ld	l,b				; l:=b (new ayFX stream index)
      72.  01:495B  26 00               		ld	h,0				; hl:=b (new ayFX stream index)
      73.  01:495D  29                  		add	hl,hl				; hl:=hl*2
      74.  01:495E  01 01 C8            		ld bc, ayFX_STREAMS+1	; address offset table effects
      75.  01:4961  09                  		add hl, bc				; PATCH for AFB support
      76.  01:4962  4E                  		ld c, (hl)
      77.  01:4963  23                  		inc hl
      78.  01:4964  46                  		ld b, (hl)
      79.  01:4965  09                  		add hl, bc			; new effect address obtained in hl	
      80.  01:4966  22 DB ED            		ld	(ayFX_POINTER),hl		; Pointer saved in RAM
      81.  01:4969                      _INIT_END:	
      82.  01:4969  E1                  		pop	hl				; Retrieve hl from stack
      83.  01:496A  D1                  		pop	de				; Retrieve de from stack
      84.  01:496B  C1                  		pop	bc				; Retrieve bc from stack
      85.  01:496C  C9                  		ret					; Return
      86.  01:496D                      _INIT_NOSOUND:	; --- Init a sample with relative volume zero -> no sound output ---
      87.  01:496D  3E FF               		ld	a,255				; Lowest ayFX priority
      88.  01:496F  32 D8 ED            		ld	(ayFX_PRIORITY),a		; Priority saved (not playing ayFX stream)
      89.  01:4972  C3 69 49            		jp	_INIT_END			; Jumps to _INIT_END
      90.  01:4975                      
      91.  01:4975                      ayFX_FRAME:
      92.  01:4975                      ayFX_PLAY:	; --- PLAY A FRAME OF AN ayFX STREAM ---
      93.  01:4975  3A D8 ED            		ld	a,(ayFX_PRIORITY)		; a:=Current ayFX stream priority
      94.  01:4978  B7                  		or	a				; If priority has bit 7 on...
      95.  01:4979  F8                  		ret	m				; ...return
      96.  01:497A                      		; --- Extract control byte from stream ---
      97.  01:497A  2A DB ED            		ld	hl,(ayFX_POINTER)		; Pointer to the current ayFX stream
      98.  01:497D  4E                  		ld	c,(hl)				; c:=Control byte
      99.  01:497E  23                  		inc	hl				; Increment pointer
     100.  01:497F                      		; --- Check if there's new tone on stream ---
     101.  01:497F  CB 69               		bit	5,c				; If bit 5 c is off...
     102.  01:4981  CA 8C 49            		jp	z,_CHECK_NN			; ...jump to _CHECK_NN (no new tone)
     103.  01:4984                      		; --- Extract new tone from stream ---
     104.  01:4984  5E                  		ld	e,(hl)				; e:=lower byte of new tone
     105.  01:4985  23                  		inc	hl				; Increment pointer
     106.  01:4986  56                  		ld	d,(hl)				; d:=higher byte of new tone
     107.  01:4987  23                  		inc	hl				; Increment pointer
     108.  01:4988  ED 53 DD ED         		ld	(ayFX_TONE),de			; ayFX tone updated
     109.  01:498C                      _CHECK_NN:	; --- Check if there's new noise on stream ---
     110.  01:498C  CB 71               		bit	6,c				; if bit 6 c is off...
     111.  01:498E  CA 9B 49            		jp	z,_SETPOINTER			; ...jump to _SETPOINTER (no new noise)
     112.  01:4991                      		; --- Extract new noise from stream ---
     113.  01:4991  7E                  		ld	a,(hl)				; a:=New noise
     114.  01:4992  23                  		inc	hl				; Increment pointer
     115.  01:4993  FE 20               		cp	0x20				; If it's an illegal value of noise (used to mark end of stream)...
     116.  01:4995  CA 23 49            		jp	z,ayFX_END			; ...jump to ayFX_END
     117.  01:4998  32 DF ED            		ld	(ayFX_NOISE),a			; ayFX noise updated
     118.  01:499B                      _SETPOINTER:	; --- Update ayFX pointer ---
     119.  01:499B  22 DB ED            		ld	(ayFX_POINTER),hl		; Update ayFX stream pointer
     120.  01:499E                      		; --- Extract volume ---
     121.  01:499E  79                  		ld	a,c				; a:=Control byte
     122.  01:499F  E6 0F               		and	0x0F				; lower nibble
     123.  01:49A1                      		; --- Fix the volume using PT3 Volume Table ---
     124.  01:49A1  2A E2 ED            		ld	hl,(ayFX_VT)			; hl:=Pointer to relative volume table
     125.  01:49A4  5F                  		ld	e,a				; e:=a (ayFX volume)
     126.  01:49A5  16 00               		ld	d,0				; d:=0
     127.  01:49A7  19                  		add	hl,de				; hl:=hl+de (hl points to the relative volume of this frame
     128.  01:49A8  7E                  		ld	a,(hl)				; a:=ayFX relative volume
     129.  01:49A9  32 E0 ED            		ld	(ayFX_VOLUME),a			; ayFX volume updated
     130.  01:49AC  B7                  		or	a				; If relative volume is zero...
     131.  01:49AD  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     132.  01:49AE                      		; -------------------------------------
     133.  01:49AE                      		; --- COPY ayFX VALUES IN TO AYREGS ---
     134.  01:49AE                      		; -------------------------------------
     135.  01:49AE                      		; --- Set noise channel ---
     136.  01:49AE  CB 79               		bit	7,c				; If noise is off...
     137.  01:49B0  C2 B9 49            		jp	nz,_SETMASKS			; ...jump to _SETMASKS
     138.  01:49B3  3A DF ED            		ld	a,(ayFX_NOISE)			; ayFX noise value
     139.  01:49B6  32 B1 EC            		ld	(AYREGS+6),a			; copied in to AYREGS (noise channel)
     140.  01:49B9                      _SETMASKS:	; --- Set mixer masks ---
     141.  01:49B9  79                  		ld	a,c				; a:=Control byte
     142.  01:49BA  E6 90               		and	0x90				; Only bits 7 and 4 (noise and tone mask for psg reg 7)
     143.  01:49BC  FE 90               		cp	0x90				; If no noise and no tone...
     144.  01:49BE  C8                  		ret	z				; ...return (don't copy ayFX values in to AYREGS)
     145.  01:49BF                      		; --- Copy ayFX values in to ARYREGS ---
     146.  01:49BF  CB 0F               		rrc	a				; Rotate a to the right (1 TIME)
     147.  01:49C1  CB 0F               		rrc	a				; Rotate a to the right (2 TIMES) (OR mask)
     148.  01:49C3  16 DB               		ld	d,0xDB				; d:=Mask for psg mixer (AND mask)
     149.  01:49C5                      		; --- Calculate next ayFX channel ---
     150.  01:49C5  21 E1 ED            		ld	hl,ayFX_CHANNEL			; Old ayFX playing channel
     151.  01:49C8  35                  		dec	(hl)				; New ayFX playing channel
     152.  01:49C9  C2 CE 49            		jp	nz,_SETCHAN			; If not zero jump to _SETCHAN
     153.  01:49CC  36 02               		ld	(hl),2				; XXX John asks 2 XXX If zero -> set channel 3
     154.  01:49CE  46                  _SETCHAN:	ld	b,(hl)				; Channel counter
     155.  01:49CF  04                  		inc	b					; XXX John asks for A & B XXX 
     156.  01:49D0                      _CHK1:		; --- Check if playing channel was 1 ---
     157.  01:49D0  10 10               		djnz	_CHK2				; Decrement and jump if channel was not 1
     158.  01:49D2                      _PLAY_C:	; --- Play ayFX stream on channel C ---
     159.  01:49D2  CD 0C 4A            		call	_SETMIXER			; Set PSG mixer value (a:=ayFX volume)
     160.  01:49D5  32 B5 EC            		ld	(AYREGS+10),a			; Volume copied in to AYREGS (channel C volume)
     161.  01:49D8  CB 51               		bit	2,c				; If tone is off...
     162.  01:49DA  C0                  		ret	nz				; ...return
     163.  01:49DB  2A DD ED            		ld	hl,(ayFX_TONE)			; ayFX tone value
     164.  01:49DE  22 AF EC            		ld	(AYREGS+4),hl			; copied in to AYREGS (channel C tone)
     165.  01:49E1  C9                  		ret					; Return
     166.  01:49E2                      _CHK2:		; --- Check if playing channel was 2 ---
     167.  01:49E2  CB 0A               		rrc	d				; Rotate right AND mask
     168.  01:49E4  CB 0F               		rrc	a				; Rotate right OR mask
     169.  01:49E6  10 10               		djnz	_CHK3				; Decrement and jump if channel was not 2
     170.  01:49E8                      _PLAY_B:	; --- Play ayFX stream on channel B ---
     171.  01:49E8  CD 0C 4A            		call	_SETMIXER			; Set PSG mixer value (a:=ayFX volume)
     172.  01:49EB  32 B4 EC            		ld	(AYREGS+9),a			; Volume copied in to AYREGS (channel B volume)
     173.  01:49EE  CB 49               		bit	1,c				; If tone is off...
     174.  01:49F0  C0                  		ret	nz				; ...return
     175.  01:49F1  2A DD ED            		ld	hl,(ayFX_TONE)			; ayFX tone value
     176.  01:49F4  22 AD EC            		ld	(AYREGS+2),hl			; copied in to AYREGS (channel B tone)
     177.  01:49F7  C9                  		ret					; Return
     178.  01:49F8                      _CHK3:		; --- Check if playing channel was 3 ---
     179.  01:49F8  CB 0A               		rrc	d				; Rotate right AND mask
     180.  01:49FA  CB 0F               		rrc	a				; Rotate right OR mask
     181.  01:49FC                      _PLAY_A:	; --- Play ayFX stream on channel A ---
     182.  01:49FC  CD 0C 4A            		call	_SETMIXER			; Set PSG mixer value (a:=ayFX volume)
     183.  01:49FF  32 B3 EC            		ld	(AYREGS+8),a			; Volume copied in to AYREGS (channel A volume)
     184.  01:4A02  CB 41               		bit	0,c				; If tone is off...
     185.  01:4A04  C0                  		ret	nz				; ...return
     186.  01:4A05  2A DD ED            		ld	hl,(ayFX_TONE)			; ayFX tone value
     187.  01:4A08  22 AB EC            		ld	(AYREGS+0),hl			; copied in to AYREGS (channel A tone)
     188.  01:4A0B  C9                  		ret					; Return
     189.  01:4A0C                      _SETMIXER:	; --- Set PSG mixer value ---
     190.  01:4A0C  4F                  		ld	c,a				; c:=OR mask
     191.  01:4A0D  3A B2 EC            		ld	a,(AYREGS+7)			; a:=PSG mixer value
     192.  01:4A10  A2                  		and	d				; AND mask
     193.  01:4A11  B1                  		or	c				; OR mask
     194.  01:4A12  32 B2 EC            		ld	(AYREGS+7),a			; PSG mixer value updated
     195.  01:4A15  3A E0 ED            		ld	a,(ayFX_VOLUME)			; a:=ayFX volume value
     196.  01:4A18  C9                  		ret					; Return
     197.  01:4A19                      
     198.  01:4A19                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     199.  01:4A19                      ; VT_:	INCBIN	"VT.BIN"
     200.  01:4A19                      		; --- UNCOMMENT THIS IF YOU DON'T USE THIS REPLAYER WITH PT3 REPLAYER ---
     201.  01:4A19                      		
     202.  01:4A19                      
     203.  01:4A19                      ; ;struc	AR
     204.  01:4A19                      ; AR_TonA		equ 0	;RESW 1
     205.  01:4A19                      ; AR_TonB		equ 2	;RESW 1
     206.  01:4A19                      ; AR_TonC		equ 4	;RESW 1
     207.  01:4A19                      ; AR_Noise	equ 6	;RESB 1
     208.  01:4A19                      ; AR_Mixer	equ 7	;RESB 1
     209.  01:4A19                      ; AR_AmplA	equ 8	;RESB 1
     210.  01:4A19                      ; AR_AmplB	equ 9	;RESB 1
     211.  01:4A19                      ; AR_AmplC	equ 10	;RESB 1
     212.  01:4A19                      ; AR_Env		equ 11	;RESW 1
     213.  01:4A19                      ; AR_EnvTp	equ 13	;RESB 1
     214.  01:4A19                      ; ;endstruc
     215.  01:4A19                      
     216.  01:4A19                      
     217.  01:4A19                      
     218.  01:4A19                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     219.  01:4A19                      
     222   01:4A19                      	include enemies.asm
       1.  01:4A19                      
       2.  01:4A19                      
       3.  01:4A19                      ; Fast random number generator using the same method
       4.  01:4A19                      ; as the CDMA used in cellular telephones
       5.  01:4A19                      ;--------------------------------------------------------------------
       6.  01:4A19                      ; init random seed 
       7.  01:4A19                      
       8.  01:4A19                      rand8_init:
       9.  01:4A19  2A 9E FC            	LD      HL,(JIFFY)
      10.  01:4A1C  CB C5               	SET		0,L
      11.  01:4A1E  22 E6 ED            	LD      (randSeed),HL
      12.  01:4A21  C9                  	RET
      13.  01:4A22                      
      14.  01:4A22                      
      15.  01:4A22                      ; -------------------------------------------------------------------
      16.  01:4A22                      ; rand8
      17.  01:4A22                      ; -------------------------------------------------------------------
      18.  01:4A22                      ;
      19.  01:4A22                      ; choose a random number in the set [0,127] with uniform distribution
      20.  01:4A22                      ; return: A = random value
      21.  01:4A22                      
      22.  01:4A22                      rand8:
      23.  01:4A22  2A E6 ED            	ld      hl,(randSeed)
      24.  01:4A25  29                  	add     hl,hl
      25.  01:4A26  9F                  	sbc     a,a
      26.  01:4A27  E6 83               	and     083h
      27.  01:4A29  AD                  	xor     l
      28.  01:4A2A  6F                  	ld      l,a
      29.  01:4A2B  22 E6 ED            	ld      (randSeed),hl
      30.  01:4A2E  C9                  	ret
      31.  01:4A2F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      32.  01:4A2F                      ;	increase the wave counter
      33.  01:4A2F                      ; 	and test for landing permission
      34.  01:4A2F                      	
      35.  01:4A2F                      land_now_test:
      36.  01:4A2F  3A EA ED            	ld	a,(wave_count)
      37.  01:4A32  3C                  	inc	a
      38.  01:4A33  32 EA ED            	ld	(wave_count),a
      39.  01:4A36  5F                  	ld	e,a
      40.  01:4A37  3A F3 ED            	ld	a,(cur_level)
      41.  01:4A3A  0F 0F               [2]	rrca
      42.  01:4A3C  E6 0F               	and	15
      43.  01:4A3E  C6 19               	add	a,25
      44.  01:4A40  BB                  	cp	e				; 'land now' counter after  25+cur_level/4 waves
      45.  01:4A41  C0                  	ret nz
      46.  01:4A42                      
      47.  01:4A42  21 0A 66            	ld	hl,land_now
      48.  01:4A45  11 00 1F            	ld	de,0x1C00+8*3*32
      49.  01:4A48  CD BE 66            	call	print_strf
      50.  01:4A4B  3E FF               	ld	a,-1
      51.  01:4A4D  32 EB ED            	ld	(landing_permission),a
      52.  01:4A50                      	
      53.  01:4A50  3E 0E               	ld	a,14			; Land Now
      54.  01:4A52  CD BE 05            	call AFXPLAY
      55.  01:4A55                      	
      56.  01:4A55  C9                  	ret
      57.  01:4A56                      
      58.  01:4A56                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      59.  01:4A56                      ;
      60.  01:4A56                      ; NPC initialization - fake for testing
      61.  01:4A56                      ;
      62.  01:4A56                      npc_init:
      63.  01:4A56  DD 21 15 EE         	ld  ix,enemies
      64.  01:4A5A  06 08               	ld  b,max_enem
      65.  01:4A5C  11 0E 00            	ld	de,enemy_data
      66.  01:4A5F                      
      67.  01:4A5F  DD 36 07 00         1:  ld  (ix+enemy_data.status),0
      68.  01:4A63  DD 36 09 FF         	ld  (ix+enemy_data.kind),255
      69.  01:4A67  DD 36 08 00         	ld	(ix+enemy_data.cntr),0
      70.  01:4A6B  DD 36 00 C0         	ld	(ix+enemy_data.y),192
      71.  01:4A6F                      
      72.  01:4A6F  DD 19               	add ix,de
      73.  01:4A71  10 EC               	djnz    1b
      74.  01:4A73                      
      75.  01:4A73  21 B4 00            	ld	hl,assault_wave_timer_preset
      76.  01:4A76  22 E8 ED            	ld	(assault_wave_timer),hl
      77.  01:4A79  AF                  	xor	a
      78.  01:4A7A  32 EA ED            	ld	(wave_count),a
      79.  01:4A7D  32 EB ED            	ld	(landing_permission),a
      80.  01:4A80                      ; turn off MS and enemy bullets
      81.  01:4A80                      
      82.  01:4A80                      bull_init:
      83.  01:4A80  AF                  	xor a
      84.  01:4A81  32 EC ED            	ld  (bullet_rate),a
      85.  01:4A84                      
      86.  01:4A84  DD 21 85 EE         	ld  ix,ms_bullets
      87.  01:4A88  11 0E 00            	ld  de,enemy_data
      88.  01:4A8B                      	repeat	max_bullets
      89.  01:4A8B                    < 	ld  (ix+enemy_data.status),a
      90.  01:4A8B                    < 	ld	(ix+enemy_data.color),15
      91.  01:4A8B                    < 	add ix,de
      92.  01:4A8B                    < 	endrepeat
      92.  01:4A8B  DD 77 07 DD 36 0B 0F DD 19 DD 77 07 DD 36 0B 0F 
      92.  01:4A9B  DD 19 
      93.  01:4A9D                      
      94.  01:4A9D                      	; ld	a,(cur_level)
      95.  01:4A9D                      	; ld	l,a
      96.  01:4A9D                      	; ld	h,0
      97.  01:4A9D                      	; ld	bc,clr_enemy_bullts
      98.  01:4A9D                      	; add	hl,bc
      99.  01:4A9D                      	; ld	b,(hl)
     100.  01:4A9D  06 0F               	ld	b,15
     101.  01:4A9F                      	
     102.  01:4A9F  AF                  	xor	a
     103.  01:4AA0  DD 21 A1 EE         	ld  ix,enem_bullets
     104.  01:4AA4                      	repeat	max_enem_bullets
     105.  01:4AA4                    < 	ld  (ix+enemy_data.status),a
     106.  01:4AA4                    < 	ld	(ix+enemy_data.color),b		; colour for enemy bullets
     107.  01:4AA4                    < 	add ix,de
     108.  01:4AA4                    < 	endrepeat
     108.  01:4AA4  DD 77 07 DD 70 0B DD 19 DD 77 07 DD 70 0B DD 19 
     108.  01:4AB4  DD 77 07 DD 70 0B DD 19 
     109.  01:4ABC                      
     110.  01:4ABC  C9                  	ret
     111.  01:4ABD                      
     112.  01:4ABD                      
     113.  01:4ABD                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     114.  01:4ABD                      ;
     115.  01:4ABD                      ;	timer for wave assaults
     116.  01:4ABD                      ;
     117.  01:4ABD                      wave_timer:
     118.  01:4ABD  2A E8 ED            	ld	hl,(assault_wave_timer)
     119.  01:4AC0  2B                  	dec	hl
     120.  01:4AC1  7C                  	ld	a,h
     121.  01:4AC2  B5                  	or	l
     122.  01:4AC3  22 E8 ED            	ld	(assault_wave_timer),hl
     123.  01:4AC6  C0                  	ret	nz
     124.  01:4AC7                      
     125.  01:4AC7  3E 01               	ld	a,1			; wave incoming
     126.  01:4AC9  CD BE 05            	call AFXPLAY
     127.  01:4ACC                      	
     128.  01:4ACC  21 B4 00            	ld	hl,assault_wave_timer_preset
     129.  01:4ACF  3A F3 ED            	ld	a,(cur_level)
     130.  01:4AD2  87                  	add	a,a
     131.  01:4AD3  5F                  	ld	e,a
     132.  01:4AD4  16 00               	ld	d,0
     133.  01:4AD6  A7                  	and	a
     134.  01:4AD7  ED 52               	sbc	hl,de	; at level 15 frequency is a wave each 2,5 seconds
     135.  01:4AD9  22 E8 ED            	ld	(assault_wave_timer),hl	; 180 - 2*cur_level
     136.  01:4ADC                      	
     137.  01:4ADC                      
     138.  01:4ADC  CD 2F 4A            	call	land_now_test
     139.  01:4ADF                      	
     140.  01:4ADF  CD 22 4A            	call	rand8
     141.  01:4AE2  E6 07               	and	7
     142.  01:4AE4                      	
     143.  01:4AE4  CA 08 4C            	jp	z,wave0
     144.  01:4AE7  3D                  	dec	a
     145.  01:4AE8  CA 08 4C            	jp	z,wave1
     146.  01:4AEB  3D                  	dec	a
     147.  01:4AEC  CA 98 4C            	jp	z,wave2
     148.  01:4AEF  3D                  	dec	a
     149.  01:4AF0  CA 2E 4D            	jp	z,wave3
     150.  01:4AF3  3D                  	dec	a
     151.  01:4AF4  CA B5 4D            	jp	z,wave4
     152.  01:4AF7  3D                  	dec	a
     153.  01:4AF8  CA 4B 4E            	jp	z,wave5
     154.  01:4AFB  3D                  	dec	a
     155.  01:4AFC  CA C4 4E            	jp	z,wave6
     156.  01:4AFF  C3 66 4F            	jp	wave7
     157.  01:4B02                      
     158.  01:4B02                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     159.  01:4B02                      ;
     160.  01:4B02                      ;	enemies coming frontally
     161.  01:4B02                      ;
     162.  01:4B02  (00FE)              	align 0x100
     163.  01:4C00                      spritecolors:
     164.  01:4C00  0F 0E 09 07         	db       15,14, 9, 7
     165.  01:4C04  09 03 0E 0F         	db        9, 3,14,15
     166.  01:4C08                      	
     167.  01:4C08                      wave0:
     168.  01:4C08                      wave1:
     169.  01:4C08  CD 22 4A            	call	rand8
     170.  01:4C0B  E6 0F               	and	15
     171.  01:4C0D  4F                  	ld 	c,a		; Y off set
     172.  01:4C0E  D9                  	exx
     173.  01:4C0F                      
     174.  01:4C0F  CD 22 4A            	call	rand8
     175.  01:4C12  E6 07               	and	7
     176.  01:4C14  6F                  	ld	l,a
     177.  01:4C15  26 4C               	ld	h, high spritecolors
     178.  01:4C17  7E                  	ld	a,(hl)	
     179.  01:4C18  FD 6F               	ld	iyl,a	; color
     180.  01:4C1A  7D                  	ld	a,l
     181.  01:4C1B  87                  	add	a,a
     182.  01:4C1C  87                  	add	a,a
     183.  01:4C1D  87                  	add	a,a
     184.  01:4C1E  87                  	add	a,a
     185.  01:4C1F                      
     186.  01:4C1F  C6 40               	add	a,64
     187.  01:4C21  47                  	ld	b,a			; frame
     188.  01:4C22                      	
     189.  01:4C22  3A ED ED            	ld	a,(dxmap)
     190.  01:4C25  E6 80               	and	0x80
     191.  01:4C27  28 0C               	jr	z,.pos
     192.  01:4C29                      .neg
     193.  01:4C29  11 C0 FF            	ld	de,-64
     194.  01:4C2C  0E 01               	ld	c,+1		; enemies going right
     195.  01:4C2E  D9                  	exx	
     196.  01:4C2F  11 01 00            	ld 	de,1		; enemy speed = 1
     197.  01:4C32  D9                  	exx
     198.  01:4C33  18 0E               	jr	1f
     199.  01:4C35                      .pos
     200.  01:4C35  11 20 01            	ld	de,256+32
     201.  01:4C38  0E 41               	ld	c,1+64	; enemies going left
     202.  01:4C3A  3E 04               	ld	a,4
     203.  01:4C3C  80                  	add	a,b
     204.  01:4C3D  47                  	ld	b,a
     205.  01:4C3E  D9                  	exx	
     206.  01:4C3F  11 FF FF            	ld 	de,-1		; enemy speed = -1
     207.  01:4C42  D9                  	exx
     208.  01:4C43                      1:
     209.  01:4C43  D9                  	exx	
     210.  01:4C44  3E 40               	ld	a,64
     211.  01:4C46  81                  	add	a,c
     212.  01:4C47  D9                  	exx		
     213.  01:4C48                      	
     214.  01:4C48  2A EE ED            	ld	hl,(xmap)
     215.  01:4C4B  19                  	add	hl,de
     216.  01:4C4C                      
     217.  01:4C4C  DD 21 15 EE         	ld  ix,enemies
     218.  01:4C50  FD 26 08            	ld	iyh,max_enem
     219.  01:4C53  11 0E 00            	ld  de,enemy_data
     220.  01:4C56                      	
     221.  01:4C56                      1:
     222.  01:4C56  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     223.  01:4C5A  20 35               	jr  nz,.next
     224.  01:4C5C                      
     225.  01:4C5C  DD 71 07            	ld  (ix+enemy_data.status),c
     226.  01:4C5F  DD 70 0A            	ld	(ix+enemy_data.frame),b
     227.  01:4C62                      
     228.  01:4C62  DD 36 09 00         	ld  (ix+enemy_data.kind),0
     229.  01:4C66  D9                  	exx
     230.  01:4C67  FD 45               	ld	b,iyl
     231.  01:4C69  DD 70 0B            	ld	(ix+enemy_data.color),b
     232.  01:4C6C  DD 73 0C            	ld	(ix+enemy_data.speed),e
     233.  01:4C6F  DD 72 0D            	ld	(ix+enemy_data.speed+1),d
     234.  01:4C72  D9                  	exx
     235.  01:4C73                      
     236.  01:4C73  C5                  	push	bc
     237.  01:4C74  01 10 00            	ld bc,16
     238.  01:4C77  09                  	add hl,bc 
     239.  01:4C78  DD 75 01            	ld  (ix+enemy_data.x),l
     240.  01:4C7B  DD 74 02            	ld  (ix+enemy_data.x+1),h
     241.  01:4C7E  C1                  	pop	bc
     242.  01:4C7F                      	
     243.  01:4C7F  DD 77 00            	ld  (ix+enemy_data.y),a
     244.  01:4C82  C6 20               	add	a,32
     245.  01:4C84                      	
     246.  01:4C84  CD 00 64            	call	set_size
     247.  01:4C87                      
     248.  01:4C87  DD 19               	add ix,de
     249.  01:4C89  FD 25               	dec	iyh
     250.  01:4C8B  C8                  	ret	z
     251.  01:4C8C  FE AF               	cp	191-16
     252.  01:4C8E  38 C6               	jr	c,1b
     253.  01:4C90  C9                  	ret
     254.  01:4C91                      
     255.  01:4C91                      .next
     256.  01:4C91  DD 19               	add ix,de
     257.  01:4C93  FD 25               	dec	iyh
     258.  01:4C95  C8                  	ret	z
     259.  01:4C96  18 BE               	jr	1b
     260.  01:4C98                      	
     261.  01:4C98                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     262.  01:4C98                      ;
     263.  01:4C98                      ;	enemies coming from back
     264.  01:4C98                      ;
     265.  01:4C98                      wave2:
     266.  01:4C98  CD 22 4A            	call	rand8
     267.  01:4C9B  E6 0F               	and	15
     268.  01:4C9D  4F                  	ld 	c,a		; Y off set
     269.  01:4C9E  D9                  	exx
     270.  01:4C9F                      
     271.  01:4C9F  CD 22 4A            	call	rand8
     272.  01:4CA2  E6 07               	and	7
     273.  01:4CA4  6F                  	ld	l,a
     274.  01:4CA5  26 4C               	ld	h, high spritecolors
     275.  01:4CA7  7E                  	ld	a,(hl)	
     276.  01:4CA8  FD 6F               	ld	iyl,a		; color
     277.  01:4CAA                      	
     278.  01:4CAA  7D                  	ld	a,l
     279.  01:4CAB  87                  	add	a,a
     280.  01:4CAC  87                  	add	a,a
     281.  01:4CAD  87                  	add	a,a
     282.  01:4CAE  87                  	add	a,a
     283.  01:4CAF                      
     284.  01:4CAF  C6 40               	add	a,64
     285.  01:4CB1  47                  	ld	b,a			; frame
     286.  01:4CB2                      
     287.  01:4CB2  D9                  	exx
     288.  01:4CB3  3A ED ED            	ld	a,(dxmap)
     289.  01:4CB6  F6 02               	or	2
     290.  01:4CB8  CB 2F CB 2F         [2] sra a			; de' = player speed 
     291.  01:4CBC  5F                  	ld	e,a
     292.  01:4CBD  17                  	rla
     293.  01:4CBE  9F                  	sbc a,a
     294.  01:4CBF  57                  	ld	d,a
     295.  01:4CC0  D9                  	exx
     296.  01:4CC1                      
     297.  01:4CC1  28 0E               	jr	z,.pos				
     298.  01:4CC3                      .neg
     299.  01:4CC3  11 20 01            	ld	de,256+32
     300.  01:4CC6  0E 41               	ld	c,1+64		; enemies going left
     301.  01:4CC8  3E 04               	ld	a,4
     302.  01:4CCA  80                  	add	a,b
     303.  01:4CCB  47                  	ld	b,a
     304.  01:4CCC  D9                  	exx	
     305.  01:4CCD  1B                  	dec 	de				; enemy speed = player speed -1
     306.  01:4CCE  D9                  	exx
     307.  01:4CCF  18 08               	jr	1f
     308.  01:4CD1                      .pos
     309.  01:4CD1  11 C0 FF            	ld	de,-64
     310.  01:4CD4  0E 01               	ld	c,+1		; enemies going right
     311.  01:4CD6  D9                  	exx	
     312.  01:4CD7  13                  	inc 	de			; enemy speed = player speed +1
     313.  01:4CD8  D9                  	exx
     314.  01:4CD9                      	
     315.  01:4CD9                      1:
     316.  01:4CD9  2A EE ED            	ld	hl,(xmap)
     317.  01:4CDC  19                  	add	hl,de
     318.  01:4CDD                      
     319.  01:4CDD  DD 21 15 EE         	ld  ix,enemies
     320.  01:4CE1  3E 40               	ld	a,64
     321.  01:4CE3  D9                  	exx	
     322.  01:4CE4  81                  	add	a,c			; random offset
     323.  01:4CE5  D9                  	exx	
     324.  01:4CE6                      
     325.  01:4CE6  FD 26 08            	ld	iyh,max_enem
     326.  01:4CE9  11 0E 00            	ld  de,enemy_data
     327.  01:4CEC                      
     328.  01:4CEC                      1:
     329.  01:4CEC  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     330.  01:4CF0  20 35               	jr  nz,.next
     331.  01:4CF2                      
     332.  01:4CF2  DD 71 07            	ld  (ix+enemy_data.status),c
     333.  01:4CF5  DD 70 0A            	ld	(ix+enemy_data.frame),b
     334.  01:4CF8                      
     335.  01:4CF8  DD 36 09 02         	ld  (ix+enemy_data.kind),2
     336.  01:4CFC                      
     337.  01:4CFC  D9                  	exx	
     338.  01:4CFD  FD 45               	ld	b,iyl
     339.  01:4CFF  DD 70 0B            	ld	(ix+enemy_data.color),b
     340.  01:4D02  DD 73 0C            	ld	(ix+enemy_data.speed),e
     341.  01:4D05  DD 72 0D            	ld	(ix+enemy_data.speed+1),d
     342.  01:4D08  D9                  	exx
     343.  01:4D09                      	
     344.  01:4D09  C5                  	push	bc
     345.  01:4D0A  01 10 00            	ld bc,16
     346.  01:4D0D  09                  	add hl,bc 
     347.  01:4D0E  DD 75 01            	ld  (ix+enemy_data.x),l
     348.  01:4D11  DD 74 02            	ld  (ix+enemy_data.x+1),h
     349.  01:4D14  C1                  	pop		bc
     350.  01:4D15                      	
     351.  01:4D15  DD 77 00            	ld  (ix+enemy_data.y),a
     352.  01:4D18  C6 20               	add	a,32
     353.  01:4D1A                      
     354.  01:4D1A  CD 00 64            	call	set_size
     355.  01:4D1D                      
     356.  01:4D1D  DD 19               	add ix,de
     357.  01:4D1F  FD 25               	dec	iyh
     358.  01:4D21  C8                  	ret	z
     359.  01:4D22  FE AF               	cp	191-16
     360.  01:4D24  38 C6               	jr	c,1b
     361.  01:4D26  C9                  	ret
     362.  01:4D27                      
     363.  01:4D27                      .next
     364.  01:4D27  DD 19               	add ix,de
     365.  01:4D29  FD 25               	dec	iyh
     366.  01:4D2B  C8                  	ret	z
     367.  01:4D2C  18 BE               	jr	1b
     368.  01:4D2E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     369.  01:4D2E                      wave3:
     370.  01:4D2E  CD 22 4A            	call	rand8
     371.  01:4D31  E6 0F               	and	15
     372.  01:4D33  C6 07               	add	a,7
     373.  01:4D35  4F                  	ld 	c,a		; Y off set
     374.  01:4D36                      		
     375.  01:4D36  3A ED ED            	ld	a,(dxmap)
     376.  01:4D39  F6 02               	or	2
     377.  01:4D3B  CB 2F CB 2F         [2] sra a			; de' = player speed 
     378.  01:4D3F  5F                  	ld	e,a
     379.  01:4D40  17                  	rla
     380.  01:4D41  9F                  	sbc a,a
     381.  01:4D42  57                  	ld	d,a
     382.  01:4D43  D9                  	exx
     383.  01:4D44                      
     384.  01:4D44  28 0B               	jr	z,.pos				
     385.  01:4D46                      .neg
     386.  01:4D46  11 20 01            	ld	de,256+32
     387.  01:4D49  01 41 64            	ld	bc,256*100+1+64		; enemies going left
     388.  01:4D4C  D9                  	exx	
     389.  01:4D4D  1B                  	dec 	de				; enemy speed = player speed -1
     390.  01:4D4E  D9                  	exx
     391.  01:4D4F  18 09               	jr	1f
     392.  01:4D51                      .pos
     393.  01:4D51  11 C0 FF            	ld	de,-64
     394.  01:4D54  01 01 60            	ld	bc,256*96+1		; enemies going right
     395.  01:4D57  D9                  	exx	
     396.  01:4D58  13                  	inc 	de			; enemy speed = player speed +1
     397.  01:4D59  D9                  	exx
     398.  01:4D5A                      	
     399.  01:4D5A                      1:
     400.  01:4D5A  2A EE ED            	ld	hl,(xmap)
     401.  01:4D5D  19                  	add	hl,de
     402.  01:4D5E                      
     403.  01:4D5E  DD 21 15 EE         	ld  ix,enemies
     404.  01:4D62  3E 40               	ld	a,64
     405.  01:4D64  D9                  	exx	
     406.  01:4D65  81                  	add	a,c			; random Y offset
     407.  01:4D66  D9                  	exx	
     408.  01:4D67                      
     409.  01:4D67  FD 26 08            	ld	iyh,max_enem
     410.  01:4D6A  11 0E 00            	ld  de,enemy_data
     411.  01:4D6D                      
     412.  01:4D6D                      1:
     413.  01:4D6D  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     414.  01:4D71  20 3B               	jr  nz,.next
     415.  01:4D73                      
     416.  01:4D73  DD 71 07            	ld  (ix+enemy_data.status),c
     417.  01:4D76  DD 70 0A            	ld	(ix+enemy_data.frame),b
     418.  01:4D79                      
     419.  01:4D79  DD 36 09 05         	ld  (ix+enemy_data.kind),5
     420.  01:4D7D  DD 36 0B 0A         	ld	(ix+enemy_data.color),10
     421.  01:4D81                      
     422.  01:4D81  D9                  	exx	
     423.  01:4D82  DD 73 0C            	ld	(ix+enemy_data.speed),e
     424.  01:4D85  DD 72 0D            	ld	(ix+enemy_data.speed+1),d
     425.  01:4D88  D9                  	exx
     426.  01:4D89                      	
     427.  01:4D89  C5                  	push	bc
     428.  01:4D8A  CB 67               	bit	4,a
     429.  01:4D8C  01 10 00            	ld bc,16
     430.  01:4D8F  28 03               	jr	z,2f
     431.  01:4D91  01 F0 FF            	ld	bc,-16
     432.  01:4D94                      2:	
     433.  01:4D94  09                  	add hl,bc 
     434.  01:4D95  DD 75 01            	ld  (ix+enemy_data.x),l
     435.  01:4D98  DD 74 02            	ld  (ix+enemy_data.x+1),h
     436.  01:4D9B  C1                  	pop		bc
     437.  01:4D9C                      	
     438.  01:4D9C  DD 77 00            	ld  (ix+enemy_data.y),a
     439.  01:4D9F  C6 18               	add	a,24
     440.  01:4DA1                      
     441.  01:4DA1  CD 00 64            	call	set_size
     442.  01:4DA4                      
     443.  01:4DA4  DD 19               	add ix,de
     444.  01:4DA6  FD 25               	dec	iyh
     445.  01:4DA8  C8                  	ret	z
     446.  01:4DA9  FE AF               	cp	191-16
     447.  01:4DAB  38 C0               	jr	c,1b
     448.  01:4DAD  C9                  	ret
     449.  01:4DAE                      
     450.  01:4DAE                      .next
     451.  01:4DAE  DD 19               	add ix,de
     452.  01:4DB0  FD 25               	dec	iyh
     453.  01:4DB2  C8                  	ret	z
     454.  01:4DB3  18 B8               	jr	1b
     455.  01:4DB5                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     456.  01:4DB5                      
     457.  01:4DB5                      ;	enemies coming from back
     458.  01:4DB5                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     459.  01:4DB5                      wave4:
     460.  01:4DB5  CD 22 4A            	call	rand8
     461.  01:4DB8  E6 0F               	and	15
     462.  01:4DBA  4F                  	ld 	c,a		; Y off set
     463.  01:4DBB  D9                  	exx
     464.  01:4DBC                      
     465.  01:4DBC  CD 22 4A            	call	rand8
     466.  01:4DBF  E6 07               	and	7
     467.  01:4DC1  6F                  	ld	l,a
     468.  01:4DC2  26 4C               	ld	h, high spritecolors
     469.  01:4DC4  7E                  	ld	a,(hl)	
     470.  01:4DC5  FD 6F               	ld	iyl,a		; color
     471.  01:4DC7                      	
     472.  01:4DC7  7D                  	ld	a,l
     473.  01:4DC8  87                  	add	a,a
     474.  01:4DC9  87                  	add	a,a
     475.  01:4DCA  87                  	add	a,a
     476.  01:4DCB  87                  	add	a,a
     477.  01:4DCC                      
     478.  01:4DCC  C6 40               	add	a,64
     479.  01:4DCE  47                  	ld	b,a			; frame
     480.  01:4DCF                      	
     481.  01:4DCF  D9                  	exx
     482.  01:4DD0  3A ED ED            	ld	a,(dxmap)
     483.  01:4DD3  F6 02               	or	2
     484.  01:4DD5  CB 2F CB 2F         [2] sra a			; de' = player speed 
     485.  01:4DD9  5F                  	ld	e,a
     486.  01:4DDA  17                  	rla
     487.  01:4DDB  9F                  	sbc a,a
     488.  01:4DDC  57                  	ld	d,a
     489.  01:4DDD  D9                  	exx
     490.  01:4DDE                      
     491.  01:4DDE  28 0E               	jr	z,.pos				
     492.  01:4DE0                      .neg
     493.  01:4DE0  11 20 01            	ld	de,256+32
     494.  01:4DE3  0E 41               	ld	c,+1+64		; enemies going left
     495.  01:4DE5  3E 04               	ld	a,4
     496.  01:4DE7  80                  	add	a,b
     497.  01:4DE8  47                  	ld	b,a
     498.  01:4DE9  D9                  	exx	
     499.  01:4DEA  1B                  	dec 	de				; enemy speed = player speed -1
     500.  01:4DEB  D9                  	exx
     501.  01:4DEC  18 08               	jr	1f
     502.  01:4DEE                      .pos
     503.  01:4DEE  11 C0 FF            	ld	de,-64
     504.  01:4DF1  0E 01               	ld	c,+1		; enemies going right
     505.  01:4DF3  D9                  	exx	
     506.  01:4DF4  13                  	inc 	de				; enemy speed = player speed +1
     507.  01:4DF5  D9                  	exx
     508.  01:4DF6                      	
     509.  01:4DF6                      1:
     510.  01:4DF6  2A EE ED            	ld	hl,(xmap)
     511.  01:4DF9  19                  	add	hl,de
     512.  01:4DFA                      
     513.  01:4DFA  DD 21 15 EE         	ld  ix,enemies
     514.  01:4DFE  3E 40               	ld	a,64
     515.  01:4E00  D9                  	exx	
     516.  01:4E01  81                  	add	a,c			; random offset
     517.  01:4E02  D9                  	exx	
     518.  01:4E03                      
     519.  01:4E03  FD 26 08            	ld	iyh,max_enem
     520.  01:4E06  11 0E 00            	ld  de,enemy_data
     521.  01:4E09                      
     522.  01:4E09                      1:
     523.  01:4E09  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     524.  01:4E0D  20 35               	jr  nz,.next
     525.  01:4E0F                      
     526.  01:4E0F  DD 71 07            	ld  (ix+enemy_data.status),c
     527.  01:4E12  DD 70 0A            	ld	(ix+enemy_data.frame),b
     528.  01:4E15                      
     529.  01:4E15  DD 36 09 04         	ld  (ix+enemy_data.kind),4
     530.  01:4E19                      
     531.  01:4E19  D9                  	exx	
     532.  01:4E1A  FD 45               	ld	b,iyl
     533.  01:4E1C  DD 70 0B            	ld	(ix+enemy_data.color),b
     534.  01:4E1F  DD 73 0C            	ld	(ix+enemy_data.speed),e
     535.  01:4E22  DD 72 0D            	ld	(ix+enemy_data.speed+1),d
     536.  01:4E25  D9                  	exx
     537.  01:4E26                      	
     538.  01:4E26  C5                  	push	bc
     539.  01:4E27  01 10 00            	ld bc,16
     540.  01:4E2A  09                  	add hl,bc 
     541.  01:4E2B  DD 75 01            	ld  (ix+enemy_data.x),l
     542.  01:4E2E  DD 74 02            	ld  (ix+enemy_data.x+1),h
     543.  01:4E31  C1                  	pop		bc
     544.  01:4E32                      	
     545.  01:4E32  DD 77 00            	ld  (ix+enemy_data.y),a
     546.  01:4E35  C6 20               	add	a,32
     547.  01:4E37                      
     548.  01:4E37  CD 00 64            	call	set_size
     549.  01:4E3A                      
     550.  01:4E3A  DD 19               	add ix,de
     551.  01:4E3C  FD 25               	dec	iyh
     552.  01:4E3E  C8                  	ret	z
     553.  01:4E3F  FE AF               	cp	191-16
     554.  01:4E41  38 C6               	jr	c,1b
     555.  01:4E43  C9                  	ret
     556.  01:4E44                      
     557.  01:4E44                      .next
     558.  01:4E44  DD 19               	add ix,de
     559.  01:4E46  FD 25               	dec	iyh
     560.  01:4E48  C8                  	ret	z
     561.  01:4E49  18 BE               	jr	1b
     562.  01:4E4B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     563.  01:4E4B                      ; spinning enemy color 11
     564.  01:4E4B                      wave5:
     565.  01:4E4B  CD 22 4A            	call	rand8
     566.  01:4E4E  E6 0F               	and	15
     567.  01:4E50  4F                  	ld 	c,a		; Y off set
     568.  01:4E51                      	
     569.  01:4E51  3A ED ED            	ld	a,(dxmap)
     570.  01:4E54  F6 02               	or	2
     571.  01:4E56  CB 2F CB 2F         [2] sra a			; de' = player speed 
     572.  01:4E5A  5F                  	ld	e,a
     573.  01:4E5B  17                  	rla
     574.  01:4E5C  9F                  	sbc a,a
     575.  01:4E5D  57                  	ld	d,a
     576.  01:4E5E  D9                  	exx
     577.  01:4E5F                      
     578.  01:4E5F  28 0A               	jr	z,.pos				
     579.  01:4E61                      .neg
     580.  01:4E61  11 20 01            	ld	de,256+32
     581.  01:4E64  0E 41               	ld	c,+1+64		; enemies going left
     582.  01:4E66  D9                  	exx	
     583.  01:4E67  1B                  	dec 	de				; enemy speed = player speed -1
     584.  01:4E68  D9                  	exx
     585.  01:4E69  18 08               	jr	1f
     586.  01:4E6B                      .pos
     587.  01:4E6B  11 C0 FF            	ld	de,-64
     588.  01:4E6E  0E 01               	ld	c,+1		; enemies going right
     589.  01:4E70  D9                  	exx	
     590.  01:4E71  13                  	inc 	de				; enemy speed = player speed +1
     591.  01:4E72  D9                  	exx
     592.  01:4E73                      	
     593.  01:4E73                      1:
     594.  01:4E73  2A EE ED            	ld	hl,(xmap)
     595.  01:4E76  19                  	add	hl,de
     596.  01:4E77                      
     597.  01:4E77  DD 21 15 EE         	ld  ix,enemies
     598.  01:4E7B  3E 40               	ld	a,64
     599.  01:4E7D  D9                  	exx	
     600.  01:4E7E  81                  	add	a,c			; random offset
     601.  01:4E7F  D9                  	exx	
     602.  01:4E80                      
     603.  01:4E80  FD 26 08            	ld	iyh,max_enem
     604.  01:4E83  11 0E 00            	ld  de,enemy_data
     605.  01:4E86                      
     606.  01:4E86                      1:
     607.  01:4E86  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     608.  01:4E8A  20 31               	jr  nz,.next
     609.  01:4E8C                      
     610.  01:4E8C  DD 71 07            	ld  (ix+enemy_data.status),c
     611.  01:4E8F                      	; ld	(ix+enemy_data.frame),b
     612.  01:4E8F                      	
     613.  01:4E8F  DD 36 09 06         	ld  (ix+enemy_data.kind),6
     614.  01:4E93                      
     615.  01:4E93  D9                  	exx	
     616.  01:4E94  DD 36 0B 0B         	ld	(ix+enemy_data.color),11
     617.  01:4E98  DD 73 0C            	ld	(ix+enemy_data.speed),e
     618.  01:4E9B  DD 72 0D            	ld	(ix+enemy_data.speed+1),d
     619.  01:4E9E  D9                  	exx
     620.  01:4E9F                      	
     621.  01:4E9F  C5                  	push	bc
     622.  01:4EA0  01 10 00            	ld bc,16
     623.  01:4EA3  09                  	add hl,bc 
     624.  01:4EA4  DD 75 01            	ld  (ix+enemy_data.x),l
     625.  01:4EA7  DD 74 02            	ld  (ix+enemy_data.x+1),h
     626.  01:4EAA  C1                  	pop		bc
     627.  01:4EAB                      	
     628.  01:4EAB  DD 77 00            	ld  (ix+enemy_data.y),a
     629.  01:4EAE  C6 20               	add	a,32
     630.  01:4EB0                      
     631.  01:4EB0  CD 00 64            	call	set_size
     632.  01:4EB3                      
     633.  01:4EB3  DD 19               	add ix,de
     634.  01:4EB5  FD 25               	dec	iyh
     635.  01:4EB7  C8                  	ret	z
     636.  01:4EB8  FE AF               	cp	191-16
     637.  01:4EBA  38 CA               	jr	c,1b
     638.  01:4EBC  C9                  	ret
     639.  01:4EBD                      
     640.  01:4EBD                      .next
     641.  01:4EBD  DD 19               	add ix,de
     642.  01:4EBF  FD 25               	dec	iyh
     643.  01:4EC1  C8                  	ret	z
     644.  01:4EC2  18 C2               	jr	1b
     645.  01:4EC4                      
     646.  01:4EC4                      
     647.  01:4EC4                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     648.  01:4EC4                      ;	enemies coming from back double speed
     649.  01:4EC4                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     650.  01:4EC4                      wave6:
     651.  01:4EC4  CD 22 4A            	call	rand8
     652.  01:4EC7  E6 0F               	and	15
     653.  01:4EC9  4F                  	ld 	c,a		; Y off set
     654.  01:4ECA  D9                  	exx
     655.  01:4ECB                      
     656.  01:4ECB  CD 22 4A            	call	rand8
     657.  01:4ECE  E6 07               	and	7
     658.  01:4ED0  6F                  	ld	l,a
     659.  01:4ED1  26 4C               	ld	h, high spritecolors
     660.  01:4ED3  7E                  	ld	a,(hl)	
     661.  01:4ED4  FD 6F               	ld	iyl,a		; color
     662.  01:4ED6                      	
     663.  01:4ED6  7D                  	ld	a,l
     664.  01:4ED7  87                  	add	a,a
     665.  01:4ED8  87                  	add	a,a
     666.  01:4ED9  87                  	add	a,a
     667.  01:4EDA  87                  	add	a,a
     668.  01:4EDB                      	
     669.  01:4EDB  C6 40               	add	a,64
     670.  01:4EDD  47                  	ld	b,a			; frame
     671.  01:4EDE  D9                  	exx
     672.  01:4EDF                      	
     673.  01:4EDF  3A ED ED            	ld	a,(dxmap)
     674.  01:4EE2  F6 02               	or	2
     675.  01:4EE4  CB 2F CB 2F         [2] sra a			; de' = player speed 
     676.  01:4EE8  5F                  	ld	e,a
     677.  01:4EE9  17                  	rla
     678.  01:4EEA  9F                  	sbc a,a
     679.  01:4EEB  57                  	ld	d,a
     680.  01:4EEC  D9                  	exx
     681.  01:4EED                      
     682.  01:4EED  28 0F               	jr	z,.pos				
     683.  01:4EEF                      .neg
     684.  01:4EEF  11 20 01            	ld	de,256+32
     685.  01:4EF2  0E 41               	ld	c,+1+64		; enemies going left
     686.  01:4EF4  3E 04               	ld	a,4
     687.  01:4EF6  80                  	add	a,b
     688.  01:4EF7  47                  	ld	b,a
     689.  01:4EF8  D9                  	exx	
     690.  01:4EF9  1B                  	dec 	de				; enemy speed = player speed -2
     691.  01:4EFA  1B                  	dec 	de				
     692.  01:4EFB  D9                  	exx
     693.  01:4EFC  18 09               	jr	1f
     694.  01:4EFE                      .pos
     695.  01:4EFE  11 C0 FF            	ld	de,-64
     696.  01:4F01  0E 01               	ld	c,+1		; enemies going right
     697.  01:4F03  D9                  	exx	
     698.  01:4F04  13                  	inc 	de				; enemy speed = player speed +2
     699.  01:4F05  13                  	inc 	de				
     700.  01:4F06  D9                  	exx
     701.  01:4F07                      	
     702.  01:4F07                      1:
     703.  01:4F07  2A EE ED            	ld	hl,(xmap)
     704.  01:4F0A  19                  	add	hl,de
     705.  01:4F0B                      
     706.  01:4F0B  DD 21 15 EE         	ld  ix,enemies
     707.  01:4F0F  3E 40               	ld	a,64
     708.  01:4F11  D9                  	exx	
     709.  01:4F12  81                  	add	a,c			; random offset
     710.  01:4F13  CB 41               	bit	0,c
     711.  01:4F15  D9                  	exx	
     712.  01:4F16  28 04               	jr	z,1f		; randomize initial Y direction
     713.  01:4F18  CB F9               	set	7,c
     714.  01:4F1A  18 02               	jr	2f
     715.  01:4F1C  CB B9               1:	res	7,c
     716.  01:4F1E                      2:
     717.  01:4F1E  FD 26 08            	ld	iyh,max_enem
     718.  01:4F21  11 0E 00            	ld  de,enemy_data
     719.  01:4F24                      
     720.  01:4F24                      1:
     721.  01:4F24  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     722.  01:4F28  20 35               	jr  nz,.next
     723.  01:4F2A                      
     724.  01:4F2A  DD 71 07            	ld  (ix+enemy_data.status),c
     725.  01:4F2D  DD 70 0A            	ld	(ix+enemy_data.frame),b
     726.  01:4F30                      
     727.  01:4F30  DD 36 09 04         	ld  (ix+enemy_data.kind),4
     728.  01:4F34                      
     729.  01:4F34  D9                  	exx	
     730.  01:4F35  FD 45               	ld	b,iyl
     731.  01:4F37  DD 70 0B            	ld	(ix+enemy_data.color),b
     732.  01:4F3A  DD 73 0C            	ld	(ix+enemy_data.speed),e
     733.  01:4F3D  DD 72 0D            	ld	(ix+enemy_data.speed+1),d
     734.  01:4F40  D9                  	exx
     735.  01:4F41                      	
     736.  01:4F41  C5                  	push	bc
     737.  01:4F42  01 10 00            	ld bc,16
     738.  01:4F45  09                  	add hl,bc 
     739.  01:4F46  DD 75 01            	ld  (ix+enemy_data.x),l
     740.  01:4F49  DD 74 02            	ld  (ix+enemy_data.x+1),h
     741.  01:4F4C  C1                  	pop		bc
     742.  01:4F4D                      	
     743.  01:4F4D  DD 77 00            	ld  (ix+enemy_data.y),a
     744.  01:4F50  C6 20               	add	a,32
     745.  01:4F52                      
     746.  01:4F52  CD 00 64            	call	set_size
     747.  01:4F55                      
     748.  01:4F55  DD 19               	add ix,de
     749.  01:4F57  FD 25               	dec	iyh
     750.  01:4F59  C8                  	ret	z
     751.  01:4F5A  FE AF               	cp	191-16
     752.  01:4F5C  38 C6               	jr	c,1b
     753.  01:4F5E  C9                  	ret
     754.  01:4F5F                      
     755.  01:4F5F                      .next
     756.  01:4F5F  DD 19               	add ix,de
     757.  01:4F61  FD 25               	dec	iyh
     758.  01:4F63  C8                  	ret	z
     759.  01:4F64  18 BE               	jr	1b
     760.  01:4F66                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     761.  01:4F66                      ;spinning enemy color 7
     762.  01:4F66                      wave7:
     763.  01:4F66  CD 22 4A            	call	rand8
     764.  01:4F69  E6 0F               	and	15
     765.  01:4F6B  4F                  	ld 	c,a		; Y off set
     766.  01:4F6C  3A ED ED            	ld	a,(dxmap)
     767.  01:4F6F  F6 02               	or	2
     768.  01:4F71  CB 2F CB 2F         [2] sra a			; de' = player speed 
     769.  01:4F75  5F                  	ld	e,a
     770.  01:4F76  17                  	rla
     771.  01:4F77  9F                  	sbc a,a
     772.  01:4F78  57                  	ld	d,a
     773.  01:4F79  D9                  	exx
     774.  01:4F7A                      
     775.  01:4F7A  28 0A               	jr	z,.pos				
     776.  01:4F7C                      .neg
     777.  01:4F7C  11 20 01            	ld	de,256+32
     778.  01:4F7F  0E 41               	ld	c,1+64				; enemies going left
     779.  01:4F81  D9                  	exx	
     780.  01:4F82  1B                  	dec 	de				; enemy speed = player speed -1
     781.  01:4F83  D9                  	exx
     782.  01:4F84  18 08               	jr	1f
     783.  01:4F86                      .pos
     784.  01:4F86  11 C0 FF            	ld	de,-64
     785.  01:4F89  0E 01               	ld	c,+1		; enemies going right
     786.  01:4F8B  D9                  	exx	
     787.  01:4F8C  13                  	inc 	de				; enemy speed = player speed +1
     788.  01:4F8D  D9                  	exx
     789.  01:4F8E                      	
     790.  01:4F8E                      1:
     791.  01:4F8E  2A EE ED            	ld	hl,(xmap)
     792.  01:4F91  19                  	add	hl,de
     793.  01:4F92                      
     794.  01:4F92  DD 21 15 EE         	ld  ix,enemies
     795.  01:4F96  3E 40               	ld	a,64
     796.  01:4F98  D9                  	exx	
     797.  01:4F99  81                  	add	a,c			; random offset
     798.  01:4F9A  D9                  	exx	
     799.  01:4F9B                      
     800.  01:4F9B  FD 26 08            	ld	iyh,max_enem
     801.  01:4F9E  11 0E 00            	ld  de,enemy_data
     802.  01:4FA1                      
     803.  01:4FA1                      1:
     804.  01:4FA1  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     805.  01:4FA5  20 31               	jr  nz,.next
     806.  01:4FA7                      
     807.  01:4FA7  DD 71 07            	ld  (ix+enemy_data.status),c
     808.  01:4FAA                      	; ld	(ix+enemy_data.frame),b	; dummy
     809.  01:4FAA                      
     810.  01:4FAA  DD 36 09 07         	ld  (ix+enemy_data.kind),7
     811.  01:4FAE                      
     812.  01:4FAE  D9                  	exx	
     813.  01:4FAF  DD 36 0B 07         	ld	(ix+enemy_data.color),7
     814.  01:4FB3  DD 73 0C            	ld	(ix+enemy_data.speed),e
     815.  01:4FB6  DD 72 0D            	ld	(ix+enemy_data.speed+1),d
     816.  01:4FB9  D9                  	exx
     817.  01:4FBA                      	
     818.  01:4FBA  C5                  	push	bc
     819.  01:4FBB  01 10 00            	ld bc,16
     820.  01:4FBE  09                  	add hl,bc 
     821.  01:4FBF  DD 75 01            	ld  (ix+enemy_data.x),l
     822.  01:4FC2  DD 74 02            	ld  (ix+enemy_data.x+1),h
     823.  01:4FC5  C1                  	pop		bc
     824.  01:4FC6                      	
     825.  01:4FC6  DD 77 00            	ld  (ix+enemy_data.y),a
     826.  01:4FC9  C6 20               	add	a,32
     827.  01:4FCB                      
     828.  01:4FCB  CD 00 64            	call	set_size
     829.  01:4FCE                      
     830.  01:4FCE  DD 19               	add ix,de
     831.  01:4FD0  FD 25               	dec	iyh
     832.  01:4FD2  C8                  	ret	z
     833.  01:4FD3  FE AF               	cp	191-16
     834.  01:4FD5  38 CA               	jr	c,1b
     835.  01:4FD7  C9                  	ret
     836.  01:4FD8                      
     837.  01:4FD8                      .next
     838.  01:4FD8  DD 19               	add ix,de
     839.  01:4FDA  FD 25               	dec	iyh
     840.  01:4FDC  C8                  	ret	z
     841.  01:4FDD  18 C2               	jr	1b
     842.  01:4FDF                      
     843.  01:4FDF                      	
     844.  01:4FDF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     845.  01:4FDF                      ;
     846.  01:4FDF                      ;   logic for enemies -  fake for testing
     847.  01:4FDF                      ;
     848.  01:4FDF                      
     849.  01:4FDF                      npc_loop:
     850.  01:4FDF  DD 21 15 EE         	ld  ix,enemies
     851.  01:4FE3  06 08               	ld  b,max_enem
     852.  01:4FE5                      
     853.  01:4FE5  C5                  1:	push	bc
     854.  01:4FE6  DD 7E 07            	ld  a,(ix+enemy_data.status)
     855.  01:4FE9  E6 01               	and 1
     856.  01:4FEB  28 22               	jr  z,next
     857.  01:4FED                      
     858.  01:4FED  DD 7E 09            	ld	a,(ix+enemy_data.kind)
     859.  01:4FF0  A7                  	and	a
     860.  01:4FF1  CA 63 50            	jp	z,enemy0
     861.  01:4FF4  3D                  	dec a	;cp	1
     862.  01:4FF5                      	; jp	z,enemy1
     863.  01:4FF5  3D                  	dec a	;cp	2
     864.  01:4FF6  CA BE 50            	jp 	z,enemy2
     865.  01:4FF9  3D                  	dec a	;cp	3
     866.  01:4FFA                      	; jp 	z,enemy3
     867.  01:4FFA  3D                  	dec a	;cp	4
     868.  01:4FFB  CA 12 51            	jp 	z,enemy4
     869.  01:4FFE  3D                  	dec a	;cp	5
     870.  01:4FFF  CA 40 53            	jp 	z,enemy5
     871.  01:5002  3D                  	dec a	;cp	6
     872.  01:5003  CA A6 53            	jp 	z,enemy6
     873.  01:5006  3D                  	dec a	;cp	7
     874.  01:5007  CA 2D 54            	jp 	z,enemy7
     875.  01:500A                      
     876.  01:500A  FE F8               	cp	255-7
     877.  01:500C  CA 3F 50            	jp z,enemy255
     878.  01:500F                      
     879.  01:500F                      next:
     880.  01:500F  C1                  	pop	bc
     881.  01:5010  11 0E 00            	ld  de,enemy_data
     882.  01:5013  DD 19               	add ix,de
     883.  01:5015  10 CE               	djnz    1b
     884.  01:5017  C9                  	ret
     885.  01:5018                      ;;;;;;;;;;;;;;;;;;;;
     886.  01:5018                      npcdies:
     887.  01:5018  FD 36 07 00         	ld  (iy+enemy_data.status),0	; turn off this bullet
     888.  01:501C                      
     889.  01:501C  DD 36 0B 0A         	ld	(ix+enemy_data.color),10	; start explosion
     890.  01:5020  DD 36 09 FF         	ld	(ix+enemy_data.kind),255
     891.  01:5024  DD 36 08 02         	ld	(ix+enemy_data.cntr),2
     892.  01:5028  DD 36 0A 0C         	ld	(ix+enemy_data.frame),12
     893.  01:502C                      
     894.  01:502C  CD 22 4A            	call	rand8
     895.  01:502F  E6 03               	and	3
     896.  01:5031  C6 02               	add	a,2			; random enemy explosion
     897.  01:5033  CD BE 05            	call AFXPLAY
     898.  01:5036                      
     899.  01:5036  01 64 00            	ld	bc,100		; score for destruction of a flying enemy
     900.  01:5039  CD 5D 65            	call	add_bc_score_bin
     901.  01:503C  C3 0F 50            	jp	next
     902.  01:503F                      	
     903.  01:503F                      ;;;;;;;;;;;;;;;;;;;;
     904.  01:503F                      ; explosion
     905.  01:503F                      ;;;;;;;;;;;;;;;;;;;;
     906.  01:503F                      enemy255:
     907.  01:503F  DD 35 08            	dec	(ix+enemy_data.cntr)
     908.  01:5042  C2 0F 50            	jp	nz,next
     909.  01:5045  DD 36 08 02         	ld	(ix+enemy_data.cntr),2
     910.  01:5049  DD 34 0A            	inc	(ix+enemy_data.frame)
     911.  01:504C  DD 7E 0A            	ld	a,(ix+enemy_data.frame)
     912.  01:504F  FE 10               	cp	16
     913.  01:5051  38 BC               	jr	c,next
     914.  01:5053  DD 36 0B 08         	ld	(ix+enemy_data.color),8		; start explosion
     915.  01:5057  FE 1F               	cp	23+8
     916.  01:5059  C2 0F 50            	jp	nz,next
     917.  01:505C  DD 36 07 00         	ld	(ix+enemy_data.status),0
     918.  01:5060  C3 0F 50            	jp	next
     919.  01:5063                      
     920.  01:5063                      ;;;;;;;;;;;;;;;;;;;;
     921.  01:5063                      
     922.  01:5063                      enemy0:
     923.  01:5063                      enemy1:
     924.  01:5063  DD CB 07 76         	bit 6,(ix+enemy_data.status)
     925.  01:5067  28 23               	jr  z,.go_right
     926.  01:5069                      .go_left:
     927.  01:5069                      
     928.  01:5069  DD 6E 01            	ld	l,(ix+enemy_data.x)
     929.  01:506C  DD 66 02            	ld	h,(ix+enemy_data.x+1)
     930.  01:506F  2B                  	dec	hl
     931.  01:5070  DD 75 01            	ld  (ix+enemy_data.x),l
     932.  01:5073  DD 74 02            	ld  (ix+enemy_data.x+1),h
     933.  01:5076  ED 5B EE ED         	ld	de,(xmap)
     934.  01:507A  A7                  	and	a
     935.  01:507B  ED 52               	sbc	hl,de
     936.  01:507D  11 E0 FF            	ld	de,-32
     937.  01:5080  A7                  	and	a
     938.  01:5081  ED 52               	sbc	hl,de
     939.  01:5083  F2 AD 50            	jp  p,1f
     940.  01:5086  DD 36 07 00         	ld	(ix+enemy_data.status),0
     941.  01:508A  18 21               	jr  1f
     942.  01:508C                      
     943.  01:508C                      .go_right:
     944.  01:508C                      
     945.  01:508C  DD 6E 01            	ld	l,(ix+enemy_data.x)
     946.  01:508F  DD 66 02            	ld	h,(ix+enemy_data.x+1)
     947.  01:5092  23                  	inc	hl
     948.  01:5093  DD 75 01            	ld  (ix+enemy_data.x),l
     949.  01:5096  DD 74 02            	ld  (ix+enemy_data.x+1),h
     950.  01:5099  ED 5B EE ED         	ld	de,(xmap)
     951.  01:509D  A7                  	and	a
     952.  01:509E  ED 52               	sbc	hl,de
     953.  01:50A0  11 20 01            	ld	de,256+32
     954.  01:50A3  A7                  	and	a
     955.  01:50A4  ED 52               	sbc	hl,de
     956.  01:50A6  FA AD 50            	jp  m,1f
     957.  01:50A9  DD 36 07 00         	ld	(ix+enemy_data.status),0
     958.  01:50AD                      1:
     959.  01:50AD                      
     960.  01:50AD  CD 22 4A            	call	rand8
     961.  01:50B0  E6 7F               	and 	127
     962.  01:50B2  CC B4 54            	call	z,book_enemy_shoot
     963.  01:50B5                      
     964.  01:50B5  CD 80 64            	call	test_collision_msbullets
     965.  01:50B8  D2 0F 50            	jp	nc,next
     966.  01:50BB  C3 18 50            	jp	npcdies
     967.  01:50BE                      
     968.  01:50BE                      ;;;;;;;;;;;;;;;;;;;;
     969.  01:50BE                      enemy2:
     970.  01:50BE                      enemy3:
     971.  01:50BE  DD 6E 01            	ld	l,(ix+enemy_data.x)
     972.  01:50C1  DD 66 02            	ld	h,(ix+enemy_data.x+1)
     973.  01:50C4  DD 5E 0C            	ld	e,(ix+enemy_data.speed)
     974.  01:50C7  DD 56 0D            	ld	d,(ix+enemy_data.speed+1)
     975.  01:50CA  19                  	add	hl,de
     976.  01:50CB  DD 75 01            	ld  (ix+enemy_data.x),l
     977.  01:50CE  DD 74 02            	ld  (ix+enemy_data.x+1),h
     978.  01:50D1                      	
     979.  01:50D1  DD CB 07 76         	bit 6,(ix+enemy_data.status)
     980.  01:50D5  28 16               	jr  z,.go_right
     981.  01:50D7                      .go_left:
     982.  01:50D7                      
     983.  01:50D7  ED 5B EE ED         	ld	de,(xmap)
     984.  01:50DB  A7                  	and	a
     985.  01:50DC  ED 52               	sbc	hl,de
     986.  01:50DE  11 E0 FF            	ld	de,-32
     987.  01:50E1  A7                  	and	a
     988.  01:50E2  ED 52               	sbc	hl,de
     989.  01:50E4  F2 01 51            	jp  p,1f
     990.  01:50E7  DD 36 07 00         	ld	(ix+enemy_data.status),0
     991.  01:50EB  18 14               	jr  1f
     992.  01:50ED                      
     993.  01:50ED                      .go_right:
     994.  01:50ED                      
     995.  01:50ED  ED 5B EE ED         	ld	de,(xmap)
     996.  01:50F1  A7                  	and	a
     997.  01:50F2  ED 52               	sbc	hl,de
     998.  01:50F4  11 20 01            	ld	de,256+32
     999.  01:50F7  A7                  	and	a
    1000.  01:50F8  ED 52               	sbc	hl,de
    1001.  01:50FA  FA 01 51            	jp  m,1f
    1002.  01:50FD  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1003.  01:5101                      1:
    1004.  01:5101                      
    1005.  01:5101  CD 22 4A            	call	rand8
    1006.  01:5104  E6 7F               	and 	127
    1007.  01:5106  CC B4 54            	call	z,book_enemy_shoot
    1008.  01:5109                      
    1009.  01:5109  CD 80 64            	call	test_collision_msbullets
    1010.  01:510C  D2 0F 50            	jp	nc,next
    1011.  01:510F  C3 18 50            	jp 	npcdies
    1012.  01:5112                      	
    1013.  01:5112                      	
    1014.  01:5112                      ;;;;;;;;;;;;;;;;;;;;
    1015.  01:5112                      enemy4:
    1016.  01:5112  DD 6E 01            	ld	l,(ix+enemy_data.x)
    1017.  01:5115  DD 66 02            	ld	h,(ix+enemy_data.x+1)
    1018.  01:5118  DD 5E 0C            	ld	e,(ix+enemy_data.speed)
    1019.  01:511B  DD 56 0D            	ld	d,(ix+enemy_data.speed+1)
    1020.  01:511E  19                  	add	hl,de
    1021.  01:511F  DD 75 01            	ld  (ix+enemy_data.x),l
    1022.  01:5122  DD 74 02            	ld  (ix+enemy_data.x+1),h
    1023.  01:5125                      	
    1024.  01:5125  DD CB 07 76         	bit 6,(ix+enemy_data.status)
    1025.  01:5129  28 16               	jr  z,.go_right
    1026.  01:512B                      .go_left:
    1027.  01:512B                      
    1028.  01:512B  ED 5B EE ED         	ld	de,(xmap)
    1029.  01:512F  A7                  	and	a
    1030.  01:5130  ED 52               	sbc	hl,de
    1031.  01:5132  11 E0 FF            	ld	de,-32
    1032.  01:5135  A7                  	and	a
    1033.  01:5136  ED 52               	sbc	hl,de
    1034.  01:5138  F2 55 51            	jp  p,1f
    1035.  01:513B  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1036.  01:513F  18 14               	jr  1f
    1037.  01:5141                      
    1038.  01:5141                      .go_right:
    1039.  01:5141                      
    1040.  01:5141  ED 5B EE ED         	ld	de,(xmap)
    1041.  01:5145  A7                  	and	a
    1042.  01:5146  ED 52               	sbc	hl,de
    1043.  01:5148  11 20 01            	ld	de,256+32
    1044.  01:514B  A7                  	and	a
    1045.  01:514C  ED 52               	sbc	hl,de
    1046.  01:514E  FA 55 51            	jp  m,1f
    1047.  01:5151  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1048.  01:5155                      1:
    1049.  01:5155                      
    1050.  01:5155  DD 7E 00            	ld	a,(ix+enemy_data.y)
    1051.  01:5158                      
    1052.  01:5158  DD CB 07 7E         	bit 7,(ix+enemy_data.status)
    1053.  01:515C  28 0B               	jr  z,.go_dwn
    1054.  01:515E                      .go_up:
    1055.  01:515E  3D                  	dec	a
    1056.  01:515F  FE 40               	cp	64
    1057.  01:5161  20 0F               	jr	nz,1f
    1058.  01:5163  DD CB 07 BE         	res	7,(ix+enemy_data.status)
    1059.  01:5167  18 09               	jr	1f
    1060.  01:5169                      .go_dwn:
    1061.  01:5169  3C                  	inc	a
    1062.  01:516A  FE AF               	cp	191-16
    1063.  01:516C  20 04               	jr	nz,1f
    1064.  01:516E  DD CB 07 FE         	set	7,(ix+enemy_data.status)
    1065.  01:5172                      	; jr	1f
    1066.  01:5172                      1:
    1067.  01:5172  DD 77 00            	ld	(ix+enemy_data.y),a
    1068.  01:5175                      
    1069.  01:5175  CD 22 4A            	call	rand8
    1070.  01:5178  E6 7F               	and 	127
    1071.  01:517A  CC B4 54            	call	z,book_enemy_shoot
    1072.  01:517D                      
    1073.  01:517D  CD 80 64            	call	test_collision_msbullets
    1074.  01:5180  D2 0F 50            	jp	nc,next
    1075.  01:5183  C3 18 50            	jp 	npcdies
    1076.  01:5186                      	
    1077.  01:5186                      	
    1078.  01:5186                      ;;;;;;;;;;;;;;;;;;;;
    1079.  01:5186  (007A)              	align 0x100
    1080.  01:5200                      rotation:
    1081.  01:5200                      	db 0,16,32,48,48,32,16,0
    1081.  01:5200  00 10 20 30 30 20 10 00 
    1082.  01:5208                      ;;;;;;;;;;
    1083.  01:5208                      rotate:
    1084.  01:5208  DD 7E 08            	ld	a,(ix+enemy_data.cntr)
    1085.  01:520B  3C                  	inc a
    1086.  01:520C  DD 77 08            	ld	(ix+enemy_data.cntr),a
    1087.  01:520F  D9                  	exx
    1088.  01:5210  26 52               	ld h, high rotation
    1089.  01:5212  0F 0F               [2]	rrca
    1090.  01:5214  E6 07               	and 7
    1091.  01:5216  6F                  	ld	l,a
    1092.  01:5217  7E                  	ld a,(hl)
    1093.  01:5218  D9                  	exx
    1094.  01:5219  C9                  	ret
    1095.  01:521A                      	
    1096.  01:521A                      
    1097.  01:521A  (00E6)              	align 0x100
    1098.  01:5300                      sinewave:
    1099.  01:5300                      	db 2,1,2,1,2,1,1,1,1,1,1,1,0,1,0,0,0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-2,-1,-2,-1,-2,-2,-1,-2,-1,-2,-1,-1,-1,-1,-1,-1,-1,0,-1,0,0,0,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2
    1099.  01:5300  02 01 02 01 02 01 01 01 01 01 01 01 00 01 00 00 
    1099.  01:5310  00 00 FF 00 FF FF FF FF FF FF FF FE FF FE FF FE 
    1099.  01:5320  FE FF FE FF FE FF FF FF FF FF FF FF 00 FF 00 00 
    1099.  01:5330  00 00 01 00 01 01 01 01 01 01 01 02 01 02 01 02 
    1100.  01:5340                      
    1101.  01:5340                      	
    1102.  01:5340                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    1103.  01:5340                      enemy5:
    1104.  01:5340  DD 6E 01            	ld	l,(ix+enemy_data.x)
    1105.  01:5343  DD 66 02            	ld	h,(ix+enemy_data.x+1)
    1106.  01:5346  DD 5E 0C            	ld	e,(ix+enemy_data.speed)
    1107.  01:5349  DD 56 0D            	ld	d,(ix+enemy_data.speed+1)
    1108.  01:534C  19                  	add	hl,de
    1109.  01:534D  DD 75 01            	ld  (ix+enemy_data.x),l
    1110.  01:5350  DD 74 02            	ld  (ix+enemy_data.x+1),h
    1111.  01:5353                      	
    1112.  01:5353  DD CB 07 76         	bit 6,(ix+enemy_data.status)
    1113.  01:5357  28 16               	jr  z,.go_right
    1114.  01:5359                      .go_left:
    1115.  01:5359                      
    1116.  01:5359  ED 5B EE ED         	ld	de,(xmap)
    1117.  01:535D  A7                  	and	a
    1118.  01:535E  ED 52               	sbc	hl,de
    1119.  01:5360  11 E0 FF            	ld	de,-32
    1120.  01:5363  A7                  	and	a
    1121.  01:5364  ED 52               	sbc	hl,de
    1122.  01:5366  F2 83 53            	jp  p,1f
    1123.  01:5369  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1124.  01:536D  18 14               	jr  1f
    1125.  01:536F                      
    1126.  01:536F                      .go_right:
    1127.  01:536F                      
    1128.  01:536F  ED 5B EE ED         	ld	de,(xmap)
    1129.  01:5373  A7                  	and	a
    1130.  01:5374  ED 52               	sbc	hl,de
    1131.  01:5376  11 20 01            	ld	de,256+32
    1132.  01:5379  A7                  	and	a
    1133.  01:537A  ED 52               	sbc	hl,de
    1134.  01:537C  FA 83 53            	jp  m,1f
    1135.  01:537F  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1136.  01:5383                      1:
    1137.  01:5383                      
    1138.  01:5383  DD 7E 08            	ld	a,(ix+enemy_data.cntr)
    1139.  01:5386  3C                  	inc	a
    1140.  01:5387  DD 77 08            	ld	(ix+enemy_data.cntr),a
    1141.  01:538A  E6 3F               	and	63
    1142.  01:538C  6F                  	ld	l,a
    1143.  01:538D  26 53               	ld	h,high sinewave
    1144.  01:538F  7E                  	ld	a,(hl)
    1145.  01:5390  DD 86 00            	add	a,(ix+enemy_data.y)
    1146.  01:5393  DD 77 00            	ld	(ix+enemy_data.y),a
    1147.  01:5396                      	
    1148.  01:5396  CD 22 4A            	call	rand8
    1149.  01:5399  A7                  	and		a
    1150.  01:539A  CC B4 54            	call	z,book_enemy_shoot
    1151.  01:539D                      
    1152.  01:539D  CD 80 64            	call	test_collision_msbullets
    1153.  01:53A0  D2 0F 50            	jp	nc,next
    1154.  01:53A3  C3 18 50            	jp 	npcdies
    1155.  01:53A6                      
    1156.  01:53A6                      
    1157.  01:53A6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    1158.  01:53A6                      enemy6:
    1159.  01:53A6  DD 6E 01            	ld	l,(ix+enemy_data.x)
    1160.  01:53A9  DD 66 02            	ld	h,(ix+enemy_data.x+1)
    1161.  01:53AC  DD 5E 0C            	ld	e,(ix+enemy_data.speed)
    1162.  01:53AF  DD 56 0D            	ld	d,(ix+enemy_data.speed+1)
    1163.  01:53B2  19                  	add	hl,de
    1164.  01:53B3  DD 75 01            	ld  (ix+enemy_data.x),l
    1165.  01:53B6  DD 74 02            	ld  (ix+enemy_data.x+1),h
    1166.  01:53B9                      	
    1167.  01:53B9  DD CB 07 76         	bit 6,(ix+enemy_data.status)
    1168.  01:53BD  28 1E               	jr  z,.go_right
    1169.  01:53BF                      .go_left:
    1170.  01:53BF  CD 08 52            	call	rotate
    1171.  01:53C2  C6 C4               	add	a,192+4
    1172.  01:53C4  DD 77 0A            	ld	(ix+enemy_data.frame),a
    1173.  01:53C7  ED 5B EE ED         	ld	de,(xmap)
    1174.  01:53CB  A7                  	and	a
    1175.  01:53CC  ED 52               	sbc	hl,de
    1176.  01:53CE  11 E0 FF            	ld	de,-32
    1177.  01:53D1  A7                  	and	a
    1178.  01:53D2  ED 52               	sbc	hl,de
    1179.  01:53D4  F2 F9 53            	jp  p,1f
    1180.  01:53D7  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1181.  01:53DB  18 1C               	jr  1f
    1182.  01:53DD                      
    1183.  01:53DD                      .go_right:
    1184.  01:53DD  CD 08 52            	call	rotate
    1185.  01:53E0  C6 C0               	add	a,192
    1186.  01:53E2  DD 77 0A            	ld	(ix+enemy_data.frame),a
    1187.  01:53E5                      
    1188.  01:53E5  ED 5B EE ED         	ld	de,(xmap)
    1189.  01:53E9  A7                  	and	a
    1190.  01:53EA  ED 52               	sbc	hl,de
    1191.  01:53EC  11 20 01            	ld	de,256+32
    1192.  01:53EF  A7                  	and	a
    1193.  01:53F0  ED 52               	sbc	hl,de
    1194.  01:53F2  FA F9 53            	jp  m,1f
    1195.  01:53F5  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1196.  01:53F9                      1:
    1197.  01:53F9  CD 00 64            	call	set_size	; size varies with frame
    1198.  01:53FC                      		
    1199.  01:53FC  DD 7E 00            	ld	a,(ix+enemy_data.y)
    1200.  01:53FF                      
    1201.  01:53FF  DD CB 07 7E         	bit 7,(ix+enemy_data.status)
    1202.  01:5403  28 0B               	jr  z,.go_dwn
    1203.  01:5405                      .go_up:
    1204.  01:5405  3D                  	dec	a
    1205.  01:5406  FE 40               	cp	64
    1206.  01:5408  20 0F               	jr	nz,1f
    1207.  01:540A  DD CB 07 BE         	res	7,(ix+enemy_data.status)
    1208.  01:540E  18 09               	jr	1f
    1209.  01:5410                      .go_dwn:
    1210.  01:5410  3C                  	inc	a
    1211.  01:5411  FE AF               	cp	191-16
    1212.  01:5413  20 04               	jr	nz,1f
    1213.  01:5415  DD CB 07 FE         	set	7,(ix+enemy_data.status)
    1214.  01:5419                      	; jr	1f
    1215.  01:5419                      1:
    1216.  01:5419  DD 77 00            	ld	(ix+enemy_data.y),a
    1217.  01:541C                      
    1218.  01:541C  CD 22 4A            	call	rand8
    1219.  01:541F  E6 7F               	and 	127
    1220.  01:5421  CC B4 54            	call	z,book_enemy_shoot
    1221.  01:5424                      
    1222.  01:5424  CD 80 64            	call	test_collision_msbullets
    1223.  01:5427  D2 0F 50            	jp	nc,next
    1224.  01:542A  C3 18 50            	jp	npcdies
    1225.  01:542D                      	
    1226.  01:542D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    1227.  01:542D                      enemy7:	
    1228.  01:542D  DD 6E 01            	ld	l,(ix+enemy_data.x)
    1229.  01:5430  DD 66 02            	ld	h,(ix+enemy_data.x+1)
    1230.  01:5433  DD 5E 0C            	ld	e,(ix+enemy_data.speed)
    1231.  01:5436  DD 56 0D            	ld	d,(ix+enemy_data.speed+1)
    1232.  01:5439  19                  	add	hl,de
    1233.  01:543A  DD 75 01            	ld  (ix+enemy_data.x),l
    1234.  01:543D  DD 74 02            	ld  (ix+enemy_data.x+1),h
    1235.  01:5440                      	
    1236.  01:5440  DD CB 07 76         	bit 6,(ix+enemy_data.status)
    1237.  01:5444  28 1E               	jr  z,.go_right
    1238.  01:5446                      .go_left:
    1239.  01:5446  CD 08 52            	call	rotate
    1240.  01:5449  C6 C4               	add	a,192+4
    1241.  01:544B  DD 77 0A            	ld	(ix+enemy_data.frame),a
    1242.  01:544E                      
    1243.  01:544E  ED 5B EE ED         	ld	de,(xmap)
    1244.  01:5452  A7                  	and	a
    1245.  01:5453  ED 52               	sbc	hl,de
    1246.  01:5455  11 E0 FF            	ld	de,-32
    1247.  01:5458  A7                  	and	a
    1248.  01:5459  ED 52               	sbc	hl,de
    1249.  01:545B  F2 80 54            	jp  p,1f
    1250.  01:545E  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1251.  01:5462  18 1C               	jr  1f
    1252.  01:5464                      
    1253.  01:5464                      .go_right:
    1254.  01:5464  CD 08 52            	call	rotate
    1255.  01:5467  C6 C0               	add	a,192
    1256.  01:5469  DD 77 0A            	ld	(ix+enemy_data.frame),a
    1257.  01:546C                      	
    1258.  01:546C  ED 5B EE ED         	ld	de,(xmap)
    1259.  01:5470  A7                  	and	a
    1260.  01:5471  ED 52               	sbc	hl,de
    1261.  01:5473  11 20 01            	ld	de,256+32
    1262.  01:5476  A7                  	and	a
    1263.  01:5477  ED 52               	sbc	hl,de
    1264.  01:5479  FA 80 54            	jp  m,1f
    1265.  01:547C  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1266.  01:5480                      1:
    1267.  01:5480  CD 00 64            	call	set_size	; size varies with frame
    1268.  01:5483                      
    1269.  01:5483  DD 7E 00            	ld	a,(ix+enemy_data.y)
    1270.  01:5486                      
    1271.  01:5486  DD CB 07 7E         	bit 7,(ix+enemy_data.status)
    1272.  01:548A  28 0B               	jr  z,.go_dwn
    1273.  01:548C                      .go_up:
    1274.  01:548C  3D                  	dec	a
    1275.  01:548D  FE 40               	cp	64
    1276.  01:548F  20 0F               	jr	nz,1f
    1277.  01:5491  DD CB 07 BE         	res	7,(ix+enemy_data.status)
    1278.  01:5495  18 09               	jr	1f
    1279.  01:5497                      .go_dwn:
    1280.  01:5497  3C                  	inc	a
    1281.  01:5498  FE AF               	cp	191-16
    1282.  01:549A  20 04               	jr	nz,1f
    1283.  01:549C  DD CB 07 FE         	set	7,(ix+enemy_data.status)
    1284.  01:54A0                      	; jr	1f
    1285.  01:54A0                      1:
    1286.  01:54A0  DD 77 00            	ld	(ix+enemy_data.y),a
    1287.  01:54A3                      
    1288.  01:54A3  CD 22 4A            	call	rand8
    1289.  01:54A6  E6 7F               	and 	127
    1290.  01:54A8  CC B4 54            	call	z,book_enemy_shoot
    1291.  01:54AB                      
    1292.  01:54AB  CD 80 64            	call	test_collision_msbullets
    1293.  01:54AE  D2 0F 50            	jp	nc,next
    1294.  01:54B1  C3 18 50            	jp 	npcdies
    1295.  01:54B4                      	
    1296.  01:54B4                      
    1297.  01:54B4                      
    1298.  01:54B4                      ; enemy3:
    1299.  01:54B4                      	; bit 6,(ix+enemy_data.status)
    1300.  01:54B4                      	; jr  z,.go_right
    1301.  01:54B4                      ; .go_left:
    1302.  01:54B4                      	; call	rotate
    1303.  01:54B4                      	; add	a,224
    1304.  01:54B4                      	; ld	(ix+enemy_data.frame),a
    1305.  01:54B4                      	; dec (ix+enemy_data.x)
    1306.  01:54B4                      	; ld  a,64-1
    1307.  01:54B4                      	; cp  (ix+enemy_data.x)
    1308.  01:54B4                      	; jr  nz,1f
    1309.  01:54B4                      	; res 6,(ix+enemy_data.status)
    1310.  01:54B4                      	; jr  1f
    1311.  01:54B4                      ; .go_right:
    1312.  01:54B4                      	; call	rotate
    1313.  01:54B4                      	; add	a,240
    1314.  01:54B4                      	; ld	(ix+enemy_data.frame),a
    1315.  01:54B4                      	; inc (ix+enemy_data.x)
    1316.  01:54B4                      	; ld  a,192-16
    1317.  01:54B4                      	; cp  (ix+enemy_data.x)
    1318.  01:54B4                      	; jr  nz,1f
    1319.  01:54B4                      	; set 6,(ix+enemy_data.status)
    1320.  01:54B4                      ; 1:
    1321.  01:54B4                      	; ld	(ix+enemy_data.color),14
    1322.  01:54B4                      	; jp	next
    1323.  01:54B4                      
    1324.  01:54B4                      
    1325.  01:54B4                      
    1326.  01:54B4                      
    1327.  01:54B4                      ; in
    1328.  01:54B4                      ;	IX -> enemy ship
    1329.  01:54B4                      ; out
    1330.  01:54B4                      ;	active bullet in list enem_bullets
    1331.  01:54B4                      
    1332.  01:54B4                      book_enemy_shoot:
    1333.  01:54B4                      	; aim to the manta
    1334.  01:54B4  0E 20               	ld	c,32
    1335.  01:54B6  59                  	ld	e,c
    1336.  01:54B7  3A F0 ED            	ld	a,(yship)
    1337.  01:54BA  47                  	ld	b,a
    1338.  01:54BB  DD 56 00            	ld	d,(ix+enemy_data.y)
    1339.  01:54BE  CD DF 64            	call	CollisionCheck_8b
    1340.  01:54C1  D0                  	ret		nc
    1341.  01:54C2                      
    1342.  01:54C2                      	; avoid shooting from outside the screen	
    1343.  01:54C2  06 00               	ld	b,0
    1344.  01:54C4  DD 6E 01            	ld	l,(ix+enemy_data.x)
    1345.  01:54C7  DD 66 02            	ld	h,(ix+enemy_data.x+1)
    1346.  01:54CA  DD 4E 03            	ld 	c,(ix+enemy_data.xoff)
    1347.  01:54CD  09                  	add hl,bc
    1348.  01:54CE  DD 46 05            	ld 	b,(ix+enemy_data.xsize)
    1349.  01:54D1                      	
    1350.  01:54D1  ED 5B EE ED         	ld	de,(xmap)
    1351.  01:54D5  0E FF               	ld 	c,255
    1352.  01:54D7  CD CF 64            	call	CalcCollision
    1353.  01:54DA  D0                  	ret		nc
    1354.  01:54DB                      	
    1355.  01:54DB                      
    1356.  01:54DB  FD 21 A1 EE         	ld  iy,enem_bullets
    1357.  01:54DF  11 0E 00            	ld  de,enemy_data
    1358.  01:54E2                      	
    1359.  01:54E2                      	repeat	max_enem_bullets
    1360.  01:54E2                    < 
    1361.  01:54E2                    < 	bit	0,(iy+enemy_data.status)
    1362.  01:54E2                    < 	jr  z,.activate_this
    1363.  01:54E2                    < 	add iy,de
    1364.  01:54E2                    < 
    1365.  01:54E2                    < 	endrepeat
    1365.  01:54E2  FD CB 07 46 28 13 FD 19 FD CB 07 46 28 0B FD 19 
    1365.  01:54F2  FD CB 07 46 28 03 FD 19 
    1366.  01:54FA  C9                  	ret
    1367.  01:54FB                      
    1368.  01:54FB                      .activate_this:
    1369.  01:54FB  DD CB 07 76         	bit 6,(ix+enemy_data.status)
    1370.  01:54FF  20 0F               	jr  nz,.shootsx
    1371.  01:5501                      .shootdx
    1372.  01:5501  FD 36 07 01         	ld  (iy+enemy_data.status),1
    1373.  01:5505                      	; ld  hl,enemy_bullet_speed
    1374.  01:5505                      	; ld	e,(ix+enemy_data.speed)
    1375.  01:5505                      	; ld	d,(ix+enemy_data.speed+1)
    1376.  01:5505                      	; add	hl,de
    1377.  01:5505  DD 6E 0C            	ld	l,(ix+enemy_data.speed)
    1378.  01:5508  DD 66 0D            	ld	h,(ix+enemy_data.speed+1)
    1379.  01:550B  23 23               [enemy_bullet_speed]	inc hl
    1380.  01:550D  C3 1C 55            	jp  1f
    1381.  01:5510                      
    1382.  01:5510                      .shootsx
    1383.  01:5510  FD 36 07 41         	ld  (iy+enemy_data.status),1 + 64
    1384.  01:5514                      	; ld  hl,-enemy_bullet_speed
    1385.  01:5514                      	; ld	e,(ix+enemy_data.speed)
    1386.  01:5514                      	; ld	d,(ix+enemy_data.speed+1)
    1387.  01:5514                      	; add	hl,de
    1388.  01:5514  DD 6E 0C            	ld	l,(ix+enemy_data.speed)
    1389.  01:5517  DD 66 0D            	ld	h,(ix+enemy_data.speed+1)
    1390.  01:551A  2B 2B               [enemy_bullet_speed]	dec hl
    1391.  01:551C                      	
    1392.  01:551C                      1:
    1393.  01:551C  FD 75 0C            	ld  (iy+enemy_data.speed),l
    1394.  01:551F  FD 74 0D            	ld  (iy+enemy_data.speed+1),h
    1395.  01:5522                      
    1396.  01:5522  3E 30               	ld  a,12*4			; it could depend on enemy ship
    1397.  01:5524  FD 77 0A            	ld  (iy+enemy_data.frame),a
    1398.  01:5527                      
    1399.  01:5527  CD 20 64            	call	set_size2	; set  xoff,yoff,xsize,ysize for sprite collision
    1400.  01:552A                      
    1401.  01:552A  DD 6E 01            	ld	l,(ix+enemy_data.x)
    1402.  01:552D  DD 66 02            	ld	h,(ix+enemy_data.x+1)
    1403.  01:5530  FD 75 01            	ld  (iy+enemy_data.x),l
    1404.  01:5533  FD 74 02            	ld  (iy+enemy_data.x+1),h
    1405.  01:5536                      
    1406.  01:5536  DD 7E 00            	ld  a,(ix+enemy_data.y)
    1407.  01:5539  FD 77 00            	ld  (iy+enemy_data.y),a
    1408.  01:553C  FD 36 08 9C         	ld  (iy+enemy_data.cntr),(256+32+24)/enemy_bullet_speed
    1409.  01:5540                      
    1410.  01:5540                      	; ld  (iy+enemy_data.color),11
    1411.  01:5540                      	
    1412.  01:5540  3E 08               	ld a,8			; enemy shoot
    1413.  01:5542  CD BE 05            	call AFXPLAY
    1414.  01:5545  C9                  	ret
    1415.  01:5546                      
    1416.  01:5546                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    1417.  01:5546                      ;
    1418.  01:5546                      ; manage active enemy bullets
    1419.  01:5546                      ;
    1420.  01:5546                      
    1421.  01:5546                      enemy_bullet_loop:
    1422.  01:5546                      
    1423.  01:5546  21 FC 0D            	ld	hl,ms_ani
    1424.  01:5549  3A 25 EC            	ld  a,(aniframe)
    1425.  01:554C  4F                  	ld	c,a
    1426.  01:554D  06 00               	ld	b,0
    1427.  01:554F  09                  	add	hl,bc
    1428.  01:5550  7E                  	ld	a,(hl)
    1429.  01:5551  87                  	add	a,a
    1430.  01:5552  87                  	add	a,a
    1431.  01:5553  FD 21 87 67         	ld	iy,ms_col_win
    1432.  01:5557  4F                  	ld	c,a
    1433.  01:5558  06 00               	ld	b,0
    1434.  01:555A  FD 09               	add	iy,bc	; iy aims to MS size for current frame
    1435.  01:555C                      
    1436.  01:555C                      	;iy -> [minx(h) maxx(h) miny(h) maxy(h)]
    1437.  01:555C                      
    1438.  01:555C  DD 21 A1 EE         	ld  ix,enem_bullets
    1439.  01:5560  11 0E 00            	ld  de,enemy_data
    1440.  01:5563                      	repeat	max_enem_bullets
    1441.  01:5563                    < 2:
    1442.  01:5563                    < 	exx
    1443.  01:5563                    < 	bit  0,(ix+enemy_data.status)
    1444.  01:5563                    < 	jp  z,1f
    1445.  01:5563                    < 
    1446.  01:5563                    < 	ld  l,(ix+enemy_data.x)
    1447.  01:5563                    < 	ld  h,(ix+enemy_data.x+1)
    1448.  01:5563                    < 	ld  e,(ix+enemy_data.speed)
    1449.  01:5563                    < 	ld  d,(ix+enemy_data.speed+1)
    1450.  01:5563                    < 	add hl,de						; move right or  left
    1451.  01:5563                    < 	ld  (ix+enemy_data.x),l
    1452.  01:5563                    < 	ld  (ix+enemy_data.x+1),h
    1453.  01:5563                    < 
    1454.  01:5563                    < 	ld	a,(ms_state)				; MS is immune to bullets while looping
    1455.  01:5563                    < 	cp	ms_loop_right2left
    1456.  01:5563                    < 	jr	z,3f
    1457.  01:5563                    < 	cp	ms_loop_left2right
    1458.  01:5563                    < 	jr	z,3f
    1459.  01:5563                    < 
    1460.  01:5563                    < 	ld	a,(god_mode)
    1461.  01:5563                    < 	and 	a						
    1462.  01:5563                    < 	call	z,test_collision_enemy_bullets
    1463.  01:5563                    < 	jp	nc,3f
    1464.  01:5563                    < 	res 0,(ix+enemy_data.status)	; turn off this bullet
    1465.  01:5563                    < 	jp	test_obstacles.found		; start ms explosion
    1466.  01:5563                    < 3:
    1467.  01:5563                    < 	dec	(ix+enemy_data.cntr)
    1468.  01:5563                    < 	jp  nz,1f
    1469.  01:5563                    < 	res 0,(ix+enemy_data.status)
    1470.  01:5563                    < 1:
    1471.  01:5563                    < 	exx
    1472.  01:5563                    < 	add ix,de
    1473.  01:5563                    < 	endrepeat
    1473.  01:5563  D9 DD CB 07 46 CA A4 55 DD 6E 01 DD 66 02 DD 5E 
    1473.  01:5573  0C DD 56 0D 19 DD 75 01 DD 74 02 3A 27 EC FE 08 
    1473.  01:5583  28 15 FE 09 28 11 3A FD ED A7 CC 40 64 D2 9A 55 
    1473.  01:5593  DD CB 07 86 C3 F4 6B DD 35 08 C2 A4 55 DD CB 07 
    1473.  01:55A3  86 D9 DD 19 D9 DD CB 07 46 CA E8 55 DD 6E 01 DD 
    1473.  01:55B3  66 02 DD 5E 0C DD 56 0D 19 DD 75 01 DD 74 02 3A 
    1473.  01:55C3  27 EC FE 08 28 15 FE 09 28 11 3A FD ED A7 CC 40 
    1473.  01:55D3  64 D2 DE 55 DD CB 07 86 C3 F4 6B DD 35 08 C2 E8 
    1473.  01:55E3  55 DD CB 07 86 D9 DD 19 D9 DD CB 07 46 CA 2C 56 
    1473.  01:55F3  DD 6E 01 DD 66 02 DD 5E 0C DD 56 0D 19 DD 75 01 
    1473.  01:5603  DD 74 02 3A 27 EC FE 08 28 15 FE 09 28 11 3A FD 
    1473.  01:5613  ED A7 CC 40 64 D2 22 56 DD CB 07 86 C3 F4 6B DD 
    1473.  01:5623  35 08 C2 2C 56 DD CB 07 86 D9 DD 19 
    1474.  01:562F  C9                  	ret
    1475.  01:5630                      
    1476.  01:5630                      
    1477.  01:5630                      
     223   01:5630                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     224   01:5630                      	INCLUDE SCCaudio.asm
       1.  01:5630                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  01:5630                      ;
       3.  01:5630                      ;   Mapper Konami 5 (mapper +  scc)
       4.  01:5630                      ;
       5.  01:5630                      ; Bank 1: 5000h - 57FFh (5000h used)
       6.  01:5630                      ; Bank 2: 7000h - 77FFh (7000h used)
       7.  01:5630                      ; Bank 3: 9000h - 97FFh (9000h used)
       8.  01:5630                      ; Bank 4: B000h - B7FFh (B000h used)
       9.  01:5630                      
      10.  01:5630  (01:5000)           Bank1   equ      0x5000
      11.  01:5630  (01:7000)           Bank2   equ      0x7000
      12.  01:5630  (01:9000)           Bank3   equ      0x9000
      13.  01:5630  (01:B000)           Bank4   equ      0xB000
      14.  01:5630                      
      15.  01:5630                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      16.  01:5630                      ;
      17.  01:5630                      
      18.  01:5630                      ; Audio_init_code:
      19.  01:5630                      
      20.  01:5630                      ; ; some ayFX init
      21.  01:5630                      
      22.  01:5630                          ; call	ayFX_SETUP
      23.  01:5630                      
      24.  01:5630                      ; ; some PT3 init
      25.  01:5630                      
      26.  01:5630                          ; call    PT3_MUTE
      27.  01:5630                      
      28.  01:5630                      ; ; some scc init
      29.  01:5630                      
      30.  01:5630                          ; call 	_SCC_PSG_Volume_balance
      31.  01:5630                      	; ret
      32.  01:5630                      	
      33.  01:5630                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      34.  01:5630                      ;
      35.  01:5630                      ;   compute SCC/PSG Volume balance
      36.  01:5630                      ;
      37.  01:5630                      
      38.  01:5630                      
      39.  01:5630                      _SCC_PSG_Volume_balance:
      40.  01:5630                      
      41.  01:5630  3A AB ED                ld  a,(_psg_vol_fix)
      42.  01:5633  C6 0F                   add a,15
      43.  01:5635  20 01                   jr  nz,1f
      44.  01:5637  3C                      inc	a
      45.  01:5638                      1:        
      46.  01:5638  87                      add	a,a				; a:=a*2
      47.  01:5639  87                      add	a,a				; a:=a*4
      48.  01:563A  87                      add	a,a				; a:=a*8
      49.  01:563B  87                      add	a,a				; a:=a*16
      50.  01:563C  5F                      ld	e,a				; e:=a
      51.  01:563D  16 00                   ld	d,0				; de:=a
      52.  01:563F  21 AB EC                ld	hl,VT_			; hl:=PT3 volume table
      53.  01:5642  19                      add	hl,de			; hl is a pointer to the relative volume table
      54.  01:5643                      
      55.  01:5643  22 B0 ED                ld  (_psg_vol_balance),hl
      56.  01:5646                      		
      57.  01:5646  3A AD ED                ld  a,(_scc_vol_fix)
      58.  01:5649  C6 0F                   add a,15
      59.  01:564B  20 01                   jr  nz,1f
      60.  01:564D  3C                      inc	a
      61.  01:564E                      1:        
      62.  01:564E  87                      add	a,a				; a:=a*2
      63.  01:564F  87                      add	a,a				; a:=a*4
      64.  01:5650  87                      add	a,a				; a:=a*8
      65.  01:5651  87                      add	a,a				; a:=a*16
      66.  01:5652  5F                      ld	e,a				; e:=a
      67.  01:5653  16 00                   ld	d,0				; de:=a
      68.  01:5655  21 AB EC                ld	hl,VT_			; hl:=PT3 volume table
      69.  01:5658  19                      add	hl,de			; hl is a pointer to the relative volume table
      70.  01:5659                      
      71.  01:5659  22 B2 ED                ld  (_scc_vol_balance),hl
      72.  01:565C  C9                      ret
      73.  01:565D                      
      74.  01:565D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      75.  01:565D                      ;
      76.  01:565D                      ;   Interrupt handler
      77.  01:565D                      ;
      78.  01:565D                      
      79.  01:565D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      80.  01:565D                      ; Audio I/O
      81.  01:565D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      82.  01:565D                      
      83.  01:565D                          ; --- Place this instruction on interrupt --- 
      84.  01:565D                      	; --- or after HALT instruction to synchronize music ---
      85.  01:565D                      no_music:
      86.  01:565D  AF                  	xor	a
      87.  01:565E  67                  	LD	H,A
      88.  01:565F  6F                  	LD	L,A
      89.  01:5660  32 B3 EC            	LD	( AYREGS+AR_AmplA),A
      90.  01:5663  32 BC ED            	LD	( AYREGS_CPY+AR_AmplA),A
      91.  01:5666  22 B4 EC            	LD	( AYREGS+AR_AmplB),HL
      92.  01:5669  22 BD ED            	LD	( AYREGS_CPY+AR_AmplB),HL
      93.  01:566C  3E BF               	ld  a,010111111B
      94.  01:566E  32 B2 EC            	ld  (AYREGS+AR_Mixer),a
      95.  01:5671  32 BB ED            	ld  (AYREGS_CPY+AR_Mixer),a
      96.  01:5674  C3 75 49                jp     ayFX_FRAME			; Calculates PSG values for next frame
      97.  01:5677                      	
      98.  01:5677                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      99.  01:5677                      ; Audio Internal code
     100.  01:5677                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     101.  01:5677                      Audio_Internal_code:
     102.  01:5677                      
     103.  01:5677                      ; Only if musics are in ROM
     104.  01:5677  3A C9 FF            	ld	a,(music_flag)
     105.  01:567A  A7                  	and	a
     106.  01:567B  28 E0               	jr	z,no_music
     107.  01:567D                      
     108.  01:567D  3E BF                   ld  a,010111111B
     109.  01:567F  32 B2 EC                ld  (AYREGS+7),a
     110.  01:5682                      	
     111.  01:5682  08                  	ex	af,af'				; preserve af'
     112.  01:5683  F5                  	push	af
     113.  01:5684  CD 57 46            	call    PT3_PLAY			; Calculates PSG values for next frame
     114.  01:5687  F1                  	pop		af
     115.  01:5688  08                  	ex	af,af'
     116.  01:5689                      	
     117.  01:5689  21 AB EC                ld      hl,AYREGS
     118.  01:568C  11 B4 ED                ld      de,AYREGS_CPY
     119.  01:568F  01 0D 00                ld      bc,13
     120.  01:5692  ED B0                   ldir                        ; save a copy of AY register to avoid that SCCROUT get affected by AYFX
     121.  01:5694                      1:
     122.  01:5694                          ; --- PSG/SCC volume balance
     123.  01:5694                          ; psg attenuation - only for music
     124.  01:5694                      
     125.  01:5694  ED 5B B0 ED             ld  de,(_psg_vol_balance)
     126.  01:5698                         
     127.  01:5698  2A B3 EC            	ld  hl,(AYREGS+8)
     128.  01:569B  44                  	ld	b,h
     129.  01:569C  26 00                   ld  h,0
     130.  01:569E  19                      add hl,de
     131.  01:569F  4E                      ld  c,(hl)
     132.  01:56A0                      
     133.  01:56A0  68                      ld  l,b
     134.  01:56A1  26 00                   ld  h,0
     135.  01:56A3  19                      add hl,de
     136.  01:56A4  46                      ld  b,(hl)
     137.  01:56A5  ED 43 B3 EC             ld  (AYREGS+8),bc
     138.  01:56A9                          
     139.  01:56A9  3A B5 EC                ld  a,(AYREGS+10)
     140.  01:56AC  6F                  	ld	l,a
     141.  01:56AD  26 00                   ld  h,0
     142.  01:56AF  19                      add hl,de
     143.  01:56B0  7E                      ld  a,(hl)
     144.  01:56B1  32 B5 EC                ld  (AYREGS+10),a
     145.  01:56B4                      
     146.  01:56B4                      
     147.  01:56B4                          ; --- PSG/SCC volume balance
     148.  01:56B4                          ; scc attenuation - only for music
     149.  01:56B4                      
     150.  01:56B4  ED 5B B2 ED             ld  de,(_scc_vol_balance)
     151.  01:56B8                         
     152.  01:56B8  2A BC ED                ld  hl,(AYREGS_CPY+8)
     153.  01:56BB  44                  	ld	b,h
     154.  01:56BC  26 00                   ld  h,0
     155.  01:56BE  19                      add hl,de
     156.  01:56BF  4E                      ld  c,(hl)
     157.  01:56C0                      
     158.  01:56C0  68                      ld  l,b
     159.  01:56C1  26 00                   ld  h,0
     160.  01:56C3  19                      add hl,de
     161.  01:56C4  46                      ld  b,(hl)
     162.  01:56C5  ED 43 BC ED             ld  (AYREGS_CPY+8),bc
     163.  01:56C9                          
     164.  01:56C9  3A BE ED                ld  a,(AYREGS_CPY+10)
     165.  01:56CC  6F                  	ld	l,a
     166.  01:56CD  26 00                   ld  h,0
     167.  01:56CF  19                      add hl,de
     168.  01:56D0  7E                      ld  a,(hl)
     169.  01:56D1  32 BE ED                ld  (AYREGS_CPY+10),a
     170.  01:56D4                          
     171.  01:56D4                          ; ayFX player section
     172.  01:56D4                       
     173.  01:56D4                          ; --- To speed up VDP writes you can place this instruction after all of them, but before next INT ---
     174.  01:56D4  C3 75 49                jp     ayFX_FRAME			; Calculates PSG values for next frame
     175.  01:56D7                      
     176.  01:56D7                      	
     177.  01:56D7                      ;-------------------------------------
     178.  01:56D7                      
     179.  01:56D7                      PT3_ROUT:
     180.  01:56D7  AF                          XOR A
     181.  01:56D8                              
     182.  01:56D8  21 B2 EC            		LD	HL,AYREGS+7
     183.  01:56DB  CB FE               		set	7,(hl)        ; --- FIXES BITS 6 AND 7 OF MIXER ---
     184.  01:56DD  CB B6               		res	6,(hl)        ; --- FIXES BITS 6 AND 7 OF MIXER ---
     185.  01:56DF                      
     186.  01:56DF  0E A0               		LD C,0xA0
     187.  01:56E1  21 AB EC            		LD HL,AYREGS
     188.  01:56E4                      _LOUT:
     189.  01:56E4  ED 79                       OUT (C),A
     190.  01:56E6  0C                  		INC C
     191.  01:56E7  ED A3               		OUTI
     192.  01:56E9  0D                  		DEC C
     193.  01:56EA  3C                  		INC A
     194.  01:56EB  FE 0D               		CP 13
     195.  01:56ED  20 F5               		JR NZ,_LOUT
     196.  01:56EF  C9                  		RET
     197.  01:56F0                      
     198.  01:56F0                      
     199.  01:56F0                      
     200.  01:56F0                      
     201.  01:56F0                      ;-------------------------------------
     202.  01:56F0                      
     203.  01:56F0                      
     204.  01:56F0                      
     205.  01:56F0                      
     225   01:56F0                      	INCLUDE SCCWAVES.ASM
       1.  01:56F0                      
       2.  01:56F0                      
       3.  01:56F0                      ;--------------------------------------------------------
       4.  01:56F0                      _WAVESSCC:                                               ; 15 instruments
       5.  01:56F0                      
       6.  01:56F0                      
       7.  01:56F0                      
       8.  01:56F0                        
       9.  01:56F0  00 (32)             	ds     32;     empty
      10.  01:5710                          db     242,235,234,209,219,213,219,205,202,238,225,6,4,10,17,26,8,254,8,255,5,21,27,27,53,54,31,46,38,7,254,240			; 01_piano.wav
      10.  01:5710  F2 EB EA D1 DB D5 DB CD CA EE E1 06 04 0A 11 1A 
      10.  01:5720  08 FE 08 FF 05 15 1B 1B 35 36 1F 2E 26 07 FE F0 
      11.  01:5730                          db     43,30,15,11,250,248,236,234,237,251,2,248,3,248,237,242,239,231,253,246,14,11,0,8,239,223,240,229,1,33,47,58		; 02_harpsch.wav
      11.  01:5730  2B 1E 0F 0B FA F8 EC EA ED FB 02 F8 03 F8 ED F2 
      11.  01:5740  EF E7 FD F6 0E 0B 00 08 EF DF F0 E5 01 21 2F 3A 
      12.  01:5750                          db     59,59,50,38,25,15,254,234,218,205,209,223,228,233,245,3,23,45,58,57,40,13,245,223,208,200,193,199,224,254,27,49	; 03_harp.wav
      12.  01:5750  3B 3B 32 26 19 0F FE EA DA CD D1 DF E4 E9 F5 03 
      12.  01:5760  17 2D 3A 39 28 0D F5 DF D0 C8 C1 C7 E0 FE 1B 31 
      13.  01:5770                          ; db     210,195,203,222,255,21,33,25,20,16,0,251,245,238,253,20,27,29,22,14,9,0,246,236,232,237,2,25,33,24,253,230			; 04_strgs.wav
      14.  01:5770                          ; db     204,194,205,226,255,23,39,52,34,16,1,239,232,247,1,21,39,41,23,15,5,254,248,244,231,242,11,15,24,18,246,215		; 05_slwstr.wav
      15.  01:5770                          ; db     49,42,33,25,18,5,238,213,196,195,214,243,10,20,16,2,245,239,239,244,250,255,2,2,254,249,244,245,255,19,40,51		; 06_flute.wav
      16.  01:5770  (0020)              	incbin "sccwavestouse\04_ldtrump.bin"
      17.  01:5790  (0020)              	incbin "sccwavestouse\05_lead.bin"
      18.  01:57B0  (0020)              	incbin "sccwavestouse\06_orgue.bin"
      19.  01:57D0                          db     59,63,60,47,30,16,10,8,4,0,250,244,240,242,246,248,247,240,232,225,219,215,208,203,206,217,234,255,17,33,46,55	; 07_fltvib.wav
      19.  01:57D0  3B 3F 3C 2F 1E 10 0A 08 04 00 FA F4 F0 F2 F6 F8 
      19.  01:57E0  F7 F0 E8 E1 DB D7 D0 CB CE D9 EA FF 11 21 2E 37 
      20.  01:57F0                          db     0,0,254,255,1,3,6,4,255,250,240,228,219,220,250,41,192,35,1,3,4,5,0,252,252,255,2,1,248,245,248,253				; 08_trmpt.wav
      20.  01:57F0  00 00 FE FF 01 03 06 04 FF FA F0 E4 DB DC FA 29 
      20.  01:5800  C0 23 01 03 04 05 00 FC FC FF 02 01 F8 F5 F8 FD 
      21.  01:5810                          db     243,4,27,23,16,23,20,22,22,4,254,231,213,215,216,230,243,1,27,43,58,58,38,23,5,236,221,224,224,222,226,229		; 09_strpzz.wav
      21.  01:5810  F3 04 1B 17 10 17 14 16 16 04 FE E7 D5 D7 D8 E6 
      21.  01:5820  F3 01 1B 2B 3A 3A 26 17 05 EC DD E0 E0 DE E2 E5 
      22.  01:5830                          db     240,7,23,31,46,35,43,24,14,5,230,228,214,207,215,221,239,3,13,32,35,45,43,32,26,0,247,228,212,214,209,221		; 10_clst.wav
      22.  01:5830  F0 07 17 1F 2E 23 2B 18 0E 05 E6 E4 D6 CF D7 DD 
      22.  01:5840  EF 03 0D 20 23 2D 2B 20 1A 00 F7 E4 D4 D6 D1 DD 
      23.  01:5850                          db     254,214,193,203,221,228,221,211,209,210,212,219,229,232,233,246,10,16,0,249,12,32,32,32,46,52,37,19,13,15,7,243	; 11_mrmb.wav
      23.  01:5850  FE D6 C1 CB DD E4 DD D3 D1 D2 D4 DB E5 E8 E9 F6 
      23.  01:5860  0A 10 00 F9 0C 20 20 20 2E 34 25 13 0D 0F 07 F3 
      24.  01:5870                          db     6,216,0,15,241,219,239,3,12,46,245,23,20,229,6,21,212,228,211,211,18,1,245,49,19,246,37,32,15,19,223,244			; 12_vln.wav
      24.  01:5870  06 D8 00 0F F1 DB EF 03 0C 2E F5 17 14 E5 06 15 
      24.  01:5880  D4 E4 D3 D3 12 01 F5 31 13 F6 25 20 0F 13 DF F4 
      25.  01:5890                          ; db     242,194,210,213,212,210,236,5,15,38,40,30,26,26,20,24,250,243,245,235,243,234,220,237,246,252,30,47,28,38,43,29	; 13_vlnvb.wav
      26.  01:5890                          ; db     58,63,62,57,51,47,44,43,45,49,54,58,59,60,59,59,58,58,57,57,56,56,56,55,55,54,54,54,53,53,52,52					; 14_snrdr.wav
      27.  01:5890                      	; db	   38,209,31,234,227,231,255,13,34,44,23,248,228,255,23,34,18,8,4,2,255,254,255,246,238,237,245,243,226,215,213,17	; 15_aaaaaaa.wav
      28.  01:5890  (0020)              	incbin "sccwavestouse\13_bass1.bin"
      29.  01:58B0  (0020)              	incbin "sccwavestouse\14_scbass.bin"
      30.  01:58D0  (0020)              	incbin "sccwavestouse\15_venbass.bin"
      31.  01:58F0                      
      32.  01:58F0                      	
      33.  01:58F0                      
      34.  01:58F0                      ;-------------------------------------
      35.  01:58F0                      ;  scc eches for PT3
      36.  01:58F0                      ;-------------------------------------
      37.  01:58F0  (01:9880)           SCC_REG     EQU 009880h           ;SCC ADDRESS FUNCTION
      38.  01:58F0                      
      39.  01:58F0                      SCCROUT:
      40.  01:58F0                              ;Frequencies
      41.  01:58F0                      		
      42.  01:58F0                      		; call en_scc
      43.  01:58F0                      		; ret	z
      44.  01:58F0  3E 3F                       ld  a,03Fh
      45.  01:58F2  32 00 90                    ld  (Bank3),a
      46.  01:58F5                      
      47.  01:58F5  2A B4 ED                    LD  HL,(AYREGS_CPY+0)       ; A-> ch 1 
      48.  01:58F8  22 80 98                    LD  (SCC_REG+0),HL
      49.  01:58FB  2A B6 ED                    LD  HL,(AYREGS_CPY+2)       ; C-> ch 2
      50.  01:58FE  22 82 98                    LD  (SCC_REG+2),HL
      51.  01:5901  2A B8 ED                    LD  HL,(AYREGS_CPY+4)       ; B-> ch 3
      52.  01:5904  22 84 98                    LD  (SCC_REG+4),HL
      53.  01:5907                      
      54.  01:5907                      		;VOLUMES
      55.  01:5907                      
      56.  01:5907  3A BC ED                    ld      a,(AYREGS_CPY+8)
      57.  01:590A  32 8A 98                    ld      (SCC_REG+0x0A),a    ; A-> ch 1 
      58.  01:590D  3A BD ED                    ld      a,(AYREGS_CPY+9)
      59.  01:5910  32 8B 98                    LD      (SCC_REG+0x0B),A    ; C-> ch 2
      60.  01:5913  3A BE ED                    ld      a,(AYREGS_CPY+10)
      61.  01:5916  32 8C 98                    LD      (SCC_REG+0x0C),A    ; B-> ch 3
      62.  01:5919                      
      63.  01:5919                      		;MIXER
      64.  01:5919                      
      65.  01:5919  3A BB ED                    ld      a,(AYREGS_CPY+7)
      66.  01:591C  EE 07                       xor     7        
      67.  01:591E  E6 07                       and     7
      68.  01:5920  32 8F 98                    ld      (SCC_REG+0x0F),a
      69.  01:5923                      
      70.  01:5923                      		; call en_slot
      71.  01:5923  C9                          RET
      72.  01:5924                      
      73.  01:5924                      
      74.  01:5924                      ;-------------------------------------
      75.  01:5924                      ; A-> ch 1 
      76.  01:5924                      ; B-> ch 2
      77.  01:5924                      ; C-> ch 3
      78.  01:5924                      
      79.  01:5924                      
      80.  01:5924                      ; setsccwaves:
      81.  01:5924                          ; di
      82.  01:5924                      	; call en_scc
      83.  01:5924                      	; ret	z
      84.  01:5924                      	
      85.  01:5924                          ; ld      a,3fh
      86.  01:5924                          ; ld      (Bank3),a
      87.  01:5924                      
      88.  01:5924                          ; ld      de,0x09800
      89.  01:5924                          ; ld      a,(wchA)                            ; A->ch1
      90.  01:5924                          ; call    sccchan                             
      91.  01:5924                      
      92.  01:5924                          ; ld      a,(wchB)                            ; B->ch2
      93.  01:5924                          ; call    sccchan
      94.  01:5924                      
      95.  01:5924                          ; ld      a,(wchC)                            ; C->ch3
      96.  01:5924                          ; call    sccchan
      97.  01:5924                      
      98.  01:5924                         	; call en_slot
      99.  01:5924                      	; ret
     100.  01:5924                      
     101.  01:5924                      
     102.  01:5924                      probewavechanges:
     103.  01:5924                         	; call en_scc
     104.  01:5924                      	; ret	z
     105.  01:5924  D9                  	exx
     106.  01:5925  E5                  	push   hl         
     107.  01:5926  D5                  	push   de         
     108.  01:5927                      
     109.  01:5927  21 C4 ED            	ld  hl,OSmplA
     110.  01:592A                      
     111.  01:592A  3A 68 EC            	ld  a,(ChanA+29)
     112.  01:592D  BE                  	cp  (hl)
     113.  01:592E  C4 45 59            	call  nz,changeA
     114.  01:5931                      
     115.  01:5931  23                  	inc hl
     116.  01:5932  3A 86 EC            	ld  a,(ChanB+29)
     117.  01:5935  BE                  	cp  (hl)
     118.  01:5936  C4 52 59            	call  nz,changeB
     119.  01:5939                      
     120.  01:5939  23                  	inc hl
     121.  01:593A  3A A4 EC            	ld  a,(ChanC+29)
     122.  01:593D  BE                  	cp  (hl)
     123.  01:593E  C4 5F 59            	call  nz,changeC
     124.  01:5941                      
     125.  01:5941  D1                  	pop    de         
     126.  01:5942  E1                  	pop    hl         
     127.  01:5943  D9                  	exx               
     128.  01:5944                      
     129.  01:5944                      	; call en_slot
     130.  01:5944  C9                      ret
     131.  01:5945                      
     132.  01:5945                      
     133.  01:5945                      changeA:
     134.  01:5945  77                      ld      (hl),a
     135.  01:5946  CD 83 59                call    samp2wav
     136.  01:5949  32 C1 ED                ld      (wchA),a
     137.  01:594C  11 00 98                ld      de,0x09800                      ; A->ch1
     138.  01:594F  C3 69 59                jp      1f
     139.  01:5952                          
     140.  01:5952                      changeB:
     141.  01:5952  77                      ld      (hl),a
     142.  01:5953  CD 83 59                call    samp2wav
     143.  01:5956  32 C2 ED                ld      (wchB),a
     144.  01:5959  11 20 98                ld      de,0x09800+32*1                 ; B->ch2
     145.  01:595C  C3 69 59                jp      1f
     146.  01:595F                      
     147.  01:595F                      changeC:
     148.  01:595F  77                      ld      (hl),a
     149.  01:5960  CD 83 59                call    samp2wav
     150.  01:5963  32 C3 ED                ld      (wchC),a
     151.  01:5966  11 40 98                ld      de,0x09800+32*2                 ; C->ch3
     152.  01:5969                      
     153.  01:5969                      1:
     154.  01:5969  4F                      ld      c,a
     155.  01:596A  3E 3F                   ld      a,3fh
     156.  01:596C  32 00 90                ld      (Bank3),a
     157.  01:596F  79                      ld      a,c
     158.  01:5970                      
     159.  01:5970                      sccchan:
     160.  01:5970  E5                      push    hl
     161.  01:5971  6F                      ld      l,a
     162.  01:5972  26 00                   ld      h,0
     163.  01:5974  29 29 29 29         [4]	add     hl,hl
     164.  01:5978  01 F0 56                ld      bc, _WAVESSCC
     165.  01:597B  09                      add     hl,bc
     166.  01:597C  01 20 00                ld      bc,32
     167.  01:597F  ED B0                   ldir
     168.  01:5981  E1                      pop     hl
     169.  01:5982  C9                      ret
     170.  01:5983                      
     171.  01:5983                      
     172.  01:5983                      
     173.  01:5983                      
     174.  01:5983                      samp2wav:
     175.  01:5983  D9                  	exx
     176.  01:5984  21 C7 ED            	ld hl,_waves
     177.  01:5987  0F                  	rrca
     178.  01:5988  5F                  	ld e,a
     179.  01:5989  16 00               	ld d,0
     180.  01:598B  19                  	add   hl,de
     181.  01:598C  7E                  	ld    a,(hl)
     182.  01:598D  87                  	add   a,a
     183.  01:598E  D9                  	exx
     184.  01:598F  C9                  	ret
     185.  01:5990                           
     186.  01:5990                      en_scc:
     187.  01:5990  3A C7 FF            	ld	a,[SCC]
     188.  01:5993  3C                  	inc	a
     189.  01:5994  C8                  	ret	z			; no scc
     190.  01:5995  DB A8               	in	a,(0xA8)	; Leemos el registro principal de slots
     191.  01:5997  32 C8 FF            	ld	(curslot),a	; save it
     192.  01:599A  5F                  	ld	e,a
     193.  01:599B  3A C7 FF            	ld	a,(SCC)
     194.  01:599E  E6 03               	and	0x03		; Nos fijamos en el slot primario
     195.  01:59A0  87 87 87 87         [4]	add	a,a
     196.  01:59A4  57                  	ld	d,a
     197.  01:59A5  7B                  	ld	a,e			; registro principal de slots
     198.  01:59A6  E6 CF               	and	11001111b
     199.  01:59A8  B2                  	or	d
     200.  01:59A9  D3 A8               	out (0xA8),a
     201.  01:59AB  C9                  	ret
     202.  01:59AC                      	
     203.  01:59AC                      en_slot:
     204.  01:59AC  3A C8 FF            	ld	a,(curslot)
     205.  01:59AF  D3 A8               	out (0xA8),a
     206.  01:59B1  C9                  	ret
     226   01:59B2                      	INCLUDE SCCDETEC.ASM	
       1.  01:59B2                      ;------------------------------------------------------------
       2.  01:59B2                      ; SCC-search v1.0
       3.  01:59B2                      ; by Alwin Henseler
       4.  01:59B2                      ; using method described in bulletin # 18 MSX-club Enschede
       5.  01:59B2                      ; input: none
       6.  01:59B2                      ; output: B=slot that contains SCC (=255 if no SCC found)
       7.  01:59B2                      
       8.  01:59B2                      ; enaslt:          equ #0024
       9.  01:59B2                      ; exptbl:          equ #fcc1
      10.  01:59B2                      ; slttbl:          equ #fcc5
      11.  01:59B2                      
      12.  01:59B2                      
      13.  01:59B2                      
      14.  01:59B2                      
      15.  01:59B2                      begin:
      16.  01:59B2  (C000)              	MAP #c000
      17.  01:59B2  DB A8               	in a,(#a8)        ; read prim. slotregister
      18.  01:59B4  1F                  	rra
      19.  01:59B5  1F                  	rra
      20.  01:59B6  1F                  	rra
      21.  01:59B7  1F                  	rra
      22.  01:59B8  E6 03               	and %00000011     ; A = prim.slot page 2
      23.  01:59BA  06 00               	ld b,0
      24.  01:59BC  4F                  	ld c,a
      25.  01:59BD  21 C1 FC            	ld hl,exptbl
      26.  01:59C0  09                  	add hl,bc
      27.  01:59C1  CB 7E               	bit 7,(hl)        ; page 2-slot expanded ?
      28.  01:59C3  28 0C               	jr z,scctest
      29.  01:59C5  21 C5 FC            	ld hl,slttbl
      30.  01:59C8  09                  	add hl,bc
      31.  01:59C9  7E                  	ld a,(hl)         ; A = sec.sel.reg. of page 2-slot
      32.  01:59CA  1F                  	rra
      33.  01:59CB  1F                  	rra
      34.  01:59CC  E6 0C               	and %00001100     ; bit 1/2 = sec.slot page 2
      35.  01:59CE  B1                  	or c
      36.  01:59CF  CB FF               	set 7,a           ; compose sec.slot-code
      37.  01:59D1                      scctest:
      38.  01:59D1  F5                  	push af           ; save page 2-slot on the stack
      39.  01:59D2  3A C1 FC            	ld a,(exptbl)     ; 1st slot to test
      40.  01:59D5                      
      41.  01:59D5                      testslot:        
      42.  01:59D5  F5                  	push af           ; save test-slot on the stack
      43.  01:59D6  26 80               	ld h,#80
      44.  01:59D8  CD 24 00            	call enaslt       ; switch slot-to-test in 8000-bfffh
      45.  01:59DB  21 00 90            	ld hl,#9000
      46.  01:59DE  46                  	ld b,(hl)         ; save contents of address 9000h
      47.  01:59DF  36 3F               	ld (hl),#3f       ; activate SCC (if present)
      48.  01:59E1                      
      49.  01:59E1  AF                  	xor	a
      50.  01:59E2  32 FE BF            	ld (0xbffe),a	  ; scc+ patch for bluemsx
      51.  01:59E5                      
      52.  01:59E5  26 9C               	ld h,#9c          ; address of SCC-register mirrors
      53.  01:59E7  11 00 98            	ld de,#9800       ; 9800h = address of SCC-registers
      54.  01:59EA                      testreg:         
      55.  01:59EA  1A                  	ld a,(de)
      56.  01:59EB  4F                  	ld c,a            ; save contents of address 98xxh
      57.  01:59EC  7E                  	ld a,(hl)         ; read byte from address 9cxxh
      58.  01:59ED  2F                  	cpl               ; and invert it
      59.  01:59EE  12                  	ld (de),a         ; write inverted byte to 98xxh
      60.  01:59EF  BE                  	cp (hl)           ; same value on 9cxxh ?
      61.  01:59F0  79                  	ld a,c
      62.  01:59F1  12                  	ld (de),a         ; restore value on 98xxh
      63.  01:59F2  20 0D               	jr nz,nextslot    ; unequal -> no SCC -> continue search
      64.  01:59F4  23                  	inc hl
      65.  01:59F5  13                  	inc de            ; next test-addresses
      66.  01:59F6  CB 7D               	bit 7,l           ; 128 addresses (registers) tested ?
      67.  01:59F8  28 F0               	jr z,testreg      ; no -> repeat mirror-test
      68.  01:59FA  78                  	ld a,b
      69.  01:59FB  32 00 90            	ld (#9000),a      ; restore value on 9000h
      70.  01:59FE  C1                  	pop bc            ; retrieve slotcode (=SCC-slot) from stack
      71.  01:59FF  18 24               	jr done           ; SCC found, restore page 2-slot & return
      72.  01:5A01                      
      73.  01:5A01                      nextslot:
      74.  01:5A01  78                  	ld a,b
      75.  01:5A02  32 00 90            	ld (#9000),a      ; restore value on 9000h
      76.  01:5A05  C1                  	pop bc            ; retrieve slotcode from stack
      77.  01:5A06  CB 78               	bit 7,b           ; test-slot = sec.slot ?
      78.  01:5A08  28 07               	jr z,nextprim
      79.  01:5A0A  78                  	ld a,b
      80.  01:5A0B  C6 04               	add a,4           ; increase sec.slotnumber
      81.  01:5A0D  CB 67               	bit 4,a           ; sec.slot = 4 ?
      82.  01:5A0F  28 C4               	jr z,testslot
      83.  01:5A11                      nextprim:
      84.  01:5A11  78                  	ld a,b
      85.  01:5A12  E6 03               	and %00000011
      86.  01:5A14  FE 03               	cp 3              ; prim.slot = 3 ?
      87.  01:5A16  28 0B               	jr z,noscc
      88.  01:5A18  3C                  	inc a             ; increase prim.slotnumber
      89.  01:5A19  16 00               	ld d,0
      90.  01:5A1B  5F                  	ld e,a
      91.  01:5A1C  21 C1 FC            	ld hl,exptbl
      92.  01:5A1F  19                  	add hl,de
      93.  01:5A20  B6                  	or (hl)           ; combine slot-expansion with slotcode
      94.  01:5A21  18 B2               	jr testslot
      95.  01:5A23                      
      96.  01:5A23                      noscc:           
      97.  01:5A23  06 FF               	ld b,255          ; code for no SCC
      98.  01:5A25                      done:            
      99.  01:5A25  F1                  	pop af            ; retrieve page 2-slot from stack
     100.  01:5A26  C5                  	push bc
     101.  01:5A27  26 80               	ld h,#80
     102.  01:5A29  CD 24 00            	call enaslt       ; restore original page 2-slot
     103.  01:5A2C  C1                  	pop bc
     104.  01:5A2D  FB                  	ei
     105.  01:5A2E  C9                  	ret
     106.  01:5A2F                      end:
     107.  01:5A2F  (0000)              	endmap				 
     108.  01:5A2F                      ; -------------------------------------------------------------
     109.  01:5A2F                      
     110.  01:5A2F                      
     111.  01:5A2F                      ; ====================
     112.  01:5A2F                      ;    Initialization
     113.  01:5A2F                      ; ====================
     114.  01:5A2F                      SCCINIT
     115.  01:5A2F  21 B2 59            	ld	hl,begin
     116.  01:5A32  11 00 C0            	ld	de,0C000H
     117.  01:5A35  01 7E 00            	ld	bc,end-begin+1
     118.  01:5A38  ED B0               	ldir
     119.  01:5A3A  CD 00 C0            	call	0C000H
     120.  01:5A3D  78                  	ld	a,b
     121.  01:5A3E  32 C7 FF            	ld	(SCC),a
     122.  01:5A41  C9                  	ret
     123.  01:5A42                      
     124.  01:5A42                      ; SLOT            .db     0
     125.  01:5A42                      ; PAGE1RAM        .db     0
     126.  01:5A42                      ; RAMSLOT         .db     0
     127.  01:5A42                      
     128.  01:5A42                      ; SCC             .db     0
     129.  01:5A42                      ; SUB             .db     0FFH
     130.  01:5A42                      
     227   01:5A42                      
     228   01:5A42                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     229   01:5A42                      	include show_instructions.asm
       1.  01:5A42                      
       2.  01:5A42                      	
       3.  01:5A42                      instruct:
       4.  01:5A42                      		db	0x99+' ',0x9A+' '," Avoid barriers and other",13
       4.  01:5A42  B9 BA 20 41 76 6F 69 64 20 62 61 72 72 69 65 72 
       4.  01:5A52  73 20 61 6E 64 20 6F 74 68 65 72 0D 
       5.  01:5A5E                      		db	0x9B+' ',0x9C+' '," tall obstacles",13
       5.  01:5A5E  BB BC 20 74 61 6C 6C 20 6F 62 73 74 61 63 6C 65 
       5.  01:5A6E  73 0D 
       6.  01:5A70  BD BE 0D            		db	0x9D+' ',0x9E+' ',13
       7.  01:5A73                      		db	0x84+' ',0x86+' '," Press up/down + X to spin",13
       7.  01:5A73  A4 A6 20 50 72 65 73 73 20 75 70 2F 64 6F 77 6E 
       7.  01:5A83  20 2B 20 58 20 74 6F 20 73 70 69 6E 0D 
       8.  01:5A90                      		db	0x85+' ',0x87+' '," and pass between barriers",13
       8.  01:5A90  A5 A7 20 61 6E 64 20 70 61 73 73 20 62 65 74 77 
       8.  01:5AA0  65 65 6E 20 62 61 72 72 69 65 72 73 0D 
       9.  01:5AAD                      		db	0x80+' ',0x82+' '," Use looping to avoid",13
       9.  01:5AAD  A0 A2 20 55 73 65 20 6C 6F 6F 70 69 6E 67 20 74 
       9.  01:5ABD  6F 20 61 76 6F 69 64 0D 
      10.  01:5AC5                      		db	0x81+' ',0x83+' '," enemy bullets",13
      10.  01:5AC5  A1 A3 20 65 6E 65 6D 79 20 62 75 6C 6C 65 74 73 
      10.  01:5AD5  0D 
      11.  01:5AD6  A8 A9 A8 0D         		db	0x88+' ',0x89+' ',0x88+' ',13
      12.  01:5ADA                      		db	0x8B+' ',0x8C+' ',0x8B+' '," Destroy ground targets",13
      12.  01:5ADA  AB AC AB 20 44 65 73 74 72 6F 79 20 67 72 6F 75 
      12.  01:5AEA  6E 64 20 74 61 72 67 65 74 73 0D 
      13.  01:5AF5                      		db	0x8D+' ',0x8E+' ',0x8F+' '," to weaken Dreadnought's",13	
      13.  01:5AF5  AD AE AF 20 74 6F 20 77 65 61 6B 65 6E 20 44 72 
      13.  01:5B05  65 61 64 6E 6F 75 67 68 74 27 73 0D 
      14.  01:5B11                      		db	0x90+' ',0x91+' ',0x92+' '," defense",13	
      14.  01:5B11  B0 B1 B2 20 64 65 66 65 6E 73 65 0D 
      15.  01:5B1D  A8 B3 B4 0D         		db	0x88+' ',0x93+' ',0x94+' ',13
      16.  01:5B21  A8 B5 B6 0D         		db	0x88+' ',0x95+' ',0x96+' ',13
      17.  01:5B25                      		db	"Land on the main runway of",13	
      17.  01:5B25  4C 61 6E 64 20 6F 6E 20 74 68 65 20 6D 61 69 6E 
      17.  01:5B35  20 72 75 6E 77 61 79 20 6F 66 0D 
      18.  01:5B40                      		db	"each Dreadnought and activate",13
      18.  01:5B40  65 61 63 68 20 44 72 65 61 64 6E 6F 75 67 68 74 
      18.  01:5B50  20 61 6E 64 20 61 63 74 69 76 61 74 65 0D 
      19.  01:5B5E                      		db	"its self destruction system",13	
      19.  01:5B5E  69 74 73 20 73 65 6C 66 20 64 65 73 74 72 75 63 
      19.  01:5B6E  74 69 6F 6E 20 73 79 73 74 65 6D 0D 
      20.  01:5B7A                      		
      21.  01:5B7A                      		
      22.  01:5B7A                      show_instructions:
      23.  01:5B7A  CD 3E 24            	call cls
      24.  01:5B7D  CD A0 5C            	call _color_set
      25.  01:5B80  CD CA 5C            	call _destr_set
      26.  01:5B83                      	
      27.  01:5B83  11 42 5A            	ld  de,instruct
      28.  01:5B86  21 22 18            	ld	hl,0x1800+32*1+2
      29.  01:5B89  CD 2E 24            	call	prstr
      30.  01:5B8C  21 42 18            	ld	hl,0x1800+32*2+2
      31.  01:5B8F  CD 2E 24            	call	prstr
      32.  01:5B92  21 62 18            	ld	hl,0x1800+32*3+2
      33.  01:5B95  CD 2E 24            	call	prstr
      34.  01:5B98                      	
      35.  01:5B98  21 A2 18            	ld	hl,0x1800+32*5+2
      36.  01:5B9B  CD 2E 24            	call	prstr
      37.  01:5B9E  21 C2 18            	ld	hl,0x1800+32*6+2
      38.  01:5BA1  CD 2E 24            	call	prstr
      39.  01:5BA4                      
      40.  01:5BA4  21 02 19            	ld	hl,0x1800+32*8+2
      41.  01:5BA7  CD 2E 24            	call	prstr
      42.  01:5BAA  21 22 19            	ld	hl,0x1800+32*9+2
      43.  01:5BAD  CD 2E 24            	call	prstr
      44.  01:5BB0                      	
      45.  01:5BB0  21 62 19            	ld	hl,0x1800+32*11+2
      46.  01:5BB3  CD 2E 24            	call	prstr
      47.  01:5BB6  21 82 19            	ld	hl,0x1800+32*12+2
      48.  01:5BB9  CD 2E 24            	call	prstr
      49.  01:5BBC  21 A2 19            	ld	hl,0x1800+32*13+2
      50.  01:5BBF  CD 2E 24            	call	prstr
      51.  01:5BC2  21 C2 19            	ld	hl,0x1800+32*14+2
      52.  01:5BC5  CD 2E 24            	call	prstr
      53.  01:5BC8  21 E2 19            	ld	hl,0x1800+32*15+2
      54.  01:5BCB  CD 2E 24            	call	prstr
      55.  01:5BCE  21 02 1A            	ld	hl,0x1800+32*16+2
      56.  01:5BD1  CD 2E 24            	call	prstr
      57.  01:5BD4                      
      58.  01:5BD4  21 42 1A            	ld	hl,0x1800+32*18+2
      59.  01:5BD7  CD 2E 24            	call	prstr
      60.  01:5BDA  21 62 1A            	ld	hl,0x1800+32*19+2
      61.  01:5BDD  CD 2E 24            	call	prstr
      62.  01:5BE0  21 82 1A            	ld	hl,0x1800+32*20+2
      63.  01:5BE3  CD 2E 24            	call	prstr
      64.  01:5BE6                      		
      65.  01:5BE6  11 C8 1A            	ld	de,0x1800+32*22+8
      66.  01:5BE9  CD 3B 3F            	call	setwrtvram
      67.  01:5BEC  01 98 10            	ld	bc,0x1098
      68.  01:5BEF  21 9C 5E            1:	ld	hl,runway_map
      69.  01:5BF2  ED A3               	outi
      70.  01:5BF4  00                  	nop
      71.  01:5BF5  00                  	nop
      72.  01:5BF6  ED A3               	outi
      73.  01:5BF8  20 F5               	jr nz,1b
      74.  01:5BFA  21 9C 5E            	ld	hl,runway_map
      75.  01:5BFD  ED A3               	outi
      76.  01:5BFF                      	
      77.  01:5BFF  11 E8 1A            	ld	de,0x1800+32*23+8
      78.  01:5C02  CD 3B 3F            	call	setwrtvram
      79.  01:5C05  01 98 10            	ld	bc,0x1098
      80.  01:5C08  21 9E 5E            1:	ld	hl,runway_map+2
      81.  01:5C0B  ED A3               	outi
      82.  01:5C0D  00                  	nop
      83.  01:5C0E  00                  	nop
      84.  01:5C0F  ED A3               	outi
      85.  01:5C11  20 F5               	jr nz,1b
      86.  01:5C13  21 9E 5E            	ld	hl,runway_map+2
      87.  01:5C16  ED A3               	outi
      88.  01:5C18                      		
      89.  01:5C18  FB                  	ei
      90.  01:5C19                      	
      91.  01:5C19                      3:
      92.  01:5C19  AF                  	xor	a
      93.  01:5C1A  32 25 EC            	ld	(aniframe),a
      94.  01:5C1D                      	
      95.  01:5C1D  76                  2:	halt	
      96.  01:5C1E  CD 3B 5C            	call plot_spt_char_anim
      97.  01:5C21  06 0A               	ld b,10
      98.  01:5C23  76                  1:	halt
      99.  01:5C24  10 FD               	djnz 1b
     100.  01:5C26                      	
     101.  01:5C26  3A 25 EC            	ld	a,(aniframe)
     102.  01:5C29  3C                  	inc	a
     103.  01:5C2A  32 25 EC            	ld	(aniframe),a
     104.  01:5C2D  FE 20               	cp 32
     105.  01:5C2F  28 E8               	jr z,3b
     106.  01:5C31                      		
     107.  01:5C31  CD 96 35            	call	joy_read
     108.  01:5C34  E6 13               	and	0x13		; up/down/fire
     109.  01:5C36  C2 00 37            	jp	nz,return
     110.  01:5C39                      	
     111.  01:5C39  18 E2               	jr 2b
     112.  01:5C3B                      	
     113.  01:5C3B                      	
     114.  01:5C3B                      plot_spt_char_anim:
     115.  01:5C3B                      	setvdpwvram 0x0400
     115.  01:5C3B  F3                >  di
     115.  01:5C3C                    >  _setvdpwvram value
     115.  01:5C3C                    >  if (value & 0xFF)
     115.  01:5C3C                    ~   ld a,value & 0xFF
     115.  01:5C3C                    ~  else
     115.  01:5C3C  AF                >   xor a
     115.  01:5C3D                    >  endif
     115.  01:5C3D  D3 99             >  out (0x99),a
     115.  01:5C3F  3E 44             >  ld a,0x40 + (value/256)
     115.  01:5C41  D3 99             >  out (0x99),a
     115.  01:5C43  FB                >  ei
     116.  01:5C44  3A 25 EC            	ld	a,(aniframe)
     117.  01:5C47  E6 07               	and 7
     118.  01:5C49  CD 82 5C            	call	1f
     119.  01:5C4C                      	setvdpwvram 0x0C00
     119.  01:5C4C  F3                >  di
     119.  01:5C4D                    >  _setvdpwvram value
     119.  01:5C4D                    >  if (value & 0xFF)
     119.  01:5C4D                    ~   ld a,value & 0xFF
     119.  01:5C4D                    ~  else
     119.  01:5C4D  AF                >   xor a
     119.  01:5C4E                    >  endif
     119.  01:5C4E  D3 99             >  out (0x99),a
     119.  01:5C50  3E 4C             >  ld a,0x40 + (value/256)
     119.  01:5C52  D3 99             >  out (0x99),a
     119.  01:5C54  FB                >  ei
     120.  01:5C55  3A 25 EC            	ld	a,(aniframe)
     121.  01:5C58  E6 07               	and 7
     122.  01:5C5A  CD 82 5C            	call	1f
     123.  01:5C5D                      	; setvdpwvram 0x1400
     124.  01:5C5D                      	; ld	a,(aniframe)
     125.  01:5C5D                      	; and 7
     126.  01:5C5D                      	; call	1f
     127.  01:5C5D                      	
     128.  01:5C5D                      	setvdpwvram 0x0420
     128.  01:5C5D  F3                >  di
     128.  01:5C5E                    >  _setvdpwvram value
     128.  01:5C5E                    >  if (value & 0xFF)
     128.  01:5C5E  3E 20             >   ld a,value & 0xFF
     128.  01:5C60                    >  else
     128.  01:5C60                    ~   xor a
     128.  01:5C60                    ~  endif
     128.  01:5C60  D3 99             >  out (0x99),a
     128.  01:5C62  3E 44             >  ld a,0x40 + (value/256)
     128.  01:5C64  D3 99             >  out (0x99),a
     128.  01:5C66  FB                >  ei
     129.  01:5C67  3A 25 EC            	ld	a,(aniframe)
     130.  01:5C6A  E6 0F               	and 15
     131.  01:5C6C  C6 20               	add	a,32
     132.  01:5C6E  CD 82 5C            	call	1f
     133.  01:5C71                      	setvdpwvram 0x0C20
     133.  01:5C71  F3                >  di
     133.  01:5C72                    >  _setvdpwvram value
     133.  01:5C72                    >  if (value & 0xFF)
     133.  01:5C72  3E 20             >   ld a,value & 0xFF
     133.  01:5C74                    >  else
     133.  01:5C74                    ~   xor a
     133.  01:5C74                    ~  endif
     133.  01:5C74  D3 99             >  out (0x99),a
     133.  01:5C76  3E 4C             >  ld a,0x40 + (value/256)
     133.  01:5C78  D3 99             >  out (0x99),a
     133.  01:5C7A  FB                >  ei
     134.  01:5C7B  3A 25 EC            	ld	a,(aniframe)
     135.  01:5C7E  E6 0F               	and 15
     136.  01:5C80  C6 20               	add	a,32
     137.  01:5C82                      	; call	1f
     138.  01:5C82                      	; setvdpwvram 0x1420
     139.  01:5C82                      	; ld	a,(aniframe)
     140.  01:5C82                      	; and 15
     141.  01:5C82                      	; add	a,32
     142.  01:5C82                      	; call	1f
     143.  01:5C82                      	; ret
     144.  01:5C82                      	
     145.  01:5C82  21 FC 0D            1:	ld	hl,ms_ani
     146.  01:5C85  4F                  	ld	c,a
     147.  01:5C86  06 00               	ld	b,0
     148.  01:5C88  09                  	add	hl,bc
     149.  01:5C89  6E                  	ld	l,(hl)
     150.  01:5C8A  60                  	ld	h,b
     151.  01:5C8B  29                  	add hl,hl
     152.  01:5C8C  29                  	add hl,hl
     153.  01:5C8D  29                  	add hl,hl
     154.  01:5C8E  29                  	add hl,hl
     155.  01:5C8F  29                  	add hl,hl
     156.  01:5C90  5D                  	ld	e,l
     157.  01:5C91  54                  	ld	d,h
     158.  01:5C92  29                  	add	hl,hl
     159.  01:5C93  19                  	add	hl,de
     160.  01:5C94  11 4C 0E            	ld	de,ms_spt
     161.  01:5C97  19                  	add hl,de
     162.  01:5C98  01 98 20            	ld	bc,0x2098
     163.  01:5C9B  ED A3               1:	outi
     164.  01:5C9D  20 FC               	jr nz,1b
     165.  01:5C9F  C9                  	ret
     166.  01:5CA0                      
     167.  01:5CA0                      ; set colours
     168.  01:5CA0                      _color_set
     169.  01:5CA0                      	setvdpwvram (0x2000+128*8)
     169.  01:5CA0  F3                >  di
     169.  01:5CA1                    >  _setvdpwvram value
     169.  01:5CA1                    >  if (value & 0xFF)
     169.  01:5CA1                    ~   ld a,value & 0xFF
     169.  01:5CA1                    ~  else
     169.  01:5CA1  AF                >   xor a
     169.  01:5CA2                    >  endif
     169.  01:5CA2  D3 99             >  out (0x99),a
     169.  01:5CA4  3E 64             >  ld a,0x40 + (value/256)
     169.  01:5CA6  D3 99             >  out (0x99),a
     169.  01:5CA8  FB                >  ei
     170.  01:5CA9  CD C1 5C            	call 1f
     171.  01:5CAC                      	setvdpwvram (0x2800+128*8)
     171.  01:5CAC  F3                >  di
     171.  01:5CAD                    >  _setvdpwvram value
     171.  01:5CAD                    >  if (value & 0xFF)
     171.  01:5CAD                    ~   ld a,value & 0xFF
     171.  01:5CAD                    ~  else
     171.  01:5CAD  AF                >   xor a
     171.  01:5CAE                    >  endif
     171.  01:5CAE  D3 99             >  out (0x99),a
     171.  01:5CB0  3E 6C             >  ld a,0x40 + (value/256)
     171.  01:5CB2  D3 99             >  out (0x99),a
     171.  01:5CB4  FB                >  ei
     172.  01:5CB5  CD C1 5C            	call 1f
     173.  01:5CB8                      	setvdpwvram (0x3000+128*8)
     173.  01:5CB8  F3                >  di
     173.  01:5CB9                    >  _setvdpwvram value
     173.  01:5CB9                    >  if (value & 0xFF)
     173.  01:5CB9                    ~   ld a,value & 0xFF
     173.  01:5CB9                    ~  else
     173.  01:5CB9  AF                >   xor a
     173.  01:5CBA                    >  endif
     173.  01:5CBA  D3 99             >  out (0x99),a
     173.  01:5CBC  3E 74             >  ld a,0x40 + (value/256)
     173.  01:5CBE  D3 99             >  out (0x99),a
     173.  01:5CC0  FB                >  ei
     174.  01:5CC1  06 40               1:	ld	b,8*8
     175.  01:5CC3  3E F1               1:	ld	a,0xF1
     176.  01:5CC5  D3 98               	out	(0x98),a
     177.  01:5CC7  10 FA               	djnz	1b
     178.  01:5CC9  C9                  	ret
     179.  01:5CCA                      
     180.  01:5CCA                      _destr_set:
     181.  01:5CCA  76                  	halt
     182.  01:5CCB                      	setvdpwvram (0x0000+136*8)
     182.  01:5CCB  F3                >  di
     182.  01:5CCC                    >  _setvdpwvram value
     182.  01:5CCC                    >  if (value & 0xFF)
     182.  01:5CCC  3E 40             >   ld a,value & 0xFF
     182.  01:5CCE                    >  else
     182.  01:5CCE                    ~   xor a
     182.  01:5CCE                    ~  endif
     182.  01:5CCE  D3 99             >  out (0x99),a
     182.  01:5CD0  3E 44             >  ld a,0x40 + (value/256)
     182.  01:5CD2  D3 99             >  out (0x99),a
     182.  01:5CD4  FB                >  ei
     183.  01:5CD5  CD 21 5D            	call 2f
     184.  01:5CD8                      	setvdpwvram (0x0800+136*8)
     184.  01:5CD8  F3                >  di
     184.  01:5CD9                    >  _setvdpwvram value
     184.  01:5CD9                    >  if (value & 0xFF)
     184.  01:5CD9  3E 40             >   ld a,value & 0xFF
     184.  01:5CDB                    >  else
     184.  01:5CDB                    ~   xor a
     184.  01:5CDB                    ~  endif
     184.  01:5CDB  D3 99             >  out (0x99),a
     184.  01:5CDD  3E 4C             >  ld a,0x40 + (value/256)
     184.  01:5CDF  D3 99             >  out (0x99),a
     184.  01:5CE1  FB                >  ei
     185.  01:5CE2  CD 21 5D            	call 2f
     186.  01:5CE5                      	setvdpwvram (0x1000+136*8)
     186.  01:5CE5  F3                >  di
     186.  01:5CE6                    >  _setvdpwvram value
     186.  01:5CE6                    >  if (value & 0xFF)
     186.  01:5CE6  3E 40             >   ld a,value & 0xFF
     186.  01:5CE8                    >  else
     186.  01:5CE8                    ~   xor a
     186.  01:5CE8                    ~  endif
     186.  01:5CE8  D3 99             >  out (0x99),a
     186.  01:5CEA  3E 54             >  ld a,0x40 + (value/256)
     186.  01:5CEC  D3 99             >  out (0x99),a
     186.  01:5CEE  FB                >  ei
     187.  01:5CEF  CD 21 5D            	call 2f
     188.  01:5CF2                      	
     189.  01:5CF2                      	setvdpwvram (0x2000+136*8)
     189.  01:5CF2  F3                >  di
     189.  01:5CF3                    >  _setvdpwvram value
     189.  01:5CF3                    >  if (value & 0xFF)
     189.  01:5CF3  3E 40             >   ld a,value & 0xFF
     189.  01:5CF5                    >  else
     189.  01:5CF5                    ~   xor a
     189.  01:5CF5                    ~  endif
     189.  01:5CF5  D3 99             >  out (0x99),a
     189.  01:5CF7  3E 64             >  ld a,0x40 + (value/256)
     189.  01:5CF9  D3 99             >  out (0x99),a
     189.  01:5CFB  FB                >  ei
     190.  01:5CFC  CD 16 5D            	call 1f
     191.  01:5CFF                      	setvdpwvram (0x2800+136*8)
     191.  01:5CFF  F3                >  di
     191.  01:5D00                    >  _setvdpwvram value
     191.  01:5D00                    >  if (value & 0xFF)
     191.  01:5D00  3E 40             >   ld a,value & 0xFF
     191.  01:5D02                    >  else
     191.  01:5D02                    ~   xor a
     191.  01:5D02                    ~  endif
     191.  01:5D02  D3 99             >  out (0x99),a
     191.  01:5D04  3E 6C             >  ld a,0x40 + (value/256)
     191.  01:5D06  D3 99             >  out (0x99),a
     191.  01:5D08  FB                >  ei
     192.  01:5D09  CD 16 5D            	call 1f
     193.  01:5D0C                      	setvdpwvram (0x3000+136*8)
     193.  01:5D0C  F3                >  di
     193.  01:5D0D                    >  _setvdpwvram value
     193.  01:5D0D                    >  if (value & 0xFF)
     193.  01:5D0D  3E 40             >   ld a,value & 0xFF
     193.  01:5D0F                    >  else
     193.  01:5D0F                    ~   xor a
     193.  01:5D0F                    ~  endif
     193.  01:5D0F  D3 99             >  out (0x99),a
     193.  01:5D11  3E 74             >  ld a,0x40 + (value/256)
     193.  01:5D13  D3 99             >  out (0x99),a
     193.  01:5D15  FB                >  ei
     194.  01:5D16                      1:
     195.  01:5D16  21 E4 5D            	ld	hl,destruct_colors
     196.  01:5D19  01 98 B8            	ld	bc,23*8*256+0x98
     197.  01:5D1C  ED A3               11:	outi
     198.  01:5D1E  20 FC               	jr	nz,11b
     199.  01:5D20  C9                  	ret
     200.  01:5D21                      2:
     201.  01:5D21  21 2C 5D            	ld	hl,destruct_tiles
     202.  01:5D24  01 98 B8            	ld	bc,23*8*256+0x98
     203.  01:5D27  ED A3               11:	outi
     204.  01:5D29  20 FC               	jr	nz,11b
     205.  01:5D2B  C9                  	ret
     206.  01:5D2C                      	
     207.  01:5D2C                      	
     208.  01:5D2C                      destruct_tiles:
     209.  01:5D2C  (0078)              	incbin	destr_shape.bin
     210.  01:5DA4                      runway_shape:
     211.  01:5DA4                      	db 0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x01
     211.  01:5DA4  00 00 00 00 00 C0 07 01 
     212.  01:5DAC                      	db 0x01,0x07,0xC0,0x00,0x00,0x00,0x00,0xFF 
     212.  01:5DAC  01 07 C0 00 00 00 00 FF 
     213.  01:5DB4                      barrier_shape:
     214.  01:5DB4                      	db	0x80,0x40,0x40,0x40,0x40,0x40,0x40,0x40    ;
     214.  01:5DB4  80 40 40 40 40 40 40 40 
     215.  01:5DBC                      	db	0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02    ;
     215.  01:5DBC  01 02 02 02 02 02 02 02 
     216.  01:5DC4                      	db	0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40    ;
     216.  01:5DC4  40 40 40 40 40 40 40 40 
     217.  01:5DCC                      	db	0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02    ;
     217.  01:5DCC  02 02 02 02 02 02 02 02 
     218.  01:5DD4                      	db	0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x80    ;
     218.  01:5DD4  40 40 40 40 40 40 40 80 
     219.  01:5DDC                      	db	0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x01    ;
     219.  01:5DDC  02 02 02 02 02 02 02 01 
     220.  01:5DE4                      
     221.  01:5DE4                      destruct_colors:
     222.  01:5DE4  (0078)              	incbin	destr_col.bin
     223.  01:5E5C                      runway_col:   
     224.  01:5E5C                      	db 0x55,0x44,0x44,0x44,0x44,0xA4,0x4A,0x4A
     224.  01:5E5C  55 44 44 44 44 A4 4A 4A 
     225.  01:5E64                      	db 0x4A,0x4A,0xA4,0x44,0x44,0x44,0x44,0x11 
     225.  01:5E64  4A 4A A4 44 44 44 44 11 
     226.  01:5E6C                      barrier_col:
     227.  01:5E6C                      	db 0x4C,0xC4,0x4C,0x4C,0x4C,0x4C,0x4C,0x4C    
     227.  01:5E6C  4C C4 4C 4C 4C 4C 4C 4C 
     228.  01:5E74                      	db 0x1C,0xC1,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C    
     228.  01:5E74  1C C1 1C 1C 1C 1C 1C 1C 
     229.  01:5E7C                      	db 0x4C,0x4C,0x4C,0x4C,0x4C,0x4C,0x4C,0x4C    
     229.  01:5E7C  4C 4C 4C 4C 4C 4C 4C 4C 
     230.  01:5E84                      	db 0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C    
     230.  01:5E84  1C 1C 1C 1C 1C 1C 1C 1C 
     231.  01:5E8C                      	db 0x4C,0x4C,0x4C,0x4C,0x4C,0x4C,0xC4,0x4C    
     231.  01:5E8C  4C 4C 4C 4C 4C 4C C4 4C 
     232.  01:5E94                      	db 0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0xC1,0x1C    
     232.  01:5E94  1C 1C 1C 1C 1C 1C C1 1C 
     233.  01:5E9C                      
     234.  01:5E9C                      	
     235.  01:5E9C                      ; destruct_map
     236.  01:5E9C                      	; db 0x00,0x01,0x00
     237.  01:5E9C                      	; db 0x03,0x04,0x03
     238.  01:5E9C                      	; db 0x05,0x06,0x07
     239.  01:5E9C                      	; db 0x08,0x09,0x0A
     240.  01:5E9C                      	; db 0x00,0x0B,0x0C
     241.  01:5E9C                      	; db 0x00,0x0D,0x0E
     242.  01:5E9C                      runway_map:
     243.  01:5E9C  8D 97               	db	0x8D,0x97
     244.  01:5E9E  90 98               	db	0x90,0x98
     245.  01:5EA0                      	
     230   01:5EA0                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     231   01:5EA0                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     232   01:5EA0                      	include attract_mode.asm
       1.  01:5EA0                      
       2.  01:5EA0                      attract_mode:
       3.  01:5EA0                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       4.  01:5EA0                      	; game start
       5.  01:5EA0                      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       6.  01:5EA0  76                  	halt
       7.  01:5EA1  F3                  	di
       8.  01:5EA2  CD 3E 24            	call 	cls
       9.  01:5EA5  CD FC 3E            	call	disscr
      10.  01:5EA8  CD 1F 40            	call	sprite_init
      11.  01:5EAB                      	
      12.  01:5EAB  CD 15 49            	call 	ayFX_SETUP
      13.  01:5EAE                      	
      14.  01:5EAE                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      15.  01:5EAE                      
      16.  01:5EAE  01 00 00            	ld	bc,0						; show score on screen 
      17.  01:5EB1  CD 5D 65            	call	add_bc_score_bin
      18.  01:5EB4  0E 00               	ld	c,0							; show lives on screen 
      19.  01:5EB6  CD 9B 65            	call	add_c_lives_bin
      20.  01:5EB9                      
      21.  01:5EB9  AF                  	xor	a
      22.  01:5EBA  32 FC ED            	ld	(already_dead),a	; reset at level start, set after you die
      23.  01:5EBD  3C                  	inc	a
      24.  01:5EBE  32 F4 ED            	ld	(next_level),a
      25.  01:5EC1                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      26.  01:5EC1                      
      27.  01:5EC1                      .restart:
      28.  01:5EC1  21 00 00            	ld	hl,0
      29.  01:5EC4  22 EE ED            	ld	(xmap),hl
      30.  01:5EC7  CD 23 49            	call 	ayFX_END
      31.  01:5ECA  CD 62 42            	call	PT3_MUTE
      32.  01:5ECD  CD EF 78            	call	intro_anim
      33.  01:5ED0                      
      34.  01:5ED0  3A F3 ED            	ld	a,(cur_level)
      35.  01:5ED3  3D                  	dec	a
      36.  01:5ED4  6F                  	ld	l,a
      37.  01:5ED5  26 00               	ld	h,0
      38.  01:5ED7  5D                  	ld	e,l
      39.  01:5ED8  54                  	ld	d,h
      40.  01:5ED9                      
      41.  01:5ED9  29 29 29            [3]	add	hl,hl
      42.  01:5EDC  19                  	add	hl,de
      43.  01:5EDD                      	
      44.  01:5EDD  11 37 66            	ld	de,levelnames
      45.  01:5EE0  19                  	add	hl,de
      46.  01:5EE1  11 00 1F            	ld	de,0x1C00+8*3*32
      47.  01:5EE4  CD BE 66            	call	print_strf
      48.  01:5EE7                      
      49.  01:5EE7  AF                  	xor a
      50.  01:5EE8  32 25 EC            	ld	(aniframe),a
      51.  01:5EEB  32 28 EC            	ld	(anispeed),a
      52.  01:5EEE  32 27 EC            	ld	(ms_state),a
      53.  01:5EF1  3E 08               	ld	a,8
      54.  01:5EF3  32 ED ED            	ld	(dxmap),a
      55.  01:5EF6  32 26 EC            	ld	(old_aniframe),a		; old_aniframe!=aniframe
      56.  01:5EF9                      	
      57.  01:5EF9  21 00 00            	ld	hl,0
      58.  01:5EFC  22 EE ED            	ld	(xmap),hl
      59.  01:5EFF  01 78 00            	ld	bc,xship_rel
      60.  01:5F02  09                  	add hl,bc
      61.  01:5F03  22 F1 ED            	ld	(xship),hl
      62.  01:5F06  3E 78               	ld	a,64+64-8
      63.  01:5F08  32 F0 ED            	ld	(yship),a
      64.  01:5F0B                      
      65.  01:5F0B  3E 01               	ld	a,1
      66.  01:5F0D  32 FD ED            	ld	(god_mode),a
      67.  01:5F10                      	
      68.  01:5F10  CD 15 49            	call	ayFX_SETUP	
      69.  01:5F13  AF                  	xor	a
      70.  01:5F14  32 FE ED            	ld	(halt_game),a
      71.  01:5F17  32 FF ED            	ld	(halt_gamef1),a
      72.  01:5F1A  32 9E FC            	ld	(JIFFY),a
      73.  01:5F1D                      
      74.  01:5F1D                      .main_loop:
      75.  01:5F1D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      76.  01:5F1D                      ; place MS in the SAT and test for collision
      77.  01:5F1D  CD D4 6E            	call	put_ms_sprt
      78.  01:5F20                      
      79.  01:5F20                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      80.  01:5F20                      ; run NCPS FSM
      81.  01:5F20  CD DF 4F            	call	npc_loop			; manage active enemies
      82.  01:5F23  CD BD 4A            	call	wave_timer			; activate new enemies
      83.  01:5F26                      
      84.  01:5F26  CD 46 55            	call	enemy_bullet_loop	; manage enemy bullets
      85.  01:5F29                      	
      86.  01:5F29                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      87.  01:5F29                      ; run MS bullets FSM
      88.  01:5F29  CD 96 6D            	call	bullet_loop
      89.  01:5F2C                      
      90.  01:5F2C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      91.  01:5F2C                      ; place NPCS sprites in the SAT in RAM
      92.  01:5F2C  CD A2 7A            	call	plot_enemy
      93.  01:5F2F                      
      94.  01:5F2F                      ; wait refresh and update map position
      95.  01:5F2F  21 9E FC            	ld hl,JIFFY
      96.  01:5F32  3E 01               	ld	a,1
      97.  01:5F34  3D                  	dec	a
      98.  01:5F35                      1:
      99.  01:5F35  BE                  	cp (hl)
     100.  01:5F36  30 FD               	jr nc,1b
     101.  01:5F38  AF                  	xor	a
     102.  01:5F39  77                  	ld	(hl),a
     103.  01:5F3A                      
     104.  01:5F3A  2A EE ED            	ld	hl,(xmap)
     105.  01:5F3D  3A ED ED            	ld	a,(dxmap)
     106.  01:5F40  CB 2F CB 2F         [2] sra a
     107.  01:5F44  5F                  	ld	e,a
     108.  01:5F45  87                  	add a,a
     109.  01:5F46  9F                  	sbc a,a
     110.  01:5F47  57                  	ld	d,a
     111.  01:5F48  19                  	add hl,de
     112.  01:5F49  22 EE ED            	ld	(xmap),hl
     113.  01:5F4C                      
     114.  01:5F4C  01 78 00            	ld	bc,xship_rel
     115.  01:5F4F  09                  	add hl,bc
     116.  01:5F50  22 F1 ED            	ld	(xship),hl
     117.  01:5F53                      
     118.  01:5F53                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     119.  01:5F53                      ; Manage map limits
     120.  01:5F53                      
     121.  01:5F53  2A EE ED            	ld	hl,(xmap)
     122.  01:5F56  24                  	inc h
     123.  01:5F57  11 00 0D            	ld	de,8*(LvlWidth)+256
     124.  01:5F5A  A7                  	and a
     125.  01:5F5B  ED 52               	sbc hl,de
     126.  01:5F5D                      	
     127.  01:5F5D  30 0A               	jr	nc,.end_attractmode
     128.  01:5F5F  CD 96 35            	call	joy_read
     129.  01:5F62  E6 1F               	and	0x1F
     130.  01:5F64  20 03               	jr	nz,.end_attractmode
     131.  01:5F66                      	
     132.  01:5F66  C3 1D 5F            	jp	.main_loop
     133.  01:5F69                      	
     134.  01:5F69                      .end_attractmode
     135.  01:5F69  AF                  	xor	a
     136.  01:5F6A  32 FD ED            	ld	(god_mode),a
     137.  01:5F6D                      	
     138.  01:5F6D  F1                  	pop	af
     139.  01:5F6E  F1                  	pop	af
     140.  01:5F6F  C3 F7 5F            	jp title_screen
     141.  01:5F72                      	; ret
     233   01:5F72                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     234   01:5F72                      initmain:
     235   01:5F72  3E 02               	ld	a,2
     236   01:5F74  CD 5F 00            	call 0x005f
     237   01:5F77                      
     238   01:5F77  F3                  	di
     239   01:5F78  CD 74 7F            	call	_hb_10p_hb20p_patch	; patch for crappy msx1 machines
     240   01:5F7B  CD 2F 5A            	call 	SCCINIT			; look for the SCC slot
     241   01:5F7E  CD 0E 41            	call	search_slotram	; look for the ram slot 
     242   01:5F81  CD EF 40            	call	search_slot		; look for the slot of our rom
     243   01:5F84                      
     244   01:5F84  3A C6 FF            	ld	a,(slotram)
     245   01:5F87  ED 47               	ld	i,a					; save for later use
     246   01:5F89                      	
     247   01:5F89                      	;---------------------
     248   01:5F89  CD 40 41            	call	setrampage2		; set ram in page 2
     249   01:5F8C  31 00 C0            	ld sp,0C000h			; place manually the stack
     250   01:5F8F  CD 46 41            	call	setrompage3		; set rom in page 3 <- old ram data cannot be accessed
     251   01:5F92                      	;---------------------
     252   01:5F92                      
     253   01:5F92  21 00 C0            	ld	hl,0xC000			; now page 3 is in 0x8000-0xBFFF
     254   01:5F95  11 00 80            	ld	de,0x8000
     255   01:5F98  01 00 40            	ld	bc,0x4000
     256   01:5F9B  ED B0               	ldir
     257   01:5F9D                      	
     258   01:5F9D                      	;---------------------
     259   01:5F9D  ED 57               	ld		a,i				; recover ram in page 3
     260   01:5F9F  CD 12 42            	call	setslotpage3	; NB two bytes at the end of the page get corrupted by this call!
     261   01:5FA2  31 80 F3            	ld sp,0F380h			; place manually the stack
     262   01:5FA5  CD 3A 41            	call	setrompage2		; set rom in page 2
     263   01:5FA8                      	;---------------------
     264   01:5FA8                      	
     265   01:5FA8  (01:413A)           enpage2 equ	setrompage2
     266   01:5FA8  (01:4140)           enpage3 equ	setrampage2
     267   01:5FA8                      
     268   01:5FA8                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     269   01:5FA8                      	
     270   01:5FA8                      	; actual main
     271   01:5FA8  3A E0 F3            	ld	a,(_vdpReg+1)
     272   01:5FAB  F6 02               	or 2
     273   01:5FAD  32 E0 F3            	ld	(_vdpReg+1),a
     274   01:5FB0                      	
     275   01:5FB0                      	_setVdp 7,0x00
     275   01:5FB0  3E 00             >  ld a,value
     275   01:5FB2  D3 99             >  out (0x99),a
     275   01:5FB4  3E 87             >  ld a,register + 0x80
     275   01:5FB6  D3 99             >  out (0x99),a
     276   01:5FB8                      		
     277   01:5FB8  AF                  	xor	a
     278   01:5FB9  32 23 EC            	ld	(visible_sprts),a
     279   01:5FBC  32 24 EC            	ld	(ingame),a
     280   01:5FBF  32 2A EC            	ld	(PT3_SETUP),a
     281   01:5FC2                      	
     282   01:5FC2                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     283   01:5FC2                      	
     284   01:5FC2  3A 2B 00            	ld		a,(0x002B)
     285   01:5FC5  E6 80               	and 	0x80
     286   01:5FC7  32 E4 ED            	ld 		(vsf),a     	; 0=>60Hz, !0=>50Hz
     287   01:5FCA  3E 01               	ld      a,1
     288   01:5FCC  32 E5 ED            	ld      (cnt),a			; reset the tic counter
     289   01:5FCF                      
     290   01:5FCF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     291   01:5FCF  CD 34 7F            	call	_set_r800		; try to set R800 rom mode on TR
     292   01:5FD2                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     293   01:5FD2  CD 5D 7F            	call	_set_goodmode
     294   01:5FD5                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     295   01:5FD5                      
     296   01:5FD5  AF                  	xor	a
     297   01:5FD6                      	; inc	a
     298   01:5FD6  32 22 EC            	ld	(victory),a			; none has completed the game yet
     299   01:5FD9                      
     300   01:5FD9  CD 34 41            	call	setrompage0		; 48K of rom are active - bios is excluded
     301   01:5FDC                      							; from here interrupts are disabled
     302   01:5FDC                      	
     303   01:5FDC                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     304   01:5FDC  CD 15 49            	call	ayFX_SETUP
     305   01:5FDF                      	
     306   01:5FDF  AF                  	xor	a			; range [-15,0]
     307   01:5FE0  32 AB ED            	ld      (_psg_vol_fix),a
     308   01:5FE3  32 AD ED            	ld      (_scc_vol_fix),a
     309   01:5FE6  32 AC ED            	ld		(_sfx_vol_fix),a
     310   01:5FE9                      	
     311   01:5FE9  CD 30 56            	call 	_SCC_PSG_Volume_balance
     312   01:5FEC                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     313   01:5FEC  AF                  	xor	a
     314   01:5FED  32 FD ED            	ld	(god_mode),a		; god mode trick is off
     315   01:5FF0  32 F5 ED            	ld	(sprite_3c),a		; the 3 colour sprite trick is off
     316   01:5FF3  3C                  	inc a
     317   01:5FF4  32 21 EC            	ld	(game_speed),a		; valid values 1 2 3
     318   01:5FF7                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     319   01:5FF7                      title_screen:
     320   01:5FF7  31 80 F3            	ld sp,0F380h			; place manually the stack
     321   01:5FFA                      	
     322   01:5FFA  CD 23 49            	call 	ayFX_END
     323   01:5FFD  CD 62 42            	call	PT3_MUTE
     324   01:6000  CD 19 4A            	call	rand8_init
     325   01:6003                      	
     326   01:6003  F3                  	di
     327   01:6004  CD FC 3E            	call	disscr
     328   01:6007                      	_setVdp 3,0xFF	;	colours at 0x2000	(regular mode for colours)
     328   01:6007  3E FF             >  ld a,value
     328   01:6009  D3 99             >  out (0x99),a
     328   01:600B  3E 83             >  ld a,register + 0x80
     328   01:600D  D3 99             >  out (0x99),a
     329   01:600F                      	_setVdp 4,0x03	;	patterns at 0x0000	(regular: used 0x0800 0x1000)
     329   01:600F  3E 03             >  ld a,value
     329   01:6011  D3 99             >  out (0x99),a
     329   01:6013  3E 84             >  ld a,register + 0x80
     329   01:6015  D3 99             >  out (0x99),a
     330   01:6017                      	
     331   01:6017  AF                  	xor	a
     332   01:6018  32 23 EC            	ld	(visible_sprts),a
     333   01:601B  32 24 EC            	ld	(ingame),a
     334   01:601E  3D                  	dec	a
     335   01:601F  32 F8 ED            	ld	(joystick),a
     336   01:6022  32 F9 ED            	ld	(old_joystick),a
     337   01:6025                      	
     338   01:6025  CD 3A 41            	call	enpage2
     339   01:6028  21 46 BD            	ld	hl,rom_tileset_miz 	;  tile set to be expanded in ram
     340   01:602B  11 7F F8            	ld	de,ram_tileset
     341   01:602E  CD 0D 05            	call	mom_depack_rom
     342   01:6031  3E 80               	ld	a,0x80
     343   01:6033  32 E6 F8            	ld	(ram_tileset+0x0067),a	; last minute patch
     344   01:6036  3E 30               	ld	a,0x30
     345   01:6038  32 87 F8            	ld	(ram_tileset+0x0008),a	; last minute patch
     346   01:603B  32 88 F8            	ld	(ram_tileset+0x0009),a	; last minute patch
     347   01:603E  32 89 F8            	ld	(ram_tileset+0x000A),a	; last minute patch
     348   01:6041  32 8A F8            	ld	(ram_tileset+0x000B),a	; last minute patch
     349   01:6044  32 8C F8            	ld	(ram_tileset+0x000D),a	; last minute patch
     350   01:6047                      	
     351   01:6047  CD 40 41            	call	enpage3
     352   01:604A                      	
     353   01:604A                      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     354   01:604A                      	; plot splash screen
     355   01:604A                      	; menu goes here !!	
     356   01:604A                      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     357   01:604A  F3                  	di
     358   01:604B                      	_setvdpwvram 0x1b00
     358   01:604B                    >  if (value & 0xFF)
     358   01:604B                    ~   ld a,value & 0xFF
     358   01:604B                    ~  else
     358   01:604B  AF                >   xor a
     358   01:604C                    >  endif
     358   01:604C  D3 99             >  out (0x99),a
     358   01:604E  3E 5B             >  ld a,0x40 + (value/256)
     358   01:6050  D3 99             >  out (0x99),a
     359   01:6052  3E D0               	ld	a,0xd0
     360   01:6054  D3 98               	out	(0x98),a
     361   01:6056  FB                  	ei
     362   01:6057                      
     363   01:6057  3A 22 EC            	ld	a,(victory)
     364   01:605A  A7                  	and	a
     365   01:605B  20 10               	jr	nz,1f
     366   01:605D  CD 40 41            	call	enpage3
     367   01:6060  CD C5 B1            	call 	show_manta
     368   01:6063  CD 3A 41            	call	enpage2
     369   01:6066  FB                  	ei
     370   01:6067  01 2C 01            	ld		bc,5*60
     371   01:606A  CD 37 BD            	call	wait_time_or_key_bc	; only 5 secs
     372   01:606D                      1:
     373   01:606D  3A 22 EC            	ld	a,(victory)
     374   01:6070  A7                  	and	a
     375   01:6071  28 33               	jr	z,1f
     376   01:6073  F3                  	di
     377   01:6074  CD FC 3E            	call	disscr
     378   01:6077  CD 6E B1            	call	victory_screen
     379   01:607A  CD 3A 41            	call	enpage2
     380   01:607D  CD C0 BC            	call	victory_text
     381   01:6080  CD F5 3E            	call	enascr
     382   01:6083  CD 82 25            	call	ending_music
     383   01:6086  FB                  	ei	
     384   01:6087  01 B0 04            	ld		bc,20*60
     385   01:608A  CD 37 BD            	call	wait_time_or_key_bc	; 20 secs
     386   01:608D  CD 06 BD            	call	victory_text1
     387   01:6090  FB                  	ei
     388   01:6091  CD 25 BD            	call	wait_music_or_key	; till music ends
     389   01:6094  CD 9E BC            	call	victory_text2
     390   01:6097  FB                  	ei
     391   01:6098  CD 34 BD            	call	wait_time_or_key	; 10 secs
     392   01:609B  CD 62 42            	call	PT3_MUTE
     393   01:609E  AF                  	xor	a
     394   01:609F  32 22 EC            	ld	(victory),a		; avoid greetings if you play another time and die
     395   01:60A2  3D                  	dec	a
     396   01:60A3  32 29 EC            	ld	(enable_cheat),a	; enable cheat after any victory
     397   01:60A6                      
     398   01:60A6                      1:
     399   01:60A6                      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     400   01:60A6                      	; menu goes here !!	
     401   01:60A6                      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     402   01:60A6  CD 40 41            	call	enpage3
     403   01:60A9  CD B5 24            	call	plot_title_screen
     404   01:60AC                      	
     405   01:60AC                      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     406   01:60AC                      	; game start
     407   01:60AC                      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     408   01:60AC  76                  	halt
     409   01:60AD  F3                  	di
     410   01:60AE  CD 3E 24            	call 	cls
     411   01:60B1  CD FC 3E            	call	disscr
     412   01:60B4  CD 1F 40            	call	sprite_init
     413   01:60B7                      	
     414   01:60B7  CD 15 49            	call 	ayFX_SETUP
     415   01:60BA                      	
     416   01:60BA                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     417   01:60BA                      
     418   01:60BA  01 00 00            	ld	bc,0						; show score on screen 
     419   01:60BD  CD 5D 65            	call	add_bc_score_bin
     420   01:60C0  0E 00               	ld	c,0							; show lives on screen 
     421   01:60C2  CD 9B 65            	call	add_c_lives_bin
     422   01:60C5                      
     423   01:60C5  AF                  	xor	a
     424   01:60C6  32 FC ED            	ld	(already_dead),a	; reset at level start, set after you die
     425   01:60C9  3C                  	inc	a
     426   01:60CA  32 F4 ED            	ld	(next_level),a
     427   01:60CD                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     428   01:60CD                      
     429   01:60CD                      restart:
     430   01:60CD  21 00 00            	ld	hl,0
     431   01:60D0  22 EE ED            	ld	(xmap),hl
     432   01:60D3  CD 23 49            	call 	ayFX_END
     433   01:60D6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     434   01:60D6                      ; warping sequence only at level start
     435   01:60D6                      ;
     436   01:60D6  3A FC ED            	ld	a,(already_dead)
     437   01:60D9  A7                  	and	a
     438   01:60DA  20 06               	jr	nz,11f
     439   01:60DC  CD 62 42            	call	PT3_MUTE
     440   01:60DF  CD EF 78            	call	intro_anim
     441   01:60E2                      11:
     442   01:60E2                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     443   01:60E2                      ; music starts AFTER the warping sequence
     444   01:60E2                      ;	
     445   01:60E2  3A FC ED            	ld	a,(already_dead)
     446   01:60E5  A7                  	and	a
     447   01:60E6  20 0F               	jr	nz,11f			; do not restart music if already dead
     448   01:60E8                      
     449   01:60E8  3A F3 ED            	ld		a,(cur_level)
     450   01:60EB  3D                  	dec		a
     451   01:60EC  FE 03               1:	cp		n_musics
     452   01:60EE  38 04               	jr		c,1f
     453   01:60F0  D6 03               	sub		3
     454   01:60F2  18 F8               	jr		1b
     455   01:60F4                      
     456   01:60F4  CD 8F 3E            1:	call	start_song
     457   01:60F7                      
     458   01:60F7                      11:
     459   01:60F7                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     460   01:60F7                      ; music starts AFTER the warping sequence
     461   01:60F7                      ;
     462   01:60F7  3A FC ED            	ld	a,(already_dead)
     463   01:60FA  A7                  	and	a
     464   01:60FB  C4 AA 78            	call	nz,just_level_init
     465   01:60FE                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     466   01:60FE                      
     467   01:60FE  3A F3 ED            	ld	a,(cur_level)
     468   01:6101  3D                  	dec	a
     469   01:6102  6F                  	ld	l,a
     470   01:6103  26 00               	ld	h,0
     471   01:6105  5D                  	ld	e,l
     472   01:6106  54                  	ld	d,h
     473   01:6107                      
     474   01:6107  29 29 29            [3]	add	hl,hl
     475   01:610A  19                  	add	hl,de
     476   01:610B                      	
     477   01:610B  11 37 66            	ld	de,levelnames
     478   01:610E  19                  	add	hl,de
     479   01:610F  11 00 1F            	ld	de,0x1C00+8*3*32
     480   01:6112  CD BE 66            	call	print_strf
     481   01:6115                      
     482   01:6115                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     483   01:6115                      
     484   01:6115  AF                  	xor a
     485   01:6116  32 25 EC            	ld	(aniframe),a
     486   01:6119  32 28 EC            	ld	(anispeed),a
     487   01:611C  32 27 EC            	ld	(ms_state),a
     488   01:611F  3E 08               	ld	a,8
     489   01:6121  32 ED ED            	ld	(dxmap),a
     490   01:6124  32 26 EC            	ld	(old_aniframe),a		; old_aniframe!=aniframe
     491   01:6127                      	
     492   01:6127  21 00 00            	ld	hl,0
     493   01:612A  22 EE ED            	ld	(xmap),hl
     494   01:612D  01 78 00            	ld	bc,xship_rel
     495   01:6130  09                  	add hl,bc
     496   01:6131  22 F1 ED            	ld	(xship),hl
     497   01:6134  3E 78               	ld	a,64+64-8
     498   01:6136  32 F0 ED            	ld	(yship),a
     499   01:6139                      
     500   01:6139  CD 15 49            	call	ayFX_SETUP	
     501   01:613C  AF                  	xor	a
     502   01:613D  32 FE ED            	ld	(halt_game),a
     503   01:6140  32 FF ED            	ld	(halt_gamef1),a
     504   01:6143  32 9E FC            	ld	(JIFFY),a
     505   01:6146                      	
     506   01:6146                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     507   01:6146                      ;	main loop
     508   01:6146                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     509   01:6146                      main_loop:
     510   01:6146                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     511   01:6146                      ; test for level change
     512   01:6146  CD 13 62            	call	test_pause
     513   01:6149                      	
     514   01:6149                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     515   01:6149                      ; pause loop	
     516   01:6149  3A FE ED            	ld	a,(halt_game)
     517   01:614C  A7                  	and	a
     518   01:614D  20 F7               	jr	nz,main_loop
     519   01:614F                      	
     520   01:614F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     521   01:614F                      ; end level ?
     522   01:614F  CD B8 7B            	call	test_runway
     523   01:6152                      
     524   01:6152                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     525   01:6152                      ; run ms FSM and place its sprites in the SAT in RAM
     526   01:6152  CD 47 68            	call	ms_ctrl
     527   01:6155                      
     528   01:6155                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     529   01:6155                      ; test for game restart
     530   01:6155  3A 27 EC            	ld	a,(ms_state)
     531   01:6158  FE 0C               	cp	ms_reset
     532   01:615A  CA CD 60            	jp	z,restart
     533   01:615D                      
     534   01:615D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     535   01:615D                      ; place MS in the SAT and test for collision
     536   01:615D  CD D4 6E            	call	put_ms_sprt
     537   01:6160  3A FD ED            	ld	a,(god_mode)
     538   01:6163  A7                  	and 	a
     539   01:6164  CC 8A 6B            	call	z,test_obstacles
     540   01:6167                      
     541   01:6167                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     542   01:6167                      ; run NCPS FSM
     543   01:6167  CD DF 4F            	call	npc_loop			; manage active enemies
     544   01:616A  CD BD 4A            	call	wave_timer			; activate new enemies
     545   01:616D                      
     546   01:616D  CD 46 55            	call	enemy_bullet_loop	; manage enemy bullets
     547   01:6170                      	
     548   01:6170                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     549   01:6170                      ; run MS bullets FSM
     550   01:6170  CD 96 6D            	call	bullet_loop
     551   01:6173                      
     552   01:6173                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     553   01:6173                      ; place NPCS sprites in the SAT in RAM
     554   01:6173  CD A2 7A            	call	plot_enemy
     555   01:6176                      
     556   01:6176                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     557   01:6176                      ; wait refresh and update map position
     558   01:6176                      
     559   01:6176                      	; setVdp 7,0x04
     560   01:6176                      	;	halt
     561   01:6176                      
     562   01:6176  21 9E FC            	ld hl,JIFFY
     563   01:6179                      	; ld	a,1
     564   01:6179                      	; cp	(hl)
     565   01:6179                      	; jp	nc,111f
     566   01:6179                      	; setVdp 7,0x04
     567   01:6179                      ; 111:
     568   01:6179  3A 21 EC            	ld	a,(game_speed)
     569   01:617C  3D                  	dec	a
     570   01:617D                      wait:
     571   01:617D  BE                  	cp (hl)
     572   01:617E  30 FD               	jr nc,wait
     573   01:6180  AF                  	xor	a
     574   01:6181  77                  	ld	(hl),a
     575   01:6182                      
     576   01:6182                      	; setVdp 7,0x00
     577   01:6182                      
     578   01:6182  2A EE ED            	ld	hl,(xmap)
     579   01:6185  3A ED ED            	ld	a,(dxmap)
     580   01:6188  CB 2F CB 2F         [2] sra a
     581   01:618C  5F                  	ld	e,a
     582   01:618D  87                  	add a,a
     583   01:618E  9F                  	sbc a,a
     584   01:618F  57                  	ld	d,a
     585   01:6190  19                  	add hl,de
     586   01:6191  22 EE ED            	ld	(xmap),hl
     587   01:6194                      
     588   01:6194  01 78 00            	ld	bc,xship_rel
     589   01:6197  09                  	add hl,bc
     590   01:6198  22 F1 ED            	ld	(xship),hl
     591   01:619B                      
     592   01:619B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     593   01:619B                      ; Manage map limits
     594   01:619B                      
     595   01:619B  2A EE ED            	ld	hl,(xmap)
     596   01:619E  24                  	inc h
     597   01:619F  11 00 0D            	ld	de,8*(LvlWidth)+256
     598   01:61A2  A7                  	and a
     599   01:61A3  ED 52               	sbc hl,de
     600   01:61A5  3E F6               	ld	a,-10
     601   01:61A7  D2 B4 61            	jp	nc,.endmap	; bounce right
     602   01:61AA                      
     603   01:61AA  19                  	add hl,de
     604   01:61AB  01 F8 FE            	ld	bc,-256-8
     605   01:61AE  09                  	add hl,bc
     606   01:61AF                      
     607   01:61AF  DA 46 61            	jp	c,main_loop
     608   01:61B2                      	
     609   01:61B2  3E 0A               	ld	a,10		; bounce left
     610   01:61B4                      	
     611   01:61B4                      .endmap:
     612   01:61B4  32 ED ED            	ld	(dxmap),a
     613   01:61B7  C3 46 61            	jp	main_loop
     614   01:61BA                      ;
     615   01:61BA                      ; main loop end
     616   01:61BA                      
     617   01:61BA                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     618   01:61BA                      	
     619   01:61BA                      test_level:
     620   01:61BA  1E 06               	ld e,6
     621   01:61BC  CD 30 3F            	call	checkkbd
     622   01:61BF  CB 0D               	rrc	l				; shift
     623   01:61C1  D2 C8 61            	jp	nc,levels_8_16
     624   01:61C4                      levels_0_8:
     625   01:61C4  16 00               	ld	d,0
     626   01:61C6  18 02               	jr	1f
     627   01:61C8                      levels_8_16
     628   01:61C8  16 08               	ld	d,8
     629   01:61CA                      1:
     630   01:61CA  1E 00               	ld e,0
     631   01:61CC  CD 30 3F            	call	checkkbd
     632   01:61CF  7A                  	ld	a,d
     633   01:61D0                      	repeat 8
     634   01:61D0                    < 11:	rrc	l				 ; <- '0','1','2','3','4','5','6','7'
     635   01:61D0                    < 	jr	nc,1f
     636   01:61D0                    < 	inc	a
     637   01:61D0                    < 	endrepeat
     637   01:61D0  CB 0D 30 25 3C CB 0D 30 20 3C CB 0D 30 1B 3C CB 
     637   01:61E0  0D 30 16 3C CB 0D 30 11 3C CB 0D 30 0C 3C CB 0D 
     637   01:61F0  30 07 3C CB 0D 30 02 3C 
     638   01:61F8  C9                  	ret
     639   01:61F9                      	
     640   01:61F9                      1:
     641   01:61F9  32 F4 ED            	ld	(next_level),a
     642   01:61FC  3E 0C               	ld	a,ms_reset
     643   01:61FE  32 27 EC            	ld	(ms_state),a
     644   01:6201                      	
     645   01:6201  AF                  	xor	a
     646   01:6202  32 FE ED            	ld	(halt_game),a
     647   01:6205  32 FC ED            	ld	(already_dead),a	; reset tiles and colours
     648   01:6208                      
     649   01:6208  3E 11               	ld	a,17				; jump to a new level
     650   01:620A  CD BE 05            	call AFXPLAY
     651   01:620D  06 4F               	ld	b,0x4f
     652   01:620F  76                  1:	halt
     653   01:6210  10 FD               	djnz	1b
     654   01:6212  C9                  	ret
     655   01:6213                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     656   01:6213                      	
     657   01:6213                      test_pause:
     658   01:6213  1E 07               	ld e,7
     659   01:6215  CD 30 3F            	call	checkkbd
     660   01:6218  E6 20               	and 0x20				; <-	BS
     661   01:621A  20 08               	jr	nz,_no_gameover
     662   01:621C  3E 01               	ld	a,1								; game over
     663   01:621E  32 12 EE            	ld	(lives_bin),a
     664   01:6221  CD F4 6B            	call	test_obstacles.found		; start ms explosion
     665   01:6224                      _no_gameover:
     666   01:6224  1E 06               	ld e,6
     667   01:6226  CD 30 3F            	call	checkkbd
     668   01:6229  E6 20               	and 0x20				; <-	F1
     669   01:622B  20 01               	jr	nz,1f
     670   01:622D  37                  	scf
     671   01:622E  3A FF ED            1:	ld	a,(halt_gamef1)
     672   01:6231  17                  	rla
     673   01:6232  32 FF ED            	ld	(halt_gamef1),a
     674   01:6235  E6 03               	and 3
     675   01:6237  FE 02               	cp  2
     676   01:6239  C0                  	ret nz
     677   01:623A                      	
     678   01:623A  3E 10               	ld	a,16		; pause
     679   01:623C  CD BE 05            	call AFXPLAY
     680   01:623F                      	
     681   01:623F  3A FE ED            	ld	a,(halt_game)
     682   01:6242  EE FF               	xor 255
     683   01:6244  32 FE ED            	ld	(halt_game),a
     684   01:6247  28 07               	jr	z,stop_music
     685   01:6249                      start_music
     686   01:6249  AF                  	xor	a
     687   01:624A  32 C9 FF            	ld	(music_flag),a
     688   01:624D                      	
     689   01:624D                      	; Easter egg	
     690   01:624D  C3 BA 61            	jp	test_level
     691   01:6250                      ;	ret
     692   01:6250                      stop_music
     693   01:6250  3D                  	dec	a	;ld	a,0xff
     694   01:6251  32 C9 FF            	ld	(music_flag),a
     695   01:6254  C9                  	ret
     696   01:6255                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     697   01:6255                      	include collision_tst.asm
       1.  01:6255  (00AB)              	align 0x100
       2.  01:6300                      sprite_collision_windows:
       3.  01:6300  00 (12)             	ds	3*4				; first 3 frames are missing
       4.  01:630C                      	include sprite_collision_window.asm
       1:  01:630C                      
       2:  01:630C                       ; xoff			db	0 
       3:  01:630C                       ; yoff			db	0 
       4:  01:630C                       ; xsize		db	0 
       5:  01:630C                       ; ysize		db	0 
       6:  01:630C                      
       7:  01:630C                      sprite_0:
       8:  01:630C                      sprite_1:
       9:  01:630C                      sprite_2:
      10:  01:630C                      sprite_3:
      11:  01:630C  03 03 0A 0B             defb  3, 3,10,11 
      12:  01:6310                      sprite_4:
      13:  01:6310  00 00 10 10             defb  0, 0,16,16 
      14:  01:6314                      sprite_5:
      15:  01:6314  00 00 10 10             defb  0, 0,16,16 
      16:  01:6318                      sprite_6:
      17:  01:6318  00 00 10 0F             defb  0, 0,16,15 
      18:  01:631C                      sprite_7:
      19:  01:631C  00 00 10 10             defb  0, 0,16,16 
      20:  01:6320                      sprite_8:
      21:  01:6320  04 01 08 0E             defb  4, 1, 8,14 
      22:  01:6324                      sprite_9:
      23:  01:6324  04 03 08 0B             defb  4, 3, 8,11 
      24:  01:6328                      sprite_10:
      25:  01:6328  04 05 08 07             defb  4, 5, 8, 7 
      26:  01:632C                      sprite_11:
      27:  01:632C  04 06 08 05             defb  4, 6, 8, 5 
      28:  01:6330                      sprite_12:
      29:  01:6330  04 07 08 02             defb  4, 7, 8, 2 
      30:  01:6334                      sprite_13:
      31:  01:6334  04 06 08 05             defb  4, 6, 8, 5 
      32:  01:6338                      sprite_14:
      33:  01:6338  04 05 08 07             defb  4, 5, 8, 7 
      34:  01:633C                      sprite_15:
      35:  01:633C  04 03 08 0B             defb  4, 3, 8,11 
      36:  01:6340                      sprite_16:
      37:  01:6340  00 00 10 0F             defb  0, 0,16,15 
      38:  01:6344                      sprite_17:
      39:  01:6344  00 00 10 0F             defb  0, 0,16,15 
      40:  01:6348                      sprite_18:
      41:  01:6348  00 01 10 0F             defb  0, 1,16,15 
      42:  01:634C                      sprite_19:
      43:  01:634C  00 01 10 0F             defb  0, 1,16,15 
      44:  01:6350                      sprite_20:
      45:  01:6350  00 00 10 0F             defb  0, 0,16,15 
      46:  01:6354                      sprite_21:
      47:  01:6354  00 00 10 0F             defb  0, 0,16,15 
      48:  01:6358                      sprite_22:
      49:  01:6358  00 03 10 0D             defb  0, 3,16,13 
      50:  01:635C                      sprite_23:
      51:  01:635C  00 03 10 0D             defb  0, 3,16,13 
      52:  01:6360                      sprite_24:
      53:  01:6360  00 00 10 10             defb  0, 0,16,16 
      54:  01:6364                      sprite_25:
      55:  01:6364  00 00 10 10             defb  0, 0,16,16 
      56:  01:6368                      sprite_26:
      57:  01:6368  00 00 10 10             defb  0, 0,16,16 
      58:  01:636C                      sprite_27:
      59:  01:636C  00 00 10 10             defb  0, 0,16,16 
      60:  01:6370                      sprite_28:
      61:  01:6370  00 00 10 0F             defb  0, 0,16,15 
      62:  01:6374                      sprite_29:
      63:  01:6374  00 00 10 0F             defb  0, 0,16,15 
      64:  01:6378                      sprite_30:
      65:  01:6378  00 01 10 0F             defb  0, 1,16,15 
      66:  01:637C                      sprite_31:
      67:  01:637C  00 01 10 0F             defb  0, 1,16,15 
      68:  01:6380                      sprite_32:
      69:  01:6380  00 00 10 0F             defb  0, 0,16,15 
      70:  01:6384                      sprite_33:
      71:  01:6384  00 00 10 0F             defb  0, 0,16,15 
      72:  01:6388                      sprite_34:
      73:  01:6388  00 00 10 10             defb  0, 0,16,16 
      74:  01:638C                      sprite_35:
      75:  01:638C  00 00 10 10             defb  0, 0,16,16 
      76:  01:6390                      sprite_36:
      77:  01:6390  00 00 10 10             defb  0, 0,16,16 
      78:  01:6394                      sprite_37:
      79:  01:6394  00 00 10 10             defb  0, 0,16,16 
      80:  01:6398                      sprite_38:
      81:  01:6398  00 00 10 10             defb  0, 0,16,16 
      82:  01:639C                      sprite_39:
      83:  01:639C  00 00 10 10             defb  0, 0,16,16 
      84:  01:63A0                      sprite_40:
      85:  01:63A0  00 00 10 0F             defb  0, 0,16,15 
      86:  01:63A4                      sprite_41:
      87:  01:63A4  00 00 10 0F             defb  0, 0,16,15 
      88:  01:63A8                      sprite_42:
      89:  01:63A8  00 01 10 0F             defb  0, 1,16,15 
      90:  01:63AC                      sprite_43:
      91:  01:63AC  00 01 10 0F             defb  0, 1,16,15 
      92:  01:63B0                      sprite_44:
      93:  01:63B0  00 00 10 0F             defb  0, 0,16,15 
      94:  01:63B4                      sprite_45:
      95:  01:63B4  00 00 10 0F             defb  0, 0,16,15 
      96:  01:63B8                      sprite_46:
      97:  01:63B8  00 01 10 0F             defb  0, 1,16,15 
      98:  01:63BC                      sprite_47:
      99:  01:63BC  00 01 10 0F             defb  0, 1,16,15 
     100:  01:63C0                      sprite_48:
     101:  01:63C0  00 00 10 0F             defb  0, 0,16,15 
     102:  01:63C4                      sprite_49:
     103:  01:63C4  00 00 10 0F             defb  0, 0,16,15 
     104:  01:63C8                      sprite_50:
     105:  01:63C8  00 00 10 10             defb  0, 0,16,16 
     106:  01:63CC                      sprite_51:
     107:  01:63CC  00 00 10 10             defb  0, 0,16,16 
     108:  01:63D0                      sprite_52:
     109:  01:63D0  00 01 10 0D             defb  0, 1,16,13 
     110:  01:63D4                      sprite_53:
     111:  01:63D4  00 01 10 0D             defb  0, 1,16,13 
     112:  01:63D8                      sprite_54:
     113:  01:63D8  00 01 10 0E             defb  0, 1,16,14 
     114:  01:63DC                      sprite_55:
     115:  01:63DC  00 01 10 0E             defb  0, 1,16,14 
     116:  01:63E0                      sprite_56:
     117:  01:63E0  00 03 10 09             defb  0, 3,16, 9 
     118:  01:63E4                      sprite_57:
     119:  01:63E4  00 03 10 09             defb  0, 3,16, 9 
     120:  01:63E8                      sprite_58:
     121:  01:63E8  00 03 10 0A             defb  0, 3,16,10 
     122:  01:63EC                      sprite_59:
     123:  01:63EC  00 03 10 0A             defb  0, 3,16,10 
     124:  01:63F0                      sprite_60:
     125:  01:63F0  00 05 10 05             defb  0, 5,16, 5 
     126:  01:63F4                      sprite_61:
     127:  01:63F4  00 05 10 05             defb  0, 5,16, 5 
     128:  01:63F8                      sprite_62:
     129:  01:63F8  00 06 10 05             defb  0, 6,16, 5 
     130:  01:63FC                      sprite_63:
     131:  01:63FC  00 06 10 05             defb  0, 6,16, 5 
       5.  01:6400                      
       6.  01:6400                      ;	in: 
       7.  01:6400                      ;		IX-> current sprite
       8.  01:6400                      ;		(ix+enemy_data.frame) = frame in the SPT
       9.  01:6400                      ;	out;
      10.  01:6400                      ;		IX -> xoff,yoff,xsize,ysize are set
      11.  01:6400                      	
      12.  01:6400                      set_size:
      13.  01:6400  08                   	ex	af,af'
      14.  01:6401  DD 7E 0A            	ld	a,(ix+enemy_data.frame)
      15.  01:6404  D9                  	exx
      16.  01:6405  E6 FC               	and	%11111100
      17.  01:6407  6F                  	ld	l,a
      18.  01:6408  26 63               	ld	h,high sprite_collision_windows		
      19.  01:640A  7E                  	ld	a,(hl)
      20.  01:640B  DD 77 03            	ld	(ix+enemy_data.xoff),a
      21.  01:640E  23                  	inc	hl
      22.  01:640F  7E                  	ld	a,(hl)
      23.  01:6410  DD 77 04            	ld	(ix+enemy_data.yoff),a
      24.  01:6413  23                  	inc	hl
      25.  01:6414  7E                  	ld	a,(hl)
      26.  01:6415  DD 77 05            	ld	(ix+enemy_data.xsize),a
      27.  01:6418  23                  	inc	hl
      28.  01:6419  7E                  	ld	a,(hl)
      29.  01:641A  DD 77 06            	ld	(ix+enemy_data.ysize),a
      30.  01:641D  D9                  	exx
      31.  01:641E  08                  	ex		af,af'
      32.  01:641F  C9                  	ret
      33.  01:6420                      
      34.  01:6420                      ;	in: 
      35.  01:6420                      ;		IY-> current sprite
      36.  01:6420                      ;		(iY+enemy_data.frame) = frame in the SPT
      37.  01:6420                      ;	out;
      38.  01:6420                      ;		IY -> xoff,yoff,xsize,ysize are set
      39.  01:6420                      	
      40.  01:6420                      set_size2:
      41.  01:6420  08                   	ex	af,af'
      42.  01:6421  FD 7E 0A            	ld	a,(iy+enemy_data.frame)
      43.  01:6424  D9                  	exx
      44.  01:6425  E6 FC               	and	%11111100
      45.  01:6427  6F                  	ld	l,a
      46.  01:6428  26 63               	ld	h,high sprite_collision_windows		
      47.  01:642A  7E                  	ld	a,(hl)
      48.  01:642B  FD 77 03            	ld	(iy+enemy_data.xoff),a
      49.  01:642E  23                  	inc	hl
      50.  01:642F  7E                  	ld	a,(hl)
      51.  01:6430  FD 77 04            	ld	(iy+enemy_data.yoff),a
      52.  01:6433  23                  	inc	hl
      53.  01:6434  7E                  	ld	a,(hl)
      54.  01:6435  FD 77 05            	ld	(iy+enemy_data.xsize),a
      55.  01:6438  23                  	inc	hl
      56.  01:6439  7E                  	ld	a,(hl)
      57.  01:643A  FD 77 06            	ld	(iy+enemy_data.ysize),a
      58.  01:643D  D9                  	exx
      59.  01:643E  08                  	ex		af,af'
      60.  01:643F  C9                  	ret
      61.  01:6440                      	
      62.  01:6440                      
      63.  01:6440                      ;	in: 
      64.  01:6440                      ;		IX-> current bullet
      65.  01:6440                      ;		(iY+enemy_data.frame) = frame in the SPT
      66.  01:6440                      ;		xship,yship,ms_ysize,ms_xoff ecc ecc
      67.  01:6440                      ;	out:
      68.  01:6440                      ;		Carry set = MS is hit
      69.  01:6440                      ;
      70.  01:6440                      test_collision_enemy_bullets:
      71.  01:6440                      	
      72.  01:6440  DD 7E 00            	ld  a,(ix+enemy_data.y)
      73.  01:6443  DD 86 04            	add a,(ix+enemy_data.yoff)
      74.  01:6446  47                  	ld  b,a
      75.  01:6447  DD 4E 06            	ld  c,(ix+enemy_data.ysize)
      76.  01:644A                      	
      77.  01:644A                      	;[minx(h) maxx(h) miny(h) maxy(h)]
      78.  01:644A                      	
      79.  01:644A  3A F0 ED            	ld  a,(yship)
      80.  01:644D  FD 86 02            	add	a,(iy+2)
      81.  01:6450  57                  	ld  d,a
      82.  01:6451                      	
      83.  01:6451  FD 7E 03            	ld	a,(iy+3)
      84.  01:6454  FD 96 02            	sub	a,(iy+2)
      85.  01:6457  3C                  	inc	a
      86.  01:6458  5F                  	ld  e,a 		; 	ms_ysize
      87.  01:6459                      	
      88.  01:6459  CD DF 64            	call	CollisionCheck_8b
      89.  01:645C  D0                  	ret nc
      90.  01:645D                      	
      91.  01:645D                      	;[minx(h) maxx(h) miny(h) maxy(h)]
      92.  01:645D                      	
      93.  01:645D  DD 6E 01            	ld l,(ix+enemy_data.x)
      94.  01:6460  DD 66 02            	ld h,(ix+enemy_data.x+1)
      95.  01:6463  16 00               	ld d,0
      96.  01:6465  DD 5E 03            	ld e,(ix+enemy_data.xoff)
      97.  01:6468  19                  	add hl,de
      98.  01:6469  EB                  	ex de,hl
      99.  01:646A                      	
     100.  01:646A  44                  	ld b,h
     101.  01:646B  2A F1 ED            	ld hl,(xship)
     102.  01:646E  FD 4E 00            	ld c,(iy+0) ;	ms_xoff
     103.  01:6471  09                  	add hl,bc
     104.  01:6472                      
     105.  01:6472  DD 4E 05            	ld c,(ix+enemy_data.xsize)
     106.  01:6475                      	
     107.  01:6475  FD 7E 01            	ld	a,(iy+1)
     108.  01:6478  FD 96 00            	sub	a,(iy+0)
     109.  01:647B  3C                  	inc	a
     110.  01:647C  47                  	ld  b,a 		; ms_xsize
     111.  01:647D                      
     112.  01:647D  C3 CF 64            	jp CalcCollision
     113.  01:6480                      	; call CalcCollision
     114.  01:6480                      	; ret 
     115.  01:6480                      	
     116.  01:6480                      ;	in: 
     117.  01:6480                      ;		ix -> current enemy
     118.  01:6480                      ;	out;
     119.  01:6480                      ; 		Carry set = collision
     120.  01:6480                      	
     121.  01:6480                      test_collision_msbullets:
     122.  01:6480                      
     123.  01:6480  FD 21 85 EE             ld  iy,ms_bullets
     124.  01:6484  11 0E 00            	ld  de,enemy_data
     125.  01:6487  06 02                   ld  b,max_bullets
     126.  01:6489  A7                      and	a
     127.  01:648A                      	
     128.  01:648A  D9                  1:	exx
     129.  01:648B                          
     130.  01:648B  FD CB 07 46         	bit 0,(iy+enemy_data.status)
     131.  01:648F  C4 99 64            	call	nz,test_collision
     132.  01:6492  D8                  	ret	c
     133.  01:6493                      	
     134.  01:6493  D9                  	exx
     135.  01:6494  FD 19                   add iy,de
     136.  01:6496  10 F2                   djnz   1b
     137.  01:6498  C9                  	ret
     138.  01:6499                      	
     139.  01:6499                      
     140.  01:6499                      ; struct enemy_data
     141.  01:6499                      ; y               db  0
     142.  01:6499                      ; x               dw  0
     143.  01:6499                      ; xoff			db	0
     144.  01:6499                      ; yoff			db	0
     145.  01:6499                      ; xsize			db	0
     146.  01:6499                      ; ysize			db	0
     147.  01:6499                      ; status          db  0
     148.  01:6499                      ; cntr            db  0
     149.  01:6499                      ; kind            db  0
     150.  01:6499                      ; frame			db	0
     151.  01:6499                      ; color			db	0
     152.  01:6499                      ; speed           dw  0
     153.  01:6499                      ; ends
     154.  01:6499                      
     155.  01:6499                      
     156.  01:6499                      ; IN: 
     157.  01:6499                      ; 	ix -> object 1
     158.  01:6499                      ; 	iy -> object 2
     159.  01:6499                      ;
     160.  01:6499                      ; OUT: 
     161.  01:6499                      ; Carry set = collision
     162.  01:6499                      
     163.  01:6499                      test_collision:
     164.  01:6499  DD 7E 00            	ld  a,(ix+enemy_data.y)
     165.  01:649C  DD 86 04            	add a,(ix+enemy_data.yoff)
     166.  01:649F  47                  	ld  b,a
     167.  01:64A0  DD 4E 06            	ld  c,(ix+enemy_data.ysize)
     168.  01:64A3                      	
     169.  01:64A3  FD 7E 00            	ld  a,(iy+enemy_data.y)
     170.  01:64A6  FD 86 04            	add	a,(iy+enemy_data.yoff)
     171.  01:64A9  57                  	ld  d,a
     172.  01:64AA  FD 5E 06            	ld  e,(iy+enemy_data.ysize)
     173.  01:64AD                      	
     174.  01:64AD  CD DF 64            	call	CollisionCheck_8b
     175.  01:64B0  D0                  	ret nc
     176.  01:64B1                      	
     177.  01:64B1  DD 6E 01            	ld l,(ix+enemy_data.x)
     178.  01:64B4  DD 66 02            	ld h,(ix+enemy_data.x+1)
     179.  01:64B7  16 00               	ld d,0
     180.  01:64B9  42                  	ld b,d
     181.  01:64BA  DD 5E 03            	ld e,(ix+enemy_data.xoff)
     182.  01:64BD  19                  	add hl,de
     183.  01:64BE  EB                  	ex de,hl
     184.  01:64BF                      	
     185.  01:64BF  FD 6E 01            	ld l,(iy+enemy_data.x)
     186.  01:64C2  FD 66 02            	ld h,(iy+enemy_data.x+1)
     187.  01:64C5  FD 4E 03            	ld c,(iy+enemy_data.xoff)
     188.  01:64C8  09                  	add hl,bc
     189.  01:64C9                      
     190.  01:64C9  DD 4E 05            	ld c,(ix+enemy_data.xsize)
     191.  01:64CC  FD 46 05            	ld b,(iy+enemy_data.xsize)
     192.  01:64CF                      
     193.  01:64CF                      	; call CalcCollision
     194.  01:64CF                      	; ret 
     195.  01:64CF                      
     196.  01:64CF                      ; CalcCollision
     197.  01:64CF                      ;
     198.  01:64CF                      ; 1D collision check
     199.  01:64CF                      ;
     200.  01:64CF                      ; IN: 
     201.  01:64CF                      ; 	DE = Location object 1
     202.  01:64CF                      ; 	C = Size object 1
     203.  01:64CF                      ; 	HL = Location object 2
     204.  01:64CF                      ; 	B = Size object 2
     205.  01:64CF                      ; OUT: 
     206.  01:64CF                      ; Carry set = collision
     207.  01:64CF                      ;
     208.  01:64CF                      CalcCollision:
     209.  01:64CF  AF                  	xor a
     210.  01:64D0  ED 52               	sbc hl,de		; x2-x1
     211.  01:64D2  57                  	ld  d,a
     212.  01:64D3  38 04               	jr  c,.switch 	; jump if x2<x1
     213.  01:64D5                      	
     214.  01:64D5                      					; x2>=x1
     215.  01:64D5  59                  	ld  e,c
     216.  01:64D6  ED 52               	sbc hl,de		; C == x2-x1<dx1	
     217.  01:64D8  C9                  	ret
     218.  01:64D9                      
     219.  01:64D9                      
     220.  01:64D9                      .switch:			; x2-x1<0
     221.  01:64D9  57                  	ld	d,a
     222.  01:64DA  58                  	ld	e,b
     223.  01:64DB  AF                  	xor	a
     224.  01:64DC  ED 52               	sbc hl,de		; x2-x1 - dx2
     225.  01:64DE  C9                  	ret				; C == x1-x2<dx2
     226.  01:64DF                      
     227.  01:64DF                      ;
     228.  01:64DF                      ; CollisionCheck
     229.  01:64DF                      ;
     230.  01:64DF                      ;   Calculates whether a collision occurs between two objects
     231.  01:64DF                      ;   of a certain size
     232.  01:64DF                      ;
     233.  01:64DF                      ; IN: b = coordinate of object 1
     234.  01:64DF                      ;     c = size of object 1
     235.  01:64DF                      ;     d = coordinate of object 2
     236.  01:64DF                      ;     e = size of object 2
     237.  01:64DF                      ; OUT: Carry set if collision
     238.  01:64DF                      ; CHANGES: AF
     239.  01:64DF                      ;
     240.  01:64DF                      CollisionCheck_8b:
     241.  01:64DF  7A                          ld      a,d             ; get x2                       [5]
     242.  01:64E0  90                          sub     b               ; calculate x2-x1              [5]
     243.  01:64E1  38 02                       jr      c,.other        ; jump if x2<x1                [13/8]
     244.  01:64E3  91                          sub     c               ; compare with size 1          [5]
     245.  01:64E4  C9                          ret                     ; return result                [11]
     246.  01:64E5                      .other:
     247.  01:64E5  ED 44                       neg                     ; use negative value           [10]
     248.  01:64E7  93                          sub     e               ; compare with size 1          [5]
     249.  01:64E8  C9                          ret                     ; return result                [11]
     250.  01:64E9                      
     251.  01:64E9                      
     252.  01:64E9                      	
     253.  01:64E9                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     254.  01:64E9                      ; check_obj_collision
     255.  01:64E9                      ; (obj *obj1,                          DE
     256.  01:64E9                      ;  obj *obj2);                         BC
     257.  01:64E9                      ;
     258.  01:64E9                      ; obj->
     259.  01:64E9                      ;    dw x,y
     260.  01:64E9                      ;    db dx,dy
     261.  01:64E9                      ;
     262.  01:64E9                      ; if collision 
     263.  01:64E9                      ;	return HL = -1 
     264.  01:64E9                      ; else 
     265.  01:64E9                      ;	return HL = 0
     266.  01:64E9                      
     267.  01:64E9                      	struct obj_data
     268.  01:64E9                    < y               db  0
     269.  01:64E9                    < x               dw  0
     270.  01:64E9                    < xoff			db	0
     271.  01:64E9                    < yoff			db	0
     272.  01:64E9                    < xsize			db	0
     273.  01:64E9                    < ysize			db	0
     274.  01:64E9                    <     ends
     275.  01:64E9                      
     276.  01:64E9                      
     277.  01:64E9                      _check_obj_collision:
     278.  01:64E9                      
     279.  01:64E9                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     280.  01:64E9                      
     281.  01:64E9  D5                  	push de
     282.  01:64EA  DD E1               	pop ix		; ix   -> obj_data1
     283.  01:64EC  C5                  	push bc
     284.  01:64ED  FD E1               	pop iy		; iy   -> obj_data1
     285.  01:64EF                      
     286.  01:64EF                      check_obj_collision_8_16:
     287.  01:64EF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     288.  01:64EF                      
     289.  01:64EF  DD 7E 00            	ld  a,(ix+obj_data.y)        ; TEST Y
     290.  01:64F2  DD 86 04            	add	a,(ix+obj_data.yoff)
     291.  01:64F5  6F                  	ld	l,a				; HL=vertical pos. object 1 + 256 (i.e. Y1+256)
     292.  01:64F6  26 01               	ld	h,1
     293.  01:64F8                      	
     294.  01:64F8                      	
     295.  01:64F8  FD 7E 00            	ld  a,(iy+obj_data.y)
     296.  01:64FB  FD 86 04            	add	a,(iy+obj_data.yoff)
     297.  01:64FE  5F                  	ld	e,a		    	; DE=vertical pos. object 2 + 256 (i.e. Y2+256)
     298.  01:64FF  54                  	ld	d,h               
     299.  01:6500                      
     300.  01:6500  FD 46 06            	ld      b,(iy+obj_data.ysize)    ; B=number of pixels, object 2 (i.e. Ysize2)
     301.  01:6503                      
     302.  01:6503  AF                  	xor      a
     303.  01:6504  ED 52               	sbc     hl,de
     304.  01:6506  30 08               	jr      nc,1f       ; if HL<DE swap objects
     305.  01:6508                      
     306.  01:6508                      swap_objects_y:
     307.  01:6508                      
     308.  01:6508  DD 46 06            	ld      b,(ix+obj_data.ysize)    ; B=number of pixels, object 1 (i.e. Ysize1)
     309.  01:650B                      
     310.  01:650B  EB                  	ex      de,hl
     311.  01:650C  67                  	ld      h,a			; NB: A is 0
     312.  01:650D  6F                  	ld      l,a
     313.  01:650E  ED 52               	sbc     hl,de       ; HL = - HL
     314.  01:6510                      
     315.  01:6510  B4                  1:	or      h			; NB: A was 0
     316.  01:6511  20 30               	jr      nz,9f       ; Delta Y>256 == test failed (NB: CF = 0)
     317.  01:6513                      
     318.  01:6513  7D                  	ld      a,l         ; A = abs(Y2+256-(Y1+256)); B = (Y2>Y1) ? Ysize1 : Ysize2;
     319.  01:6514  B8                  	cp      b
     320.  01:6515  30 2C               	jr      nc,9f       ; delta Y> B == test failed
     321.  01:6517                      
     322.  01:6517                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     323.  01:6517  06 01               	ld	b,1
     324.  01:6519                      
     325.  01:6519  DD 6E 01            	ld  l,(ix+obj_data.x)        ; TEST X
     326.  01:651C  DD 66 02            	ld  h,(ix+obj_data.x+1)
     327.  01:651F  DD 4E 03            	ld	c,(ix+obj_data.xoff)
     328.  01:6522  09                  	add	hl,bc		    ; HL=x pos. object 1 + 256 (i.e. X1+256)
     329.  01:6523                      
     330.  01:6523  FD 5E 01            	ld  e,(iy+obj_data.x)
     331.  01:6526  FD 56 02            	ld  d,(iy+obj_data.x+1)
     332.  01:6529  FD 4E 03            	ld	c,(iy+obj_data.xoff)
     333.  01:652C  09                  	add	hl,bc		    ; DE=x pos. object 2 + 256 (i.e. X2+256)
     334.  01:652D  EB                  	ex	de,hl               
     335.  01:652E                      
     336.  01:652E  FD 46 05            	ld      b,(iy+obj_data.xsize)    ; Xsize2 in b
     337.  01:6531                      
     338.  01:6531  AF                  	xor      a
     339.  01:6532  ED 52               	sbc     hl,de       ; x1-x2
     340.  01:6534  30 08               	jr      nc,1f       ; if (x1-x2>=0) swap objects (NB CF=0)
     341.  01:6536                      
     342.  01:6536                      swap_objects_x:
     343.  01:6536                      
     344.  01:6536  DD 46 05            	ld      b,(ix+obj_data.xsize)    ; Xsize1 in b
     345.  01:6539                      
     346.  01:6539  EB                  	ex      de,hl
     347.  01:653A  67                  	ld      h,a			; NB: A is 0
     348.  01:653B  6F                  	ld      l,a
     349.  01:653C  ED 52               	sbc     hl,de       ; hl=x1-x2
     350.  01:653E                      
     351.  01:653E  B4                  1:	or      h
     352.  01:653F  20 02               	jr      nz,9f       ; if delta X>256 the test on X failed (NB CF=0)
     353.  01:6541                      
     354.  01:6541  7D                  	ld      a,l
     355.  01:6542  B8                  	cp      b           ; CF holds the test result on X
     356.  01:6543                      
     357.  01:6543                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     358.  01:6543                      
     359.  01:6543                      9:              
     360.  01:6543  ED 62               	sbc     hl,hl       ; return hl = -1 if obj1 and obj2 collide
     361.  01:6545                      
     362.  01:6545  C9                  	ret
     363.  01:6546                      
     364.  01:6546                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     365.  01:6546                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     366.  01:6546                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     367.  01:6546                      
     368.  01:6546                      	
     369.  01:6546                      	
     370.  01:6546                      	
     698   01:6546                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     699   01:6546                      
     700   01:6546                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     701   01:6546                      	include scorebar.asm
       1.  01:6546                      test_1up:
       2.  01:6546  A7                  	and	a
       3.  01:6547  ED 52               	sbc	hl,de
       4.  01:6549  D0                  	ret	nc
       5.  01:654A  19                  	add	hl,de	; hl = score
       6.  01:654B  09                  	add	hl,bc	; hl = score + newpts
       7.  01:654C  A7                  	and	a
       8.  01:654D  ED 52               	sbc	hl,de
       9.  01:654F  D8                  	ret	c		; if newscore < 20.000 returns
      10.  01:6550  D9                  	exx
      11.  01:6551  3E 12               	ld	a,18	; one up
      12.  01:6553  CD BE 05            	call	AFXPLAY
      13.  01:6556  0E 01               	ld	c,1							; show lives on screen 
      14.  01:6558  CD 9B 65            	call	add_c_lives_bin
      15.  01:655B  D9                  	exx
      16.  01:655C  C9                  	ret
      17.  01:655D                      
      18.  01:655D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      19.  01:655D                      ;	in BC the score to be added
      20.  01:655D                      ;
      21.  01:655D                      add_bc_score_bin:
      22.  01:655D  2A 0E EE            	ld	hl,(score_bin)
      23.  01:6560  11 20 4E            	ld	de,0x4E20	; 20.000 points
      24.  01:6563  CD 46 65            	call	test_1up
      25.  01:6566  2A 0E EE            	ld	hl,(score_bin)
      26.  01:6569  11 40 9C            	ld	de,0x9C40	; 40.000 points
      27.  01:656C  CD 46 65            	call	test_1up
      28.  01:656F  2A 0E EE            	ld	hl,(score_bin)
      29.  01:6572  11 60 EA            	ld	de,0xEA60	; 60.000 points
      30.  01:6575  CD 46 65            	call	test_1up
      31.  01:6578                      	
      32.  01:6578                      	
      33.  01:6578  2A 0E EE            	ld	hl,(score_bin)
      34.  01:657B  09                  	add	hl,bc
      35.  01:657C  22 0E EE            	ld	(score_bin),hl
      36.  01:657F  5D                  	ld	e,l
      37.  01:6580  54                  	ld	d,h
      38.  01:6581  2A 10 EE            	ld	hl,(score_bin+2)
      39.  01:6584  01 00 00            	ld	bc,0
      40.  01:6587  ED 4A               	adc	hl,bc
      41.  01:6589  22 10 EE            	ld	(score_bin+2),hl
      42.  01:658C                      	
      43.  01:658C  01 03 EE            	ld	bc,score-4
      44.  01:658F  CD 02 67            	call	long2ascii
      45.  01:6592                      	
      46.  01:6592                      	; ld	a,13		; CR
      47.  01:6592                      	; ld	(de),a
      48.  01:6592                      	
      49.  01:6592  21 07 EE            	ld	hl,score
      50.  01:6595  11 28 1D            	ld	de,0x1C08+9*32
      51.  01:6598  C3 D0 65            	jp	print_str
      52.  01:659B                      
      53.  01:659B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      54.  01:659B                      ;	in C the lives to be added
      55.  01:659B                      add_c_lives_bin:
      56.  01:659B  3A 12 EE            	ld	a,(lives_bin)
      57.  01:659E  81                  	add	a,c
      58.  01:659F  18 04               	jr	1f
      59.  01:65A1                      sub_c_lives_bin:
      60.  01:65A1  3A 12 EE            	ld	a,(lives_bin)
      61.  01:65A4  91                  	sub	a,c
      62.  01:65A5  27                  1:	daa
      63.  01:65A6  32 12 EE            	ld	(lives_bin),a
      64.  01:65A9  5F                  	ld	e,a
      65.  01:65AA  21 00 EE            	ld	hl,lives
      66.  01:65AD  0F 0F 0F 0F         [4]	rrca
      67.  01:65B1  E6 0F                   and  $0f
      68.  01:65B3  C6 30               	add  a,'0'
      69.  01:65B5  77                  	ld	(hl),a
      70.  01:65B6  23                  	inc	hl
      71.  01:65B7  7B                  	ld	a,e
      72.  01:65B8  E6 0F               	and  $0f
      73.  01:65BA  C6 30               	add  a,'0'
      74.  01:65BC  77                  	ld	(hl),a
      75.  01:65BD                      	; inc	hl
      76.  01:65BD                      	; ld	a,13		; CR
      77.  01:65BD                      	; ld	(hl),a
      78.  01:65BD                      
      79.  01:65BD  21 00 EE            	ld	hl,lives					; show lives on screen 
      80.  01:65C0  11 08 1D            	ld	de,0x1C08+8*32
      81.  01:65C3  C3 D0 65            	jp	print_str
      82.  01:65C6                      
      83.  01:65C6                      
      84.  01:65C6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      85.  01:65C6                      
      86.  01:65C6                      line1:
      87.  01:65C6                      	db	"Score ",13
      87.  01:65C6  53 63 6F 72 65 20 0D 
      88.  01:65CD                      line2:
      89.  01:65CD  30 30 0D            	db	"00",13
      90.  01:65D0                      	
      91.  01:65D0                      	
      92.  01:65D0                      print_str:
      93.  01:65D0                      	; in hl = string terminated by 13
      94.  01:65D0                      	; in de = vram position
      95.  01:65D0                      1:
      96.  01:65D0  7E                  	ld	a,(hl)
      97.  01:65D1  FE 0D               	cp	13
      98.  01:65D3  C8                  	ret	z
      99.  01:65D4  CD E3 65            	call	print
     100.  01:65D7  23                  	inc	hl
     101.  01:65D8  3E 10               	ld	a,16
     102.  01:65DA  83                  	add	a,e
     103.  01:65DB  5F                  	ld e,a
     104.  01:65DC  7A                  	ld a,d
     105.  01:65DD  CE 00               	adc a,0
     106.  01:65DF  57                  	ld d,a
     107.  01:65E0  C3 D0 65            	jp	1b
     108.  01:65E3                      	
     109.  01:65E3                      
     110.  01:65E3                      	
     111.  01:65E3                      print:
     112.  01:65E3                      	; in A = char
     113.  01:65E3                      	; in de = vram position
     114.  01:65E3  E5                  	push	hl
     115.  01:65E4  D5                  	push	de
     116.  01:65E5  F5                  	push	af
     117.  01:65E6                      		
     118.  01:65E6  C6 E0               	add	a,1-'!'
     119.  01:65E8                      	
     120.  01:65E8  6F                  	ld	l,a
     121.  01:65E9  26 00               	ld	h,0
     122.  01:65EB  29 29 29            [3]	add hl,hl
     123.  01:65EE  01 7F F8            	ld	bc,ram_tileset
     124.  01:65F1  09                  	add hl,bc
     125.  01:65F2                      	
     126.  01:65F2  01 98 04            	ld bc,0x0498
     127.  01:65F5  CD EA 66            	call	plot_tile
     128.  01:65F8                      
     129.  01:65F8  3E 80               	ld	a,4*32
     130.  01:65FA  83                  	add	a,e
     131.  01:65FB  5F                  	ld e,a
     132.  01:65FC  7A                  	ld a,d
     133.  01:65FD  CE 00               	adc a,0
     134.  01:65FF  57                  	ld d,a
     135.  01:6600                      
     136.  01:6600  01 98 04            	ld bc,0x0498
     137.  01:6603  CD EA 66            	call	plot_tile
     138.  01:6606                      
     139.  01:6606  F1                  	pop	af
     140.  01:6607  D1                  	pop	de
     141.  01:6608  E1                  	pop	hl
     142.  01:6609  C9                  	ret
     143.  01:660A                      
     144.  01:660A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     145.  01:660A                      	
     146.  01:660A                      land_now:
     147.  01:660A                      	db	"Land now",13
     147.  01:660A  4C 61 6E 64 20 6E 6F 77 0D 
     148.  01:6613                      dummy:
     149.  01:6613                      	db	"        ",13
     149.  01:6613  20 20 20 20 20 20 20 20 0D 
     150.  01:661C                      warping:
     151.  01:661C                      	db	" Warping",13
     151.  01:661C  20 57 61 72 70 69 6E 67 0D 
     152.  01:6625                      defeated:
     153.  01:6625                      	db	"Defeated",13
     153.  01:6625  44 65 66 65 61 74 65 64 0D 
     154.  01:662E                      GameOver:
     155.  01:662E                      	db	"GameOver",13
     155.  01:662E  47 61 6D 65 4F 76 65 72 0D 
     156.  01:6637                      levelnames:
     157.  01:6637                      	db	"  Zinc  ",13
     157.  01:6637  20 20 5A 69 6E 63 20 20 0D 
     158.  01:6640                      	db	"  Lead  ",13
     158.  01:6640  20 20 4C 65 61 64 20 20 0D 
     159.  01:6649                      	db	" Copper ",13
     159.  01:6649  20 43 6F 70 70 65 72 20 0D 
     160.  01:6652                      	db	" Silver ",13
     160.  01:6652  20 53 69 6C 76 65 72 20 0D 
     161.  01:665B                      	db	"  Iron  ",13
     161.  01:665B  20 20 49 72 6F 6E 20 20 0D 
     162.  01:6664                      	db	"  Gold  ",13
     162.  01:6664  20 20 47 6F 6C 64 20 20 0D 
     163.  01:666D                      	db	"Platinum",13
     163.  01:666D  50 6C 61 74 69 6E 75 6D 0D 
     164.  01:6676                      	db	"Tungsten",13
     164.  01:6676  54 75 6E 67 73 74 65 6E 0D 
     165.  01:667F                      	db	" Iridon ",13
     165.  01:667F  20 49 72 69 64 6F 6E 20 0D 
     166.  01:6688                      	db	"Kallisto",13
     166.  01:6688  4B 61 6C 6C 69 73 74 6F 0D 
     167.  01:6691                      	db	"TriAlloy",13
     167.  01:6691  54 72 69 41 6C 6C 6F 79 0D 
     168.  01:669A                      	db	"Quadmium",13
     168.  01:669A  51 75 61 64 6D 69 75 6D 0D 
     169.  01:66A3                      	db	"Ergonite",13
     169.  01:66A3  45 72 67 6F 6E 69 74 65 0D 
     170.  01:66AC                      	db	"Galactus",13
     170.  01:66AC  47 61 6C 61 63 74 75 73 0D 
     171.  01:66B5                      	db	"Uridium ",13
     171.  01:66B5  55 72 69 64 69 75 6D 20 0D 
     172.  01:66BE                      	
     173.  01:66BE                      	
     174.  01:66BE                      print_strf:
     175.  01:66BE                      	; in hl = string terminated by 13
     176.  01:66BE                      	; in de = vram position
     177.  01:66BE                      1:
     178.  01:66BE  7E                  	ld	a,(hl)
     179.  01:66BF  FE 0D               	cp	13
     180.  01:66C1  C8                  	ret	z
     181.  01:66C2  CD D1 66            	call	printf
     182.  01:66C5  23                  	inc	hl
     183.  01:66C6  3E 10               	ld	a,16
     184.  01:66C8  83                  	add	a,e
     185.  01:66C9  5F                  	ld e,a
     186.  01:66CA  7A                  	ld a,d
     187.  01:66CB  CE 00               	adc a,0
     188.  01:66CD  57                  	ld d,a
     189.  01:66CE  C3 BE 66            	jp	1b
     190.  01:66D1                      
     191.  01:66D1                      printf:
     192.  01:66D1                      	; in A = char
     193.  01:66D1                      	; in de = vram position
     194.  01:66D1  E5                  	push	hl
     195.  01:66D2  D5                  	push	de
     196.  01:66D3  F5                  	push	af
     197.  01:66D4                      		
     198.  01:66D4  C6 E0               	add	a,1-'!'
     199.  01:66D6                      	
     200.  01:66D6  6F                  	ld	l,a
     201.  01:66D7  26 00               	ld	h,0
     202.  01:66D9  29 29 29            [3]	add hl,hl
     203.  01:66DC  01 7F F8            	ld	bc,ram_tileset
     204.  01:66DF  09                  	add hl,bc
     205.  01:66E0                      	
     206.  01:66E0  01 98 08            	ld bc,0x0898
     207.  01:66E3  CD EA 66            	call	plot_tile
     208.  01:66E6                      
     209.  01:66E6  F1                  	pop	af
     210.  01:66E7  D1                  	pop	de
     211.  01:66E8  E1                  	pop	hl
     212.  01:66E9  C9                  	ret
     213.  01:66EA                      
     214.  01:66EA                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     215.  01:66EA                      	
     216.  01:66EA                      plot_tile:	
     217.  01:66EA  F3                  	di
     218.  01:66EB  7B                  	ld	a,e
     219.  01:66EC  D3 99               	out (0x99),a
     220.  01:66EE  7A                  	ld	a,d 
     221.  01:66EF  F6 40               	or	0x40
     222.  01:66F1  D3 99               	out (0x99),a
     223.  01:66F3                      	
     224.  01:66F3  0E 98               	ld	c,0x98
     225.  01:66F5  AF                  	xor	a
     226.  01:66F6  ED A3               1:	outi	
     227.  01:66F8  00                  	nop
     228.  01:66F9  00                  	nop
     229.  01:66FA  00                  	nop
     230.  01:66FB  ED 79               	out (c),a
     231.  01:66FD  C2 F6 66            	jp nz,1b
     232.  01:6700  FB                  	ei
     233.  01:6701  C9                  	ret
     234.  01:6702                      
     235.  01:6702                      	
     236.  01:6702                      
     237.  01:6702                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     238.  01:6702                      ; IN HL:DE INPUT
     239.  01:6702                      ; BC POINTS TO OUTPUT
     240.  01:6702                      
     241.  01:6702                      long2ascii:
     242.  01:6702                      					; HL = HIGH WORD
     243.  01:6702  D5                  	PUSH	DE
     244.  01:6703  D9                  	EXX
     245.  01:6704  E1                  	POP		HL		; HL' = LOW WORD
     246.  01:6705  D9                  	EXX
     247.  01:6706                      
     248.  01:6706  59                  	LD	E,C
     249.  01:6707  50                  	LD	D,B
     250.  01:6708                      
     251.  01:6708  01 65 C4            	LD	BC,-1000000000/0x10000 -1
     252.  01:670B  D9                  	EXX
     253.  01:670C  01 00 36            	LD	BC,-1000000000&0xFFFF
     254.  01:670F  D9                  	EXX
     255.  01:6710  CD 73 67            	CALL	NUM1
     256.  01:6713                      
     257.  01:6713  01 0A FA            	LD	BC,-100000000/0x10000 -1
     258.  01:6716  D9                  	EXX
     259.  01:6717  01 00 1F            	LD	BC,-100000000&0xFFFF
     260.  01:671A  D9                  	EXX
     261.  01:671B  CD 73 67            	CALL	NUM1
     262.  01:671E                      
     263.  01:671E  01 67 FF            	LD	BC,-10000000/0x10000 -1
     264.  01:6721  D9                  	EXX
     265.  01:6722  01 80 69            	LD	BC,-10000000&0xFFFF
     266.  01:6725  D9                  	EXX
     267.  01:6726  CD 73 67            	CALL	NUM1
     268.  01:6729                      
     269.  01:6729  01 F0 FF            	LD	BC,-1000000/0x10000 -1
     270.  01:672C  D9                  	EXX
     271.  01:672D  01 C0 BD            	LD	BC,-1000000&0xFFFF
     272.  01:6730  D9                  	EXX
     273.  01:6731  CD 73 67            	CALL	NUM1
     274.  01:6734                      
     275.  01:6734  01 FE FF            	LD	BC,-100000/0x10000 -1
     276.  01:6737  D9                  	EXX
     277.  01:6738  01 60 79            	LD	BC,-100000&0xFFFF
     278.  01:673B  D9                  	EXX
     279.  01:673C  CD 73 67            	CALL	NUM1
     280.  01:673F                      
     281.  01:673F  01 FF FF            	LD	BC,-10000/0x10000 -1
     282.  01:6742  D9                  	EXX
     283.  01:6743  01 F0 D8            	LD	BC,-10000&0xFFFF
     284.  01:6746  D9                  	EXX
     285.  01:6747  CD 73 67            	CALL	NUM1
     286.  01:674A                      
     287.  01:674A  01 FF FF            	LD	BC,-1000/0x10000 -1
     288.  01:674D  D9                  	EXX
     289.  01:674E  01 18 FC            	LD	BC,-1000&0xFFFF
     290.  01:6751  D9                  	EXX
     291.  01:6752  CD 73 67            	CALL	NUM1
     292.  01:6755                      
     293.  01:6755  01 FF FF            	LD	BC,-100/0x10000 -1
     294.  01:6758  D9                  	EXX
     295.  01:6759  01 9C FF            	LD	BC,-100&0xFFFF
     296.  01:675C  D9                  	EXX
     297.  01:675D  CD 73 67            	CALL	NUM1
     298.  01:6760                      
     299.  01:6760  01 FF FF            	LD	BC,-10/0x10000 -1
     300.  01:6763  D9                  	EXX
     301.  01:6764  01 F6 FF            	LD	BC,-10&0xFFFF
     302.  01:6767  D9                  	EXX
     303.  01:6768  CD 73 67            	CALL	NUM1
     304.  01:676B                      
     305.  01:676B  01 FF FF            	LD	BC,-1/0x10000 -1
     306.  01:676E  D9                  	EXX
     307.  01:676F  01 FF FF            	LD	BC,-1&0xFFFF
     308.  01:6772  D9                  	EXX
     309.  01:6773                      
     310.  01:6773                      NUM1:
     311.  01:6773  3E 2F               	LD	A,'0'-1	 ; '0' IN THE TILESET
     312.  01:6775                      
     313.  01:6775                      1:
     314.  01:6775  3C                  	INC A
     315.  01:6776  D9                  	EXX
     316.  01:6777  09                  	add HL,BC		; low word
     317.  01:6778  D9                  	EXX
     318.  01:6779  ED 4A               	ADC HL,BC		; high word
     319.  01:677B  DA 75 67            	jp	C,1b
     320.  01:677E                      
     321.  01:677E  D9                  	EXX
     322.  01:677F  ED 42               	SBC HL,BC		; low word
     323.  01:6781  D9                  	EXX
     324.  01:6782  ED 42               	SBC HL,BC		; high word
     325.  01:6784                      
     326.  01:6784  12                  	LD	(DE),A
     327.  01:6785  13                  	INC DE
     328.  01:6786  C9                  	RET
     702   01:6787                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     703   01:6787                      ms_col_win:
     704   01:6787                      	include ms_demo_frm_coll_wind.asm
       1.  01:6787                      ms_demo_coll_wind:
       2.  01:6787  07 0D 01 0F             defb 7,13,1,15 
       3.  01:678B  07 0B 01 0F             defb 7,11,1,15 
       4.  01:678F  05 09 01 0F             defb 5,9,1,15 
       5.  01:6793  04 0D 01 0F             defb 4,13,1,15 
       6.  01:6797  04 0C 01 0F             defb 4,12,1,15 
       7.  01:679B  04 0C 01 0F             defb 4,12,1,15 
       8.  01:679F  03 09 01 0F             defb 3,9,1,15 
       9.  01:67A3  03 0C 01 0F             defb 3,12,1,15 
      10.  01:67A7  03 0D 01 0F             defb 3,13,1,15 
      11.  01:67AB  03 0D 01 0F             defb 3,13,1,15 
      12.  01:67AF  03 0F 01 0F             defb 3,15,1,15 
      13.  01:67B3  03 0F 01 0F             defb 3,15,1,15 
      14.  01:67B7  01 0F 07 0D             defb 1,15,7,13 
      15.  01:67BB  01 0F 04 0A             defb 1,15,4,10 
      16.  01:67BF  01 0F 07 0C             defb 1,15,7,12 
      17.  01:67C3  01 0F 06 0C             defb 1,15,6,12 
      18.  01:67C7  01 0F 07 0D             defb 1,15,7,13 
      19.  01:67CB  01 0F 04 0A             defb 1,15,4,10 
      20.  01:67CF  01 0F 05 0B             defb 1,15,5,11 
      21.  01:67D3  01 0F 06 0C             defb 1,15,6,12 
      22.  01:67D7  01 0F 05 0A             defb 1,15,5,10 
      23.  01:67DB  01 0F 05 0B             defb 1,15,5,11 
      24.  01:67DF  01 0F 05 0C             defb 1,15,5,12 
      25.  01:67E3  01 0F 06 0D             defb 1,15,6,13 
      26.  01:67E7  01 0F 05 0C             defb 1,15,5,12 
      27.  01:67EB  01 0F 04 0B             defb 1,15,4,11 
      28.  01:67EF  01 0F 05 0C             defb 1,15,5,12 
      29.  01:67F3  01 0F 05 0C             defb 1,15,5,12 
      30.  01:67F7  01 0F 03 0E             defb 1,15,3,14 
      31.  01:67FB  01 0F 03 0E             defb 1,15,3,14 
      32.  01:67FF  01 0F 05 0F             defb 1,15,5,15 
      33.  01:6803  01 0F 02 0C             defb 1,15,2,12 
      34.  01:6807  01 0F 03 0E             defb 1,15,3,14 
      35.  01:680B  01 0F 03 0E             defb 1,15,3,14 
      36.  01:680F  01 0F 01 0F             defb 1,15,1,15 
      37.  01:6813  01 0D 01 0F             defb 1,13,1,15 
      38.  01:6817  01 0F 01 0F             defb 1,15,1,15 
      39.  01:681B  01 0D 01 0F             defb 1,13,1,15 
      40.  01:681F  01 0F 01 0F             defb 1,15,1,15 
      41.  01:6823  01 0F 01 0F             defb 1,15,1,15 
      42.  01:6827                      
     705   01:6827                      ms_bllts_col_win:
     706   01:6827                      	include ms_bllts_frm_coll_wind.asm
       1.  01:6827                      ms_bllts_coll_wind:
       2.  01:6827  05 0B 02 0E             defb 5,11,2,14 
       3.  01:682B  05 0B 04 0D             defb 5,11,4,13 
       4.  01:682F  05 0B 06 0B             defb 5,11,6,11 
       5.  01:6833  05 0B 07 0A             defb 5,11,7,10 
       6.  01:6837  05 0B 08 08             defb 5,11,8,8 
       7.  01:683B  05 0B 07 0A             defb 5,11,7,10 
       8.  01:683F  05 0B 06 0B             defb 5,11,6,11 
       9.  01:6843  05 0B 04 0D             defb 5,11,4,13 
      10.  01:6847                      
     707   01:6847                      	include ms_crtl.asm
       1.  01:6847                      	
       2.  01:6847  (01:0000)           ms_fly__right				equ	0
       3.  01:6847  (01:0001)           ms_spin_face_right			equ	1
       4.  01:6847  (01:0002)           ms_side_dwn_face_right		equ	2
       5.  01:6847  (01:0003)           ms_side_up__face_right		equ	3
       6.  01:6847                      
       7.  01:6847  (01:0004)           ms_fly__left				equ	4
       8.  01:6847  (01:0005)           ms_spin_face_left			equ	5
       9.  01:6847  (01:0006)           ms_side_dwn_face_left		equ	6
      10.  01:6847  (01:0007)           ms_side_up__face_left		equ	7
      11.  01:6847                      
      12.  01:6847  (01:0008)           ms_loop_right2left			equ	8
      13.  01:6847  (01:0009)           ms_loop_left2right			equ	9
      14.  01:6847                      
      15.  01:6847  (01:000A)           ms_explode					equ	10
      16.  01:6847  (01:000B)           ms_landing					equ	11
      17.  01:6847  (01:000C)           ms_reset					equ	12
      18.  01:6847                      
      19.  01:6847                      ;%%%%%%%%%%%%%%%%%%%%%%
      20.  01:6847                      ms_ctrl:
      21.  01:6847  3A 27 EC            	ld	a,(ms_state)
      22.  01:684A  FE 09               	cp	ms_explode-1		; ms cannot move while exploding landing or at level reset
      23.  01:684C  DC 9A 68            	call	c,.ms_directions
      24.  01:684F                      
      25.  01:684F                      .intro:
      26.  01:684F  3A 27 EC            	ld	a,(ms_state)
      27.  01:6852  FE 00               	cp	ms_fly__right
      28.  01:6854  CA 62 69            	jp	z,.ms_fly__right
      29.  01:6857                      	
      30.  01:6857  FE 08               	cp	ms_loop_right2left
      31.  01:6859  CA B1 69            	jp	z,.ms_loop_right2left
      32.  01:685C                      	
      33.  01:685C  FE 05               	cp	ms_spin_face_left
      34.  01:685E  CA CB 69            	jp	z,.ms_spin_face_left
      35.  01:6861                      	
      36.  01:6861  FE 04               	cp	ms_fly__left
      37.  01:6863  CA E1 69            	jp	z,.ms_fly__left
      38.  01:6866                      	
      39.  01:6866  FE 09               	cp	ms_loop_left2right
      40.  01:6868  CA 33 6A            	jp	z,.ms_loop_left2right
      41.  01:686B                      
      42.  01:686B  FE 01               	cp	ms_spin_face_right
      43.  01:686D  CA 4D 6A            	jp	z,.ms_spin_face_right
      44.  01:6870                      	
      45.  01:6870  FE 02               	cp	ms_side_dwn_face_right
      46.  01:6872  CA 63 6A            	jp	z,.ms_side_dwn_face_right
      47.  01:6875                      
      48.  01:6875  FE 03               	cp	ms_side_up__face_right
      49.  01:6877  CA 9A 6A            	jp	z,.ms_side_up__face_right
      50.  01:687A                      	
      51.  01:687A  FE 06               	cp	ms_side_dwn_face_left
      52.  01:687C  CA D1 6A            	jp	z,.ms_side_dwn_face_left
      53.  01:687F                      
      54.  01:687F  FE 07               	cp	ms_side_up__face_left
      55.  01:6881  CA 09 6B            	jp	z,.ms_side_up__face_left
      56.  01:6884                      
      57.  01:6884  FE 0A               	cp	ms_explode
      58.  01:6886  CA 41 6B            	jp	z,.ms_explode
      59.  01:6889                      	
      60.  01:6889  FE 0B               	cp	ms_landing
      61.  01:688B  CA 99 68            	jp	z,.ms_landing
      62.  01:688E                      
      63.  01:688E  FE 0C               	cp	ms_reset
      64.  01:6890  CA 99 68            	jp	z,.ms_reset
      65.  01:6893                      	
      66.  01:6893                      ;	abnormal end
      67.  01:6893  3E 00               	ld	a,ms_fly__right
      68.  01:6895  32 27 EC            	ld	(ms_state),a
      69.  01:6898  C9                  	ret
      70.  01:6899                      	
      71.  01:6899                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      72.  01:6899                      ;	FAKE FOR TEST
      73.  01:6899                      .ms_landing	
      74.  01:6899                      .ms_reset 
      75.  01:6899  C9                  	ret
      76.  01:689A                      	
      77.  01:689A                         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      78.  01:689A                          ;	control X and Y 
      79.  01:689A                      
      80.  01:689A                      .ms_directions:
      81.  01:689A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      82.  01:689A                      	; read joystick and keyboard
      83.  01:689A  CD E0 68            	call	.rd_joy
      84.  01:689D                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      85.  01:689D                          ; x speed control of the screen and of the main ship
      86.  01:689D  CD 5C 69                call    .right
      87.  01:68A0  20 0B                   jr  nz,1f
      88.  01:68A2  3A ED ED                ld  a,(dxmap)
      89.  01:68A5  FE 10                   cp  maxspeed        ; MAX SPEED
      90.  01:68A7  28 04                   jr  z,1f
      91.  01:68A9  3C                      inc a
      92.  01:68AA  32 ED ED                ld  (dxmap),a
      93.  01:68AD                      1:
      94.  01:68AD  CD 56 69                call    .left
      95.  01:68B0  20 0B                   jr  nz,1f
      96.  01:68B2  3A ED ED                ld  a,(dxmap)
      97.  01:68B5  FE F0                   cp  -maxspeed       ; MAX SPEED
      98.  01:68B7  28 04                   jr  z,1f
      99.  01:68B9  3D                      dec a
     100.  01:68BA  32 ED ED                ld  (dxmap),a
     101.  01:68BD                      1:
     102.  01:68BD                      
     103.  01:68BD                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     104.  01:68BD                          ; y control of the main ship
     105.  01:68BD                      
     106.  01:68BD  CD 44 69                call    .up
     107.  01:68C0  20 0C                   jr  nz,1f
     108.  01:68C2  3A F0 ED                ld  a,(yship)
     109.  01:68C5  C6 FC               	add	a,-4
     110.  01:68C7  FE 40                   cp  48+16
     111.  01:68C9  38 03                   jr  c,1f
     112.  01:68CB  32 F0 ED                ld  (yship),a
     113.  01:68CE                      1:
     114.  01:68CE  CD 50 69                call    .dwn
     115.  01:68D1  20 0C                   jr  nz,1f
     116.  01:68D3  3A F0 ED                ld  a,(yship)
     117.  01:68D6  C6 04               	add	a,4
     118.  01:68D8  FE B1                   cp  192-16+1
     119.  01:68DA  30 03                   jr  nc,1f
     120.  01:68DC  32 F0 ED                ld  (yship),a
     121.  01:68DF                      1:
     122.  01:68DF  C9                  	ret
     123.  01:68E0                      
     124.  01:68E0                      	
     125.  01:68E0                      ; PSG I/O port A (r#14) – read-only
     126.  01:68E0                      ; Bit	Description	Comment
     127.  01:68E0                      ; 0	Input joystick pin 1	(up)
     128.  01:68E0                      ; 1	Input joystick pin 2	(down)
     129.  01:68E0                      ; 2	Input joystick pin 3	(left)
     130.  01:68E0                      ; 3	Input joystick pin 4	(right)
     131.  01:68E0                      ; 4	Input joystick pin 6	(trigger A)
     132.  01:68E0                      ; 5	Input joystick pin 7	(trigger B)
     133.  01:68E0                      ; 6	Japanese keyboard layout bit	(1=JIS, 0=ANSI)
     134.  01:68E0                      ; 7	Cassette input signal	
     135.  01:68E0                      
     136.  01:68E0                      .rd_joy:
     137.  01:68E0  3E 0F               	ld	a,#0f
     138.  01:68E2  D3 A0               	out	(#a0),a
     139.  01:68E4  3E 8F               	ld	a,0x8F
     140.  01:68E6  D3 A1               	out	(#a1),a		; select port A
     141.  01:68E8  3E 0E               	ld	a,#0e
     142.  01:68EA  D3 A0               	out	(#a0),a
     143.  01:68EC  DB A2               	in	a,(#a2)
     144.  01:68EE                      .rd_key:	
     145.  01:68EE  DD 21 F8 ED         	ld	ix,joystick
     146.  01:68F2  DD 77 00            	ld	(ix),a
     147.  01:68F5                      	
     148.  01:68F5  1E 08               	ld  e,8
     149.  01:68F7  CD 30 3F                call    checkkbd
     150.  01:68FA  CB 47               	bit	0,a				; space
     151.  01:68FC  20 04               	jr	nz,1f
     152.  01:68FE  DD CB 00 A6         	res	4,(ix)			; (trigger A)
     153.  01:6902                      1:
     154.  01:6902  CB 7F               	bit	7,a				; RIGHT
     155.  01:6904  20 04               	jr	nz,1f
     156.  01:6906  DD CB 00 9E         	res	3,(ix)			; (right joy)
     157.  01:690A                      1:
     158.  01:690A  CB 77               	bit	6,a				; DOWN
     159.  01:690C  20 04               	jr	nz,1f
     160.  01:690E  DD CB 00 8E         	res	1,(ix)			; (down joy)
     161.  01:6912                      1:
     162.  01:6912  CB 6F               	bit	5,a				; UP
     163.  01:6914  20 04               	jr	nz,1f
     164.  01:6916  DD CB 00 86         	res	0,(ix)			; (up joy)
     165.  01:691A                      1:
     166.  01:691A  CB 67               	bit	4,a				; LEFT
     167.  01:691C  20 04               	jr	nz,1f
     168.  01:691E  DD CB 00 96         	res	2,(ix)			; (left joy)
     169.  01:6922                      1:
     170.  01:6922  1E 05               	ld  e,5
     171.  01:6924  CD 30 3F                call    checkkbd
     172.  01:6927  CB 6F               	bit	5,a				; X
     173.  01:6929  20 04               	jr	nz,1f
     174.  01:692B  DD CB 00 AE         	res	5,(ix)			; (trigger B)
     175.  01:692F                      1:
     176.  01:692F  CB 7F               	bit	7,a				; Z
     177.  01:6931  20 04               	jr	nz,1f
     178.  01:6933  DD CB 00 A6         	res	4,(ix)			; (trigger A)
     179.  01:6937                      1:
     180.  01:6937  C9                  	ret
     181.  01:6938                      
     182.  01:6938                      	
     183.  01:6938                      	
     184.  01:6938                      ;    5   |    Z     Y     X     W     V     U     T     S
     185.  01:6938                      ;    6   |   F3    F2    F1   CODE   CAP  GRAPH CTRL  SHIFT
     186.  01:6938                      ;    7   |   RET   SEL   BS   STOP   TAB   ESC   F5    F4
     187.  01:6938                      ;    8   |  RIGHT DOWN   UP   LEFT   DEL   INS  HOME  SPACE
     188.  01:6938                      .z_or_space:
     189.  01:6938                      	; ld  e,5
     190.  01:6938                          ; call    checkkbd
     191.  01:6938                      	; and	128
     192.  01:6938                      	; ret	z
     193.  01:6938                      	; ld  e,8
     194.  01:6938                          ; call    checkkbd
     195.  01:6938                      	; and	1		; z || SPACE
     196.  01:6938  3A F8 ED            	ld	a,(joystick)
     197.  01:693B  E6 10               	and	16
     198.  01:693D  C9                  	ret
     199.  01:693E                      .x_and_up:
     200.  01:693E                      	; ld  e,5
     201.  01:693E                          ; call    checkkbd
     202.  01:693E                      	; and	32
     203.  01:693E  3A F8 ED            	ld	a,(joystick)
     204.  01:6941  E6 20               	and	32
     205.  01:6943  C0                  	ret	nz
     206.  01:6944                      .up:
     207.  01:6944                      	; ld  e,8
     208.  01:6944                          ; call    checkkbd
     209.  01:6944                      	; and	32		; X & UP
     210.  01:6944  3A F8 ED            	ld	a,(joystick)
     211.  01:6947  E6 01               	and	1
     212.  01:6949  C9                  	ret
     213.  01:694A                      .x_and_dwn:
     214.  01:694A                      	; ld  e,5
     215.  01:694A                          ; call    checkkbd
     216.  01:694A                      	; and	32
     217.  01:694A  3A F8 ED            	ld	a,(joystick)
     218.  01:694D  E6 20               	and	32
     219.  01:694F  C0                  	ret	nz
     220.  01:6950                      .dwn:
     221.  01:6950                      	; ld  e,8
     222.  01:6950                          ; call    checkkbd
     223.  01:6950                      	; and	64		; X & DWN
     224.  01:6950  3A F8 ED            	ld	a,(joystick)
     225.  01:6953  E6 02               	and	2
     226.  01:6955  C9                  	ret
     227.  01:6956                      .left:
     228.  01:6956                      	; ld  e,8
     229.  01:6956                          ; call    checkkbd
     230.  01:6956                      	; and	16
     231.  01:6956  3A F8 ED            	ld	a,(joystick)
     232.  01:6959  E6 04               	and	4
     233.  01:695B  C9                  	ret
     234.  01:695C                      .right:
     235.  01:695C                      	; ld  e,8
     236.  01:695C                          ; call    checkkbd
     237.  01:695C                      	; and	128
     238.  01:695C  3A F8 ED            	ld	a,(joystick)
     239.  01:695F  E6 08               	and	8
     240.  01:6961  C9                  	ret
     241.  01:6962                      
     242.  01:6962                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     243.  01:6962                      .ms_fly__right:		
     244.  01:6962  3A ED ED            	ld  a,(dxmap)
     245.  01:6965  CB 7F               	bit	7,a
     246.  01:6967  28 0A               	jr z,1f
     247.  01:6969                      	
     248.  01:6969  AF                  	xor	a
     249.  01:696A  32 25 EC            	ld  (aniframe),a
     250.  01:696D  3E 08               	ld	a,ms_loop_right2left
     251.  01:696F  32 27 EC            	ld	(ms_state),a
     252.  01:6972  C9                  	ret
     253.  01:6973                      1:
     254.  01:6973  3E 20               	ld	a,32
     255.  01:6975  32 25 EC            	ld  (aniframe),a
     256.  01:6978  CD 3E 69            	call	.x_and_up
     257.  01:697B  C2 89 69            	jp	nz,1f
     258.  01:697E  3E 20               	ld	a,32
     259.  01:6980  32 25 EC            	ld  (aniframe),a
     260.  01:6983  3E 03               	ld	a,ms_side_up__face_right
     261.  01:6985  32 27 EC            	ld	(ms_state),a
     262.  01:6988  C9                  	ret
     263.  01:6989  CD 4A 69            1:	call	.x_and_dwn
     264.  01:698C  C2 9A 69            	jp	nz,1f
     265.  01:698F  3E 28               	ld	a,40
     266.  01:6991  32 25 EC            	ld  (aniframe),a
     267.  01:6994  3E 02               	ld	a,ms_side_dwn_face_right
     268.  01:6996  32 27 EC            	ld	(ms_state),a
     269.  01:6999  C9                  	ret
     270.  01:699A  CD 56 69            1:	call	.left
     271.  01:699D  C2 AA 69            	jp	nz,1f
     272.  01:69A0  AF                  	xor	a
     273.  01:69A1  32 25 EC            	ld  (aniframe),a
     274.  01:69A4  3E 08               	ld	a,ms_loop_right2left
     275.  01:69A6  32 27 EC            	ld	(ms_state),a
     276.  01:69A9  C9                  	ret
     277.  01:69AA  CD 38 69            1:	call	.z_or_space
     278.  01:69AD  CA 20 6D            	jp		z,ms_shoot
     279.  01:69B0  C9                  	ret
     280.  01:69B1                      	
     281.  01:69B1                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     282.  01:69B1                      .ms_loop_right2left:
     283.  01:69B1  3A 25 EC            	ld	a,(aniframe)
     284.  01:69B4  3C                  	inc	a
     285.  01:69B5  32 25 EC            	ld	(aniframe),a
     286.  01:69B8  FE 04               	cp	4
     287.  01:69BA  CA C6 69            	jp	z,1f
     288.  01:69BD  FE 08               	cp	8
     289.  01:69BF  C0                  	ret	nz
     290.  01:69C0  3E 05               	ld	a,ms_spin_face_left
     291.  01:69C2  32 27 EC            	ld	(ms_state),a
     292.  01:69C5  C9                  	ret
     293.  01:69C6  AF                  1:	xor	a
     294.  01:69C7  32 ED ED                ld  (dxmap),a
     295.  01:69CA  C9                  	ret
     296.  01:69CB                      	
     297.  01:69CB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     298.  01:69CB                      .ms_spin_face_left:
     299.  01:69CB  CD 38 69            	call	.z_or_space
     300.  01:69CE  CC 20 6D            	call	z,ms_shoot
     301.  01:69D1  3A 25 EC            	ld	a,(aniframe)
     302.  01:69D4  3C                  	inc	a
     303.  01:69D5  32 25 EC            	ld	(aniframe),a
     304.  01:69D8  FE 10               	cp	16
     305.  01:69DA  C0                  	ret	nz
     306.  01:69DB  3E 04               	ld	a,ms_fly__left
     307.  01:69DD  32 27 EC            	ld	(ms_state),a
     308.  01:69E0  C9                  	ret
     309.  01:69E1                      	
     310.  01:69E1                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     311.  01:69E1                      .ms_fly__left:
     312.  01:69E1  3A ED ED            	ld  a,(dxmap)
     313.  01:69E4  3D                  	dec	a
     314.  01:69E5  CB 7F               	bit	7,a
     315.  01:69E7  20 0B               	jr nz,1f
     316.  01:69E9                      	
     317.  01:69E9  3E 10               	ld	a,16
     318.  01:69EB  32 25 EC            	ld  (aniframe),a
     319.  01:69EE  3E 09               	ld	a,ms_loop_left2right
     320.  01:69F0  32 27 EC            	ld	(ms_state),a
     321.  01:69F3  C9                  	ret	
     322.  01:69F4                      1:
     323.  01:69F4  3E 30               	ld	a,48
     324.  01:69F6  32 25 EC            	ld  (aniframe),a
     325.  01:69F9  CD 3E 69            	call	.x_and_up
     326.  01:69FC  C2 0A 6A            	jp	nz,1f
     327.  01:69FF  3E 30               	ld	a,48
     328.  01:6A01  32 25 EC            	ld  (aniframe),a
     329.  01:6A04  3E 07               	ld	a,ms_side_up__face_left
     330.  01:6A06  32 27 EC            	ld	(ms_state),a
     331.  01:6A09  C9                  	ret
     332.  01:6A0A  CD 4A 69            1:	call	.x_and_dwn
     333.  01:6A0D  C2 1B 6A            	jp	nz,1f
     334.  01:6A10  3E 38               	ld	a,56
     335.  01:6A12  32 25 EC            	ld  (aniframe),a
     336.  01:6A15  3E 06               	ld	a,ms_side_dwn_face_left
     337.  01:6A17  32 27 EC            	ld	(ms_state),a
     338.  01:6A1A  C9                  	ret
     339.  01:6A1B  CD 5C 69            1:	call	.right
     340.  01:6A1E  C2 2C 6A            	jp	nz,1f
     341.  01:6A21  3E 10               	ld	a,16
     342.  01:6A23  32 25 EC            	ld  (aniframe),a
     343.  01:6A26  3E 09               	ld	a,ms_loop_left2right
     344.  01:6A28  32 27 EC            	ld	(ms_state),a
     345.  01:6A2B  C9                  	ret
     346.  01:6A2C  CD 38 69            1:	call	.z_or_space
     347.  01:6A2F  CA 20 6D            	jp		z,ms_shoot
     348.  01:6A32  C9                  	ret
     349.  01:6A33                      	
     350.  01:6A33                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     351.  01:6A33                      .ms_loop_left2right:
     352.  01:6A33  3A 25 EC            	ld	a,(aniframe)
     353.  01:6A36  3C                  	inc	a
     354.  01:6A37  32 25 EC            	ld	(aniframe),a
     355.  01:6A3A  FE 14               	cp	20
     356.  01:6A3C  CA 48 6A            	jp	z,1f
     357.  01:6A3F  FE 18               	cp	24
     358.  01:6A41  C0                  	ret	nz
     359.  01:6A42  3E 01               	ld	a,ms_spin_face_right
     360.  01:6A44  32 27 EC            	ld	(ms_state),a
     361.  01:6A47  C9                  	ret
     362.  01:6A48  AF                  1:	xor	a
     363.  01:6A49  32 ED ED                ld  (dxmap),a
     364.  01:6A4C  C9                  	ret
     365.  01:6A4D                      
     366.  01:6A4D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     367.  01:6A4D                      .ms_spin_face_right:
     368.  01:6A4D  CD 38 69            	call	.z_or_space
     369.  01:6A50  CC 20 6D            	call	z,ms_shoot
     370.  01:6A53  3A 25 EC            	ld	a,(aniframe)
     371.  01:6A56  3C                  	inc	a
     372.  01:6A57  32 25 EC            	ld	(aniframe),a
     373.  01:6A5A  FE 20               	cp	32
     374.  01:6A5C  C0                  	ret	nz
     375.  01:6A5D  3E 00               	ld	a,ms_fly__right
     376.  01:6A5F  32 27 EC            	ld	(ms_state),a
     377.  01:6A62  C9                  	ret
     378.  01:6A63                      	
     379.  01:6A63                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     380.  01:6A63                      .ms_side_dwn_face_right:
     381.  01:6A63  CD 38 69            	call	.z_or_space
     382.  01:6A66  CC 20 6D            	call	z,ms_shoot
     383.  01:6A69  3A 25 EC            	ld	a,(aniframe)
     384.  01:6A6C  FE 2C               	cp	44
     385.  01:6A6E  CA 83 6A            	jp	z,1f
     386.  01:6A71                      
     387.  01:6A71  3C                  	inc	a
     388.  01:6A72  32 25 EC            	ld	(aniframe),a
     389.  01:6A75  FE 2F               	cp	47
     390.  01:6A77  C0                  	ret	nz
     391.  01:6A78  3E 20               	ld	a,32
     392.  01:6A7A  32 25 EC            	ld	(aniframe),a
     393.  01:6A7D  3E 00               	ld	a,ms_fly__right
     394.  01:6A7F  32 27 EC            	ld	(ms_state),a
     395.  01:6A82  C9                  	ret
     396.  01:6A83  3A ED ED            1:	ld  a,(dxmap)
     397.  01:6A86  CB 7F               	bit	7,a
     398.  01:6A88  20 0A               	jr nz,1f
     399.  01:6A8A  CD 3E 69            	call	.x_and_up
     400.  01:6A8D  CA 94 6A            	jp		z,1f
     401.  01:6A90  CD 56 69            	call	.left
     402.  01:6A93  C0                  	ret	nz
     403.  01:6A94  3E 2D               1:	ld	a,45
     404.  01:6A96  32 25 EC            	ld	(aniframe),a
     405.  01:6A99  C9                  	ret
     406.  01:6A9A                      
     407.  01:6A9A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     408.  01:6A9A                      .ms_side_up__face_right	
     409.  01:6A9A  CD 38 69            	call	.z_or_space
     410.  01:6A9D  CC 20 6D            	call	z,ms_shoot
     411.  01:6AA0  3A 25 EC            	ld	a,(aniframe)
     412.  01:6AA3  FE 24               	cp	36
     413.  01:6AA5  CA BA 6A            	jp	z,1f
     414.  01:6AA8                      
     415.  01:6AA8  3C                  	inc	a
     416.  01:6AA9  32 25 EC            	ld	(aniframe),a
     417.  01:6AAC  FE 28               	cp	40
     418.  01:6AAE  C0                  	ret	nz
     419.  01:6AAF  3E 20               	ld	a,32
     420.  01:6AB1  32 25 EC            	ld	(aniframe),a
     421.  01:6AB4  3E 00               	ld	a,ms_fly__right
     422.  01:6AB6  32 27 EC            	ld	(ms_state),a
     423.  01:6AB9  C9                  	ret
     424.  01:6ABA  3A ED ED            1:	ld  a,(dxmap)
     425.  01:6ABD  CB 7F               	bit	7,a
     426.  01:6ABF  20 0A               	jr nz,1f
     427.  01:6AC1  CD 4A 69            	call	.x_and_dwn
     428.  01:6AC4  CA CB 6A            	jp		z,1f
     429.  01:6AC7  CD 56 69            	call	.left
     430.  01:6ACA  C0                  	ret	nz
     431.  01:6ACB  3E 25               1:	ld	a,37
     432.  01:6ACD  32 25 EC            	ld	(aniframe),a
     433.  01:6AD0  C9                  	ret
     434.  01:6AD1                      
     435.  01:6AD1                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     436.  01:6AD1                      .ms_side_dwn_face_left	
     437.  01:6AD1  CD 38 69            	call	.z_or_space
     438.  01:6AD4  CC 20 6D            	call	z,ms_shoot
     439.  01:6AD7  3A 25 EC            	ld	a,(aniframe)
     440.  01:6ADA  FE 3C               	cp	60
     441.  01:6ADC  CA F1 6A            	jp	z,1f
     442.  01:6ADF                      
     443.  01:6ADF  3C                  	inc	a
     444.  01:6AE0  32 25 EC            	ld	(aniframe),a
     445.  01:6AE3  FE 3F               	cp	63
     446.  01:6AE5  C0                  	ret	nz
     447.  01:6AE6  3E 30               	ld	a,48
     448.  01:6AE8  32 25 EC            	ld	(aniframe),a
     449.  01:6AEB  3E 04               	ld	a,ms_fly__left
     450.  01:6AED  32 27 EC            	ld	(ms_state),a
     451.  01:6AF0  C9                  	ret
     452.  01:6AF1  3A ED ED            1:	ld  a,(dxmap)
     453.  01:6AF4  3D                  	dec	a
     454.  01:6AF5  CB 7F               	bit	7,a
     455.  01:6AF7  28 0A               	jr z,1f
     456.  01:6AF9  CD 3E 69            	call	.x_and_up
     457.  01:6AFC  CA 03 6B            	jp		z,1f
     458.  01:6AFF  CD 5C 69            	call	.right
     459.  01:6B02  C0                  	ret	nz
     460.  01:6B03  3E 3D               1:	ld	a,61
     461.  01:6B05  32 25 EC            	ld	(aniframe),a
     462.  01:6B08  C9                  	ret
     463.  01:6B09                      
     464.  01:6B09                      
     465.  01:6B09                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     466.  01:6B09                      .ms_side_up__face_left	
     467.  01:6B09  CD 38 69            	call	.z_or_space
     468.  01:6B0C  CC 20 6D            	call	z,ms_shoot
     469.  01:6B0F  3A 25 EC            	ld	a,(aniframe)
     470.  01:6B12  FE 34               	cp	52
     471.  01:6B14  CA 29 6B            	jp	z,1f
     472.  01:6B17                      
     473.  01:6B17  3C                  	inc	a
     474.  01:6B18  32 25 EC            	ld	(aniframe),a
     475.  01:6B1B  FE 38               	cp	56
     476.  01:6B1D  C0                  	ret	nz
     477.  01:6B1E  3E 30               	ld	a,48
     478.  01:6B20  32 25 EC            	ld	(aniframe),a
     479.  01:6B23  3E 04               	ld	a,ms_fly__left
     480.  01:6B25  32 27 EC            	ld	(ms_state),a
     481.  01:6B28  C9                  	ret
     482.  01:6B29  3A ED ED            1:	ld  a,(dxmap)
     483.  01:6B2C  3D                  	dec	a
     484.  01:6B2D  CB 7F               	bit	7,a
     485.  01:6B2F  28 0A               	jr z,1f
     486.  01:6B31  CD 4A 69            	call	.x_and_dwn
     487.  01:6B34  CA 3B 6B            	jp		z,1f
     488.  01:6B37  CD 5C 69            	call	.right
     489.  01:6B3A  C0                  	ret	nz
     490.  01:6B3B  3E 35               1:	ld	a,53
     491.  01:6B3D  32 25 EC            	ld	(aniframe),a
     492.  01:6B40  C9                  	ret
     493.  01:6B41                      
     494.  01:6B41                      
     495.  01:6B41                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     496.  01:6B41                      .ms_explode:
     497.  01:6B41  3A 28 EC            	ld	a,(anispeed)
     498.  01:6B44  3C                  	inc	a
     499.  01:6B45  E6 03               	and	3
     500.  01:6B47  32 28 EC            	ld	(anispeed),a
     501.  01:6B4A  C0                  	ret nz
     502.  01:6B4B  3A 25 EC            	ld	a,(aniframe)
     503.  01:6B4E  3C                  	inc	a
     504.  01:6B4F  32 25 EC            	ld	(aniframe),a
     505.  01:6B52  FE 50               	cp	80
     506.  01:6B54  C0                  	ret	nz
     507.  01:6B55  AF                  	xor	a
     508.  01:6B56  32 F0 ED            	ld	(yship),a
     509.  01:6B59  CD 0D 6F            	call	put_ms_sprt.expl
     510.  01:6B5C  3E 0C               	ld	a,ms_reset
     511.  01:6B5E  32 27 EC            	ld	(ms_state),a
     512.  01:6B61                      	
     513.  01:6B61  0E 01               	ld	c,1						; show lives on screen 
     514.  01:6B63  CD A1 65            	call	sub_c_lives_bin
     515.  01:6B66                      	
     516.  01:6B66  3E FF               	ld	a,-1
     517.  01:6B68  32 FC ED            	ld	(already_dead),a	; reset at level start, set after you die
     518.  01:6B6B                      
     519.  01:6B6B  3A 12 EE            	ld	a,(lives_bin)
     520.  01:6B6E  A7                  	and	a
     521.  01:6B6F  C0                  	ret	nz
     522.  01:6B70                      		
     523.  01:6B70  CD 62 42            	call	PT3_MUTE
     524.  01:6B73  3E 13               	ld	a,19			; game over
     525.  01:6B75  CD BE 05            	call AFXPLAY
     526.  01:6B78                      	
     527.  01:6B78  21 2E 66            	ld	hl,GameOver
     528.  01:6B7B  11 00 1F            	ld	de,0x1C00+8*3*32
     529.  01:6B7E  CD BE 66            	call	print_strf
     530.  01:6B81  06 00               	ld	b,0
     531.  01:6B83  76                  1:	halt	
     532.  01:6B84  10 FD               	djnz	1b
     533.  01:6B86                      
     534.  01:6B86                      	; you've lost 
     535.  01:6B86  F1                  	pop af
     536.  01:6B87  C3 F7 5F            	jp	title_screen
     537.  01:6B8A                      
     538.  01:6B8A                      	
     539.  01:6B8A                      
     708   01:6B8A                      	include mc_collide.asm
       1.  01:6B8A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  01:6B8A                      ;
       3.  01:6B8A                      ;	manage MS collisions with background
       4.  01:6B8A                      ;
       5.  01:6B8A                      	
       6.  01:6B8A                      ;include	blocktiles.asm
       7.  01:6B8A                      
       8.  01:6B8A                      test_obstacles:
       9.  01:6B8A  21 FC 0D            	ld	hl,ms_ani
      10.  01:6B8D  3A 25 EC            	ld	a,(aniframe)
      11.  01:6B90  4F                  	ld	c,a
      12.  01:6B91  06 00               	ld	b,0
      13.  01:6B93  09                  	add	hl,bc
      14.  01:6B94  7E                  	ld	a,(hl)
      15.  01:6B95  87                  	add	a,a
      16.  01:6B96  87                  	add	a,a
      17.  01:6B97  DD 21 87 67         	ld	ix,ms_col_win
      18.  01:6B9B  4F                  	ld	c,a
      19.  01:6B9C  06 00               	ld	b,0
      20.  01:6B9E  DD 09               	add	ix,bc
      21.  01:6BA0                      
      22.  01:6BA0  26 00               	ld	h,0
      23.  01:6BA2  DD 6E 00            	ld	l,(ix+0)
      24.  01:6BA5  ED 5B F1 ED         	ld	de,(xship)
      25.  01:6BA9  19                  	add hl,de
      26.  01:6BAA  3A F0 ED            	ld	a,(yship)
      27.  01:6BAD  DD 86 02            	add	a,(ix+2)
      28.  01:6BB0  CD ED 6B            	call	.tst
      29.  01:6BB3                      
      30.  01:6BB3  26 00               	ld	h,0
      31.  01:6BB5  DD 6E 01            	ld	l,(ix+1)
      32.  01:6BB8  ED 5B F1 ED         	ld	de,(xship)
      33.  01:6BBC  19                  	add hl,de
      34.  01:6BBD  3A F0 ED            	ld	a,(yship)
      35.  01:6BC0  DD 86 02            	add	a,(ix+2)
      36.  01:6BC3  CD ED 6B            	call	.tst
      37.  01:6BC6                      
      38.  01:6BC6  26 00               	ld	h,0
      39.  01:6BC8  DD 6E 00            	ld	l,(ix+0)
      40.  01:6BCB  ED 5B F1 ED         	ld	de,(xship)
      41.  01:6BCF  19                  	add hl,de
      42.  01:6BD0  3A F0 ED            	ld	a,(yship)
      43.  01:6BD3  DD 86 03            	add	a,(ix+3)
      44.  01:6BD6  CD ED 6B            	call	.tst
      45.  01:6BD9                      
      46.  01:6BD9  26 00               	ld	h,0
      47.  01:6BDB  DD 6E 01            	ld	l,(ix+1)
      48.  01:6BDE  ED 5B F1 ED         	ld	de,(xship)
      49.  01:6BE2  19                  	add hl,de
      50.  01:6BE3  3A F0 ED            	ld	a,(yship)
      51.  01:6BE6  DD 86 03            	add	a,(ix+3)
      52.  01:6BE9  CD ED 6B            	call	.tst
      53.  01:6BEC                      
      54.  01:6BEC  C9                  	ret
      55.  01:6BED                      
      56.  01:6BED                      
      57.  01:6BED                      .tst:
      58.  01:6BED  CD 0E 6C            	call .meta_tile_peek
      59.  01:6BF0  3D                  	dec	a
      60.  01:6BF1  FE 14               	cp	nblock-1
      61.  01:6BF3  D0                  	ret	nc		; a>22
      62.  01:6BF4                      
      63.  01:6BF4                      .found:
      64.  01:6BF4  3A 27 EC            	ld	a,(ms_state)
      65.  01:6BF7  FE 0A               	cp	ms_explode
      66.  01:6BF9  C8                  	ret	z
      67.  01:6BFA  3E 0A               	ld	a,ms_explode
      68.  01:6BFC  32 27 EC            	ld	(ms_state),a
      69.  01:6BFF  3E 40               	ld	a,64
      70.  01:6C01  32 25 EC            	ld	(aniframe),a
      71.  01:6C04  AF                  	xor	a
      72.  01:6C05  32 ED ED            	ld	(dxmap),a
      73.  01:6C08                      
      74.  01:6C08  3E 09               	ld	a,9			; ms explosion
      75.  01:6C0A  CD BE 05            	call AFXPLAY
      76.  01:6C0D                      
      77.  01:6C0D  C9                  	ret
      78.  01:6C0E                      
      79.  01:6C0E                      
      80.  01:6C0E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      81.  01:6C0E                      ;	peek a meta-tile
      82.  01:6C0E                      ; in	a:	y (screen coordinate)
      83.  01:6C0E                      ;		hl: x (level coordinate)
      84.  01:6C0E                      ; out	a: meta tile at x,y
      85.  01:6C0E                      ;		hl: pointer in level_buffer to meta tile
      86.  01:6C0E                      	
      87.  01:6C0E                      .meta_tile_peek:
      88.  01:6C0E  D6 40               	sub 64				; move y to level coordinate
      89.  01:6C10  E6 F8               	and 0xF8
      90.  01:6C12  0F                  	rrca
      91.  01:6C13  0F                  	rrca
      92.  01:6C14                      
      93.  01:6C14  CB 3C               	srl h
      94.  01:6C16  CB 1D               	rr	l
      95.  01:6C18  CB 3C               	srl h
      96.  01:6C1A  CB 1D               	rr	l
      97.  01:6C1C  CB 3C               	srl h
      98.  01:6C1E  CB 1D               	rr	l
      99.  01:6C20  EB                  	ex	de,hl
     100.  01:6C21                      
     101.  01:6C21  26 6D               	ld	h,high _tst_table
     102.  01:6C23  6F                  	ld	l,a
     103.  01:6C24                      
     104.  01:6C24  7E                  	ld	a,(hl)
     105.  01:6C25  23                  	inc	hl
     106.  01:6C26  66                  	ld	h,(hl)
     107.  01:6C27  6F                  	ld	l,a
     108.  01:6C28                      
     109.  01:6C28  19                  	add	hl,de
     110.  01:6C29  7E                  	ld	a,(hl)
     111.  01:6C2A  C9                  	ret
     112.  01:6C2B                      
     113.  01:6C2B  (00D5)              	ALIGN 0x0100
     114.  01:6D00                      _tst_table:
     115.  01:6D00                      	repeat 16
     116.  01:6D00                    < 	dw	level_buffer + (@# * LvlWidth)
     117.  01:6D00                    < 	endrepeat
     117.  01:6D00  00 D4 80 D5 00 D7 80 D8 00 DA 80 DB 00 DD 80 DE 
     117.  01:6D10  00 E0 80 E1 00 E3 80 E4 00 E6 80 E7 00 E9 80 EA 
     118.  01:6D20                      	
     119.  01:6D20                      
     709   01:6D20                      	include ms_bllts.asm
       1.  01:6D20                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  01:6D20                      ; activate ms bullets
       3.  01:6D20                      ;
       4.  01:6D20  (01:0005)           max_bullet_rate equ 5
       5.  01:6D20                      
       6.  01:6D20                      ms_shoot:
       7.  01:6D20  3A EC ED            	ld	a,(bullet_rate)
       8.  01:6D23  A7                  	and a
       9.  01:6D24  CA 2C 6D            	jp	z,.book_bullet
      10.  01:6D27  3D                  	dec a
      11.  01:6D28  32 EC ED            	ld	(bullet_rate),a
      12.  01:6D2B  C9                  	ret
      13.  01:6D2C                      .book_bullet:
      14.  01:6D2C  3E 05               	ld	a,max_bullet_rate
      15.  01:6D2E  32 EC ED            	ld	(bullet_rate),a
      16.  01:6D31                      
      17.  01:6D31  DD 21 85 EE         	ld	ix,ms_bullets
      18.  01:6D35  06 02               	ld	b,max_bullets
      19.  01:6D37  11 0E 00            	ld	de,enemy_data
      20.  01:6D3A  DD CB 07 46         1:	bit	0,(ix+enemy_data.status)
      21.  01:6D3E  28 05               	jr	z,.activate_this
      22.  01:6D40  DD 19               	add ix,de
      23.  01:6D42  10 F6               	djnz   1b
      24.  01:6D44  C9                  	ret
      25.  01:6D45                      
      26.  01:6D45                      .activate_this:
      27.  01:6D45  AF                  	xor	a				; ms bullet
      28.  01:6D46  CD BE 05            	call AFXPLAY
      29.  01:6D49                      
      30.  01:6D49  3A 27 EC            	ld	a,(ms_state)	; in states 0-3 ms faces right
      31.  01:6D4C  E6 04               	and 0x04
      32.  01:6D4E  20 0A               	jr	nz,.shootsx
      33.  01:6D50                      .shootdx
      34.  01:6D50  DD 36 07 01         	ld	(ix+enemy_data.status),1
      35.  01:6D54  21 08 00            	ld	hl,8
      36.  01:6D57  C3 61 6D            	jp	1f
      37.  01:6D5A                      
      38.  01:6D5A                      .shootsx
      39.  01:6D5A  DD 36 07 41         	ld	(ix+enemy_data.status),1 + 64
      40.  01:6D5E  21 F8 FF            	ld	hl,-8
      41.  01:6D61                      1:
      42.  01:6D61  3A 25 EC            	ld	a,(aniframe)
      43.  01:6D64  E6 07               	and 7
      44.  01:6D66  C6 08               	add a,8
      45.  01:6D68  87                  	add a,a
      46.  01:6D69  87                  	add a,a
      47.  01:6D6A  DD 77 0A            	ld	(ix+enemy_data.frame),a
      48.  01:6D6D                      
      49.  01:6D6D  CD 00 64            	call	set_size	; set  xoff,yoff,xsize,ysize for sprite collision
      50.  01:6D70                      
      51.  01:6D70  3A ED ED            	ld	a,(dxmap)
      52.  01:6D73  CB 2F CB 2F         [2] sra a
      53.  01:6D77  5F                  	ld	e,a
      54.  01:6D78  17                  	rla
      55.  01:6D79  9F                  	sbc a,a
      56.  01:6D7A  57                  	ld	d,a
      57.  01:6D7B                      
      58.  01:6D7B  19                  	add hl,de
      59.  01:6D7C  DD 75 0C            	ld	(ix+enemy_data.speed),l
      60.  01:6D7F  DD 74 0D            	ld	(ix+enemy_data.speed+1),h
      61.  01:6D82                      
      62.  01:6D82  2A F1 ED            	ld	hl,(xship)
      63.  01:6D85  DD 75 01            	ld	(ix+enemy_data.x),l
      64.  01:6D88  DD 74 02            	ld	(ix+enemy_data.x+1),h
      65.  01:6D8B                      
      66.  01:6D8B  3A F0 ED            	ld	a,(yship)
      67.  01:6D8E  DD 77 00            	ld	(ix+enemy_data.y),a
      68.  01:6D91  DD 36 08 11         	ld	(ix+enemy_data.cntr),17
      69.  01:6D95  C9                  	ret
      70.  01:6D96                      
      71.  01:6D96                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      72.  01:6D96                      ; manage active ms bullets
      73.  01:6D96                      ;
      74.  01:6D96                      
      75.  01:6D96                      bullet_loop:
      76.  01:6D96  DD 21 85 EE         	ld	ix,ms_bullets
      77.  01:6D9A                      	
      78.  01:6D9A                      	repeat	max_bullets
      79.  01:6D9A                    < 	bit	 0,(ix+enemy_data.status)
      80.  01:6D9A                    < 	jr	z,1f
      81.  01:6D9A                    < 
      82.  01:6D9A                    < 	; move right or	 left
      83.  01:6D9A                    < 
      84.  01:6D9A                    < 	ld	l,(ix+enemy_data.x)
      85.  01:6D9A                    < 	ld	h,(ix+enemy_data.x+1)
      86.  01:6D9A                    < 	ld	e,(ix+enemy_data.speed)
      87.  01:6D9A                    < 	ld	d,(ix+enemy_data.speed+1)
      88.  01:6D9A                    < 	add hl,de
      89.  01:6D9A                    < 	ld	(ix+enemy_data.x),l
      90.  01:6D9A                    < 	ld	(ix+enemy_data.x+1),h
      91.  01:6D9A                    < 
      92.  01:6D9A                    < 	call	.test_obstacles
      93.  01:6D9A                    < 
      94.  01:6D9A                    < 	dec	(ix+enemy_data.cntr)
      95.  01:6D9A                    < 	jr	nz,1f
      96.  01:6D9A                    < 	res 0,(ix+enemy_data.status)
      97.  01:6D9A                    < 1:
      98.  01:6D9A                    < 	ld	de,enemy_data
      99.  01:6D9A                    < 	add ix,de
     100.  01:6D9A                    < 	endrepeat
     100.  01:6D9A  DD CB 07 46 28 1F DD 6E 01 DD 66 02 DD 5E 0C DD 
     100.  01:6DAA  56 0D 19 DD 75 01 DD 74 02 CD EF 6D DD 35 08 20 
     100.  01:6DBA  04 DD CB 07 86 11 0E 00 DD 19 DD CB 07 46 28 1F 
     100.  01:6DCA  DD 6E 01 DD 66 02 DD 5E 0C DD 56 0D 19 DD 75 01 
     100.  01:6DDA  DD 74 02 CD EF 6D DD 35 08 20 04 DD CB 07 86 11 
     100.  01:6DEA  0E 00 DD 19 
     101.  01:6DEE  C9                  	ret
     102.  01:6DEF                      
     103.  01:6DEF                      
     104.  01:6DEF                      .test_obstacles:
     105.  01:6DEF  DD 5E 0A            	ld	e,(ix+enemy_data.frame)
     106.  01:6DF2  16 00               	ld	d,0
     107.  01:6DF4  FD 21 07 68         	ld	iy,ms_bllts_col_win-32
     108.  01:6DF8  FD 19               	add	iy,de			; here iy points to the collision window of the current frame of the bullet
     109.  01:6DFA                      
     110.  01:6DFA  DD CB 0D 7E         	bit	7,(ix+enemy_data.speed+1)
     111.  01:6DFE  28 06               	jr	z,2f			;.x_positive
     112.  01:6E00                      
     113.  01:6E00  FD 5E 00            	ld	e,(iy+0)		;.x_negative:
     114.  01:6E03  C3 09 6E            	jp	3f
     115.  01:6E06                      
     116.  01:6E06  FD 5E 01            2:	ld	e,(iy+1)		;.x_positive:
     117.  01:6E09                      	
     118.  01:6E09                      3:
     119.  01:6E09  DD 6E 01            	ld	l,(ix+enemy_data.x)
     120.  01:6E0C  DD 66 02            	ld	h,(ix+enemy_data.x+1)
     121.  01:6E0F  19                  	add hl,de
     122.  01:6E10  DD 7E 00            	ld	a,(ix+enemy_data.y)
     123.  01:6E13  FD 86 02            	add	a,(iy+2)
     124.  01:6E16  E5                  	push	hl
     125.  01:6E17  F5                  	push	af
     126.  01:6E18  CD 2F 6E            	call	.tst_block
     127.  01:6E1B  D1                  	pop		de
     128.  01:6E1C  E1                  	pop		hl
     129.  01:6E1D  C8                  	ret	z				; skip the rest if already hit
     130.  01:6E1E  7A                  	ld	a,d
     131.  01:6E1F  E6 F8               	and	0xF8
     132.  01:6E21  57                  	ld	d,a
     133.  01:6E22  DD 7E 00            	ld	a,(ix+enemy_data.y)
     134.  01:6E25  FD 86 03            	add	a,(iy+3)
     135.  01:6E28  E6 F8               	and	0xF8
     136.  01:6E2A  BA                  	cp	d
     137.  01:6E2B  C8                  	ret	z				; avoid testing twice the same tile
     138.  01:6E2C  C3 2F 6E            	jp	.tst_block
     139.  01:6E2F                      
     140.  01:6E2F                      
     141.  01:6E2F                      .tst_block:
     142.  01:6E2F  CD 0E 6C            	call test_obstacles.meta_tile_peek
     143.  01:6E32  5F                  	ld	e,a
     144.  01:6E33  3D                  	dec	a					; deal with space apart
     145.  01:6E34  FE 14               	cp	nblock-1
     146.  01:6E36                      	
     147.  01:6E36  D2 44 6E            	jp	nc,.no_blocking		; a>22
     148.  01:6E39                      	
     149.  01:6E39                      .blocking:	
     150.  01:6E39  DD CB 07 86         	res 0,(ix+enemy_data.status)
     151.  01:6E3D  3E 0A               	ld	a,10			; hit solid wall
     152.  01:6E3F  CD BE 05            	call AFXPLAY
     153.  01:6E42  AF                  	xor	a
     154.  01:6E43  C9                  	ret					; obstacle found - return Z
     155.  01:6E44                      	
     156.  01:6E44                      .no_blocking:
     157.  01:6E44  FE 18               	cp	nblock+n_d2x1-1
     158.  01:6E46  D2 70 6E            	jp	nc,.no_2x1		; a>26
     159.  01:6E49                      	
     160.  01:6E49  FE 16               	cp	nblock+1
     161.  01:6E4B  38 07               	jr	c,.left2x1		; two 2x1 items
     162.  01:6E4D                      	
     163.  01:6E4D                      .right2x1:
     164.  01:6E4D  7E                  	ld	a,(hl)
     165.  01:6E4E  C6 04               	add	a,n_d2x1
     166.  01:6E50  77                  	ld	(hl),a
     167.  01:6E51  2B                  	dec	hl
     168.  01:6E52  18 05               	jr	1f
     169.  01:6E54                      	
     170.  01:6E54                      .left2x1:
     171.  01:6E54  7E                  	ld	a,(hl)
     172.  01:6E55  C6 04               	add	a,n_d2x1
     173.  01:6E57  77                  	ld	(hl),a
     174.  01:6E58  23                  	inc	hl
     175.  01:6E59  7E                  1:	ld	a,(hl)
     176.  01:6E5A  C6 04               	add	a,n_d2x1
     177.  01:6E5C  77                  	ld	(hl),a
     178.  01:6E5D                      
     179.  01:6E5D  DD CB 07 86         	res 0,(ix+enemy_data.status)
     180.  01:6E61  3E 0B               	ld	a,11			; destroy small ground item
     181.  01:6E63  CD BE 05            	call AFXPLAY
     182.  01:6E66  01 05 00            	ld	bc,5			; score for destruction of a small ground item
     183.  01:6E69  CD 5D 65            	call	add_bc_score_bin
     184.  01:6E6C                      	
     185.  01:6E6C  CD 2F 4A            	call	land_now_test	; make LAND NOW arrive sooner
     186.  01:6E6F  C9                  	ret
     187.  01:6E70                      	
     188.  01:6E70                      .no_2x1:
     189.  01:6E70                      	
     190.  01:6E70  FE 1C               	cp	nblock+n_d2x1*2-1
     191.  01:6E72  28 2B               	jr	z,.left_up3x2
     192.  01:6E74  FE 1D               	cp	nblock+n_d2x1*2+0
     193.  01:6E76  28 19               	jr	z,.left_dw3x2
     194.  01:6E78  FE 1E               	cp	nblock+n_d2x1*2+1
     195.  01:6E7A  28 23               	jr	z,.left_up3x2
     196.  01:6E7C  FE 1F               	cp	nblock+n_d2x1*2+2
     197.  01:6E7E  28 11               	jr	z,.left_dw3x2
     198.  01:6E80                      
     199.  01:6E80  FE 24               	cp	nblock+n_d2x1*2+7
     200.  01:6E82  28 13               	jr	z,.right_up3x2
     201.  01:6E84  FE 25               	cp	nblock+n_d2x1*2+8
     202.  01:6E86  28 13               	jr	z,.right_dw3x2
     203.  01:6E88  FE 26               	cp	nblock+n_d2x1*2+9
     204.  01:6E8A  28 0B               	jr	z,.right_up3x2
     205.  01:6E8C  FE 27               	cp	nblock+n_d2x1*2+10
     206.  01:6E8E  28 0B               	jr	z,.right_dw3x2
     207.  01:6E90                      	
     208.  01:6E90  C9                  	ret				; obstacle not found - return NZ
     209.  01:6E91                      	
     210.  01:6E91                      .left_dw3x2:
     211.  01:6E91  01 80 FE            	ld	bc,-LvlWidth
     212.  01:6E94  09                  	add hl,bc
     213.  01:6E95  18 08               	jr	.left_up3x2
     214.  01:6E97                      
     215.  01:6E97                      .right_up3x2:
     216.  01:6E97  2B 2B               [2]	dec hl
     217.  01:6E99  18 04               	jr	.left_up3x2
     218.  01:6E9B                      
     219.  01:6E9B                      .right_dw3x2:
     220.  01:6E9B  01 7E FE            	ld	bc,-LvlWidth-2
     221.  01:6E9E  09                  	add hl,bc
     222.  01:6E9F                      
     223.  01:6E9F                      .left_up3x2:
     224.  01:6E9F                      	repeat 3
     225.  01:6E9F                    < 	ld	a,(hl)
     226.  01:6E9F                    < 	add	a,n_d3x2
     227.  01:6E9F                    < 	ld	(hl),a
     228.  01:6E9F                    < 	inc	hl
     229.  01:6E9F                    < 	endrepeat
     229.  01:6E9F  7E C6 0C 77 23 7E C6 0C 77 23 7E C6 0C 77 23 
     230.  01:6EAE  01 7D 01            	ld	bc,LvlWidth-3
     231.  01:6EB1  09                  	add hl,bc
     232.  01:6EB2                      	repeat 3
     233.  01:6EB2                    < 	ld	a,(hl)
     234.  01:6EB2                    < 	add	a,n_d3x2
     235.  01:6EB2                    < 	ld	(hl),a
     236.  01:6EB2                    < 	inc	hl
     237.  01:6EB2                    < 	endrepeat
     237.  01:6EB2  7E C6 0C 77 23 7E C6 0C 77 23 7E C6 0C 77 23 
     238.  01:6EC1                      	
     239.  01:6EC1  DD CB 07 86         	res 0,(ix+enemy_data.status)
     240.  01:6EC5  3E 0C               	ld	a,12				; destroy large ground item
     241.  01:6EC7  CD BE 05            	call AFXPLAY
     242.  01:6ECA  01 32 00            	ld	bc,50				; score for destruction of a large ground item
     243.  01:6ECD  CD 5D 65            	call	add_bc_score_bin
     244.  01:6ED0                      	
     245.  01:6ED0  CD 2F 4A            	call	land_now_test	; make LAND NOW arrive sooner
     246.  01:6ED3  C9                  	ret
     247.  01:6ED4                      	
     248.  01:6ED4                      
     249.  01:6ED4                      	
     710   01:6ED4                      	include put_ms_sprt.asm
       1.  01:6ED4                      
       2.  01:6ED4                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  01:6ED4                      ;
       4.  01:6ED4                      ;	manage SAT entries of the main ship
       5.  01:6ED4                      ;
       6.  01:6ED4                      
       7.  01:6ED4                      put_ms_sprt:
       8.  01:6ED4  3A 27 EC            	ld	a,(ms_state)
       9.  01:6ED7  FE 0A               	cp	ms_explode
      10.  01:6ED9  28 32               	jr	z,.expl
      11.  01:6EDB                      						; manage SAT entries of the main ship
      12.  01:6EDB  21 09 FD            	ld	hl,ram_sat
      13.  01:6EDE  3A F0 ED            	ld	a,(yship)
      14.  01:6EE1  3D                  	dec	a
      15.  01:6EE2  77                  	ld	(hl),a
      16.  01:6EE3  23                  	inc hl
      17.  01:6EE4  36 78               	ld	(hl),xship_rel
      18.  01:6EE6  23                  	inc hl
      19.  01:6EE7  36 00               	ld	(hl),0		; shape 0 hard wired
      20.  01:6EE9  23                  	inc hl
      21.  01:6EEA  36 0F               	ld	(hl),15
      22.  01:6EEC  23                  	inc hl
      23.  01:6EED                      
      24.  01:6EED  3A F0 ED            	ld	a,(yship)
      25.  01:6EF0  3D                  	dec	a
      26.  01:6EF1  77                  	ld	(hl),a
      27.  01:6EF2  23                  	inc hl
      28.  01:6EF3  36 78               	ld	(hl),xship_rel
      29.  01:6EF5  23                  	inc hl
      30.  01:6EF6  36 04               	ld	(hl),4		; shape 4 hard wired
      31.  01:6EF8  4F                  	ld	c,a
      32.  01:6EF9  23                  	inc hl
      33.  01:6EFA  36 07               	ld	(hl),7
      34.  01:6EFC  23                  	inc hl
      35.  01:6EFD                      
      36.  01:6EFD  3A F0 ED            	ld	a,(yship)
      37.  01:6F00  C6 0F               	add a,16-1
      38.  01:6F02  77                  	ld	(hl),a
      39.  01:6F03  23                  	inc hl
      40.  01:6F04  36 88               	ld	(hl),xship_rel+16
      41.  01:6F06  23                  	inc hl
      42.  01:6F07  36 08               	ld	(hl),8		; shape 8 hard wired
      43.  01:6F09  23                  	inc hl
      44.  01:6F0A  36 01               	ld	(hl),1
      45.  01:6F0C  C9                  	ret
      46.  01:6F0D                      .expl:
      47.  01:6F0D                      						; manage SAT entries of the main ship
      48.  01:6F0D  21 09 FD            	ld	hl,ram_sat
      49.  01:6F10  3A F0 ED            	ld	a,(yship)
      50.  01:6F13  77                  	ld	(hl),a
      51.  01:6F14  23                  	inc hl
      52.  01:6F15  36 78               	ld	(hl),xship_rel
      53.  01:6F17  23                  	inc hl
      54.  01:6F18  36 00               	ld	(hl),0		; shape 0 hard wired
      55.  01:6F1A  23                  	inc hl
      56.  01:6F1B  36 0A               	ld	(hl),10
      57.  01:6F1D  23                  	inc hl
      58.  01:6F1E                      
      59.  01:6F1E  3A F0 ED            	ld	a,(yship)
      60.  01:6F21  77                  	ld	(hl),a
      61.  01:6F22  23                  	inc hl
      62.  01:6F23  36 78               	ld	(hl),xship_rel
      63.  01:6F25  23                  	inc hl
      64.  01:6F26  36 04               	ld	(hl),4		; shape 4 hard wired
      65.  01:6F28  4F                  	ld	c,a
      66.  01:6F29  23                  	inc hl
      67.  01:6F2A  36 0B               	ld	(hl),11
      68.  01:6F2C  23                  	inc hl
      69.  01:6F2D                      
      70.  01:6F2D  3A F0 ED            	ld	a,(yship)
      71.  01:6F30  77                  	ld	(hl),a
      72.  01:6F31  23                  	inc hl
      73.  01:6F32  36 78               	ld	(hl),xship_rel
      74.  01:6F34  23                  	inc hl
      75.  01:6F35  36 08               	ld	(hl),8		; shape 8 hard wired
      76.  01:6F37  23                  	inc hl
      77.  01:6F38  36 06               	ld	(hl),6
      78.  01:6F3A  C9                  	ret
      79.  01:6F3B                      	
      80.  01:6F3B                      .landing:
      81.  01:6F3B  21 11 FD            	ld	hl,ram_sat+4*2
      82.  01:6F3E  3A F0 ED            	ld	a,(yship)
      83.  01:6F41  3D                  	dec	a
      84.  01:6F42  77                  	ld	(hl),a
      85.  01:6F43  23                  	inc hl
      86.  01:6F44  3A EE ED            	ld	a,(xmap)
      87.  01:6F47  57                  	ld  d,a
      88.  01:6F48  3A F1 ED            	ld	a,(xship)
      89.  01:6F4B  92                  	sub	a,d
      90.  01:6F4C  77                  	ld	(hl),a	; xship_rel
      91.  01:6F4D  23                  	inc hl
      92.  01:6F4E  36 00               	ld	(hl),0		; shape 0 hard wired
      93.  01:6F50  23                  	inc hl
      94.  01:6F51  36 0F               	ld	(hl),15
      95.  01:6F53                      	
      96.  01:6F53  11 F9 FF            	ld  de,-7
      97.  01:6F56  19                  	add hl,de
      98.  01:6F57                      	
      99.  01:6F57  3A F0 ED            	ld	a,(yship)
     100.  01:6F5A  3D                  	dec	a
     101.  01:6F5B  77                  	ld	(hl),a
     102.  01:6F5C  23                  	inc hl
     103.  01:6F5D  3A EE ED            	ld	a,(xmap)
     104.  01:6F60  57                  	ld  d,a
     105.  01:6F61  3A F1 ED            	ld	a,(xship)
     106.  01:6F64  92                  	sub	a,d
     107.  01:6F65  77                  	ld	(hl),a	; xship_rel
     108.  01:6F66  23                  	inc hl
     109.  01:6F67  36 04               	ld	(hl),4		; shape 4 hard wired
     110.  01:6F69  4F                  	ld	c,a
     111.  01:6F6A  23                  	inc hl
     112.  01:6F6B  36 07               	ld	(hl),7
     113.  01:6F6D                      
     114.  01:6F6D  11 F9 FF            	ld  de,-7
     115.  01:6F70  19                  	add hl,de
     116.  01:6F71                      
     117.  01:6F71  3A F0 ED            	ld	a,(yship)
     118.  01:6F74  80                  	add a,b 
     119.  01:6F75  77                  	ld	(hl),a
     120.  01:6F76  23                  	inc hl
     121.  01:6F77                      
     122.  01:6F77  3A EE ED            	ld	a,(xmap)
     123.  01:6F7A  57                  	ld  d,a
     124.  01:6F7B  3A F1 ED            	ld	a,(xship)
     125.  01:6F7E  92                  	sub	a,d
     126.  01:6F7F  80                  	add	a,b
     127.  01:6F80  77                  	ld	(hl),a
     128.  01:6F81  23                  	inc hl
     129.  01:6F82  36 08               	ld	(hl),8		; shape 8 hard wired
     130.  01:6F84  23                  	inc hl
     131.  01:6F85  36 01               	ld	(hl),1
     132.  01:6F87  C9                  	ret
     711   01:6F88                      test_spt:
     712   01:6F88  (0472)              	incbin uridium_rev6.miz
     713   01:73FA                      test_spt_3c:
     714   01:73FA  (043B)              	incbin  uridium_rev7.miz
     715   01:7835                      	include scorebar_pos.asm
       1.  01:7835                      scorebar_sat:
       2.  01:7835                      
       3.  01:7835  (01:0080)           counter:=32*4
       4.  01:7835                      	repeat	6
       5.  01:7835                    < 	repeat	4
       6.  01:7835                    < 	db	@@# * 8 -8-1
       7.  01:7835                    < 	if	(!((@@#/4) & 1))
       8.  01:7835                    < 		if	((counter!=32*4) & (counter!=32*4+4*4) & (counter!=4*8+32*4) & (counter!=4*12+32*4))
       9.  01:7835                    < 			db	(@# * 16)+192
      10.  01:7835                    < 		else
      11.  01:7835                    < 			db	0
      12.  01:7835                    < 		endif
      13.  01:7835                    < 	else
      14.  01:7835                    < 		db	96+(@# * 16)
      15.  01:7835                    < 	endif
      16.  01:7835                    < 	db	0+counter
      17.  01:7835                    < 	db	14+8-counter/16
      18.  01:7835                    < counter:=counter+4
      19.  01:7835                    < 	endrepeat
      20.  01:7835                    < 	endrepeat
      20.  01:7835  F7 00 80 0E F7 D0 84 0E F7 E0 88 0E F7 F0 8C 0E 
      20.  01:7845  FF 00 90 0D FF D0 94 0D FF E0 98 0D FF F0 9C 0D 
      20.  01:7855  07 00 A0 0C 07 D0 A4 0C 07 E0 A8 0C 07 F0 AC 0C 
      20.  01:7865  0F 00 B0 0B 0F D0 B4 0B 0F E0 B8 0B 0F F0 BC 0B 
      20.  01:7875  17 60 C0 0A 17 70 C4 0A 17 80 C8 0A 17 90 CC 0A 
      20.  01:7885  1F 60 D0 09 1F 70 D4 09 1F 80 D8 09 1F 90 DC 09 
      21.  01:7895                      
      22.  01:7895                      	repeat	4
      23.  01:7895                    < 	db	3*16
      24.  01:7895                    < 	db	96+(@# * 16)
      25.  01:7895                    < 	db	counter
      26.  01:7895                    < 	db	15
      27.  01:7895                    < counter:=counter+4
      28.  01:7895                    < 	endrepeat
      28.  01:7895  30 60 E0 0F 30 70 E4 0F 30 80 E8 0F 30 90 EC 0F 
      29.  01:78A5  3E                  	db	64-2
      30.  01:78A6  00                  	db	0
      31.  01:78A7  98                  	db	0x98
      32.  01:78A8  00                  	db	0
      33.  01:78A9                      
      34.  01:78A9  D0                  	db	0xd0
     716   01:78AA                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     717   01:78AA                      	include mothership_sequence.asm 
       1.  01:78AA                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  01:78AA                      ; initialize the level assuming tiles and colours in place
       3.  01:78AA                      just_level_init:
       4.  01:78AA  AF                  	xor	a
       5.  01:78AB  32 28 EC            	ld	(anispeed),a
       6.  01:78AE  AF                  	xor a
       7.  01:78AF  32 25 EC            	ld	(aniframe),a
       8.  01:78B2  32 28 EC            	ld	(anispeed),a
       9.  01:78B5  32 27 EC            	ld	(ms_state),a
      10.  01:78B8  3E 08               	ld	a,8
      11.  01:78BA  32 ED ED            	ld	(dxmap),a
      12.  01:78BD                      
      13.  01:78BD  21 00 00            	ld	hl,0
      14.  01:78C0  22 EE ED            	ld	(xmap),hl
      15.  01:78C3  01 78 00            	ld	bc,xship_rel
      16.  01:78C6  09                  	add hl,bc
      17.  01:78C7  22 F1 ED            	ld	(xship),hl
      18.  01:78CA  3E 78               	ld	a,64+64-8
      19.  01:78CC  32 F0 ED            	ld	(yship),a
      20.  01:78CF                      
      21.  01:78CF  CD 4F 68            	call	ms_ctrl.intro
      22.  01:78D2  CD D4 6E            	call	put_ms_sprt
      23.  01:78D5  CD 56 4A            	call	npc_init
      24.  01:78D8  CD A2 7A            	call	plot_enemy
      25.  01:78DB                      
      26.  01:78DB                      	
      27.  01:78DB  CD 3A 41            	call	 enpage2
      28.  01:78DE  FB                  	ei
      29.  01:78DF  3A F4 ED            	ld	a,(next_level)
      30.  01:78E2  CD 0E 80            	call	levelinit
      31.  01:78E5  CD 40 41            	call	 enpage3
      32.  01:78E8                      	
      33.  01:78E8  3E FF               	ld	a,-1
      34.  01:78EA  32 F8 ED            	ld	(joystick),a	;prevent fake commands
      35.  01:78ED  FB                  	ei
      36.  01:78EE  C9                  	ret	
      37.  01:78EF                      	
      38.  01:78EF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      39.  01:78EF                      ; 	initialize the mother ship sequence
      40.  01:78EF                      ;	and exit from mother ship 
      41.  01:78EF                      ;
      42.  01:78EF                      intro_anim:
      43.  01:78EF  F3                  	di
      44.  01:78F0  CD FC 3E            	call	disscr
      45.  01:78F3                      	
      46.  01:78F3  AF                  	xor	a
      47.  01:78F4  32 24 EC            	ld	(ingame),a
      48.  01:78F7                      	
      49.  01:78F7  AF                  	xor a
      50.  01:78F8  32 28 EC            	ld	(anispeed),a
      51.  01:78FB  3E FE               	ld	a,-2
      52.  01:78FD  32 ED ED            	ld	(dxmap),a
      53.  01:7900  3E 04               	ld	a,ms_fly__left
      54.  01:7902  32 27 EC            	ld	(ms_state),a
      55.  01:7905  3E 10               	ld	a,16
      56.  01:7907  32 25 EC            	ld  (aniframe),a
      57.  01:790A                      
      58.  01:790A  21 02 00            	ld	hl,2
      59.  01:790D  22 EE ED            	ld	(xmap),hl
      60.  01:7910  01 66 00            	ld	bc,xship_rel-18
      61.  01:7913  09                  	add hl,bc
      62.  01:7914  22 F1 ED            	ld	(xship),hl
      63.  01:7917                      	
      64.  01:7917  21 13 66            	ld	hl,dummy
      65.  01:791A  11 00 1F            	ld	de,0x1C00+8*3*32
      66.  01:791D  CD BE 66            	call	print_strf
      67.  01:7920                      		
      68.  01:7920  CD 3A 41            	call	 enpage2
      69.  01:7923  FB                  	ei
      70.  01:7924  AF                  	xor	a
      71.  01:7925  32 F3 ED            	ld	(cur_level),a
      72.  01:7928  CD 0E 80            	call	levelinit
      73.  01:792B  CD 40 41            	call	 enpage3
      74.  01:792E  FB                  	ei
      75.  01:792F                      
      76.  01:792F  CD 6B 96            	call	shuttle_init
      77.  01:7932                      	
      78.  01:7932  3E C0               	ld	a,192
      79.  01:7934  32 F0 ED            	ld	(yship),a	
      80.  01:7937  CD D4 6E            	call	put_ms_sprt
      81.  01:793A  CD 56 4A            	call	npc_init
      82.  01:793D  CD A2 7A            	call	plot_enemy
      83.  01:7940                      
      84.  01:7940  CD 15 49            	call ayFX_SETUP
      85.  01:7943                      	
      86.  01:7943  3E FF               	ld	a,-1
      87.  01:7945  32 F8 ED            	ld	(joystick),a	;prevent fake commands
      88.  01:7948  3E 01               	ld	a,1
      89.  01:794A  32 D7 ED            	ld	(reverse_sat),a
      90.  01:794D  3E FF               	ld	a,-1
      91.  01:794F  32 24 EC            	ld	(ingame),a
      92.  01:7952  CD CB 03            	call 	_sat_update
      93.  01:7955  CD F5 3E            	call	enascr
      94.  01:7958  FB                  	ei
      95.  01:7959  76                  	halt	
      96.  01:795A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
      97.  01:795A                      
      98.  01:795A  3E 07               	ld	a,7			; start level sound
      99.  01:795C  CD BE 05            	call AFXPLAY
     100.  01:795F                      	
     101.  01:795F  CD 06 7A            	call exit_sequence
     102.  01:7962                      	
     103.  01:7962  21 02 00            	ld	hl,2
     104.  01:7965  22 EE ED            	ld	(xmap),hl
     105.  01:7968  01 78 00            	ld	bc,xship_rel
     106.  01:796B  09                  	add hl,bc
     107.  01:796C  22 F1 ED            	ld	(xship),hl
     108.  01:796F                      	
     109.  01:796F                      fake_main:		
     110.  01:796F                      	
     111.  01:796F  CD AC 79            	call	test_lev1
     112.  01:7972                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     113.  01:7972                      ; run ms FSM and place its sprites in the SAT in RAM
     114.  01:7972  CD 4F 68            	call	ms_ctrl.intro
     115.  01:7975                      
     116.  01:7975                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     117.  01:7975                      ; test for game restart
     118.  01:7975  3A 27 EC            	ld	a,(ms_state)
     119.  01:7978  FE 0C               	cp	ms_reset
     120.  01:797A  C8                  	ret	z
     121.  01:797B                      
     122.  01:797B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     123.  01:797B                      ; place MS in the SAT and test for collision
     124.  01:797B  CD D4 6E            	call	put_ms_sprt
     125.  01:797E                      
     126.  01:797E  21 9E FC            	ld hl,JIFFY
     127.  01:7981  AF                  	xor	a
     128.  01:7982                      1:
     129.  01:7982  BE                  	cp (hl)
     130.  01:7983  28 FD               	jr z,1b
     131.  01:7985  77                  	ld	(hl),a
     132.  01:7986                      
     133.  01:7986  3A ED ED            	ld	a,(dxmap)
     134.  01:7989  FE 09               	cp	9
     135.  01:798B  28 04               	jr	z,1f
     136.  01:798D  3C                  	inc	a
     137.  01:798E  32 ED ED            	ld	(dxmap),a
     138.  01:7991                      1:
     139.  01:7991  2A EE ED            	ld	hl,(xmap)
     140.  01:7994  3A ED ED            	ld	a,(dxmap)
     141.  01:7997  CB 2F CB 2F         [2] sra a
     142.  01:799B  5F                  	ld	e,a
     143.  01:799C  87                  	add a,a
     144.  01:799D  9F                  	sbc a,a
     145.  01:799E  57                  	ld	d,a
     146.  01:799F  19                  	add hl,de
     147.  01:79A0  22 EE ED            	ld	(xmap),hl
     148.  01:79A3                      
     149.  01:79A3  01 78 00            	ld	bc,xship_rel
     150.  01:79A6  09                  	add hl,bc
     151.  01:79A7  22 F1 ED            	ld	(xship),hl
     152.  01:79AA                      
     153.  01:79AA  18 C3               	jr fake_main
     154.  01:79AC                      	
     155.  01:79AC                      
     156.  01:79AC                      test_lev1:
     157.  01:79AC  DD 21 48 7B         	ld	ix,runways
     158.  01:79B0  DD 5E 01            	ld	e,(ix+obj_data.x)
     159.  01:79B3  DD 56 02            	ld	d,(ix+obj_data.x+1)
     160.  01:79B6  DD 4E 05            	ld	c,(ix+obj_data.xsize)
     161.  01:79B9                      	
     162.  01:79B9  2A F1 ED            	ld	hl,(xship)
     163.  01:79BC  06 10               	ld	b,16
     164.  01:79BE                      	
     165.  01:79BE  CD CF 64            	call CalcCollision
     166.  01:79C1  D0                  	ret	nc
     167.  01:79C2                      
     168.  01:79C2  21 1C 66            	ld	hl,warping
     169.  01:79C5  11 00 1F            	ld	de,0x1C00+8*3*32
     170.  01:79C8  CD BE 66            	call	print_strf
     171.  01:79CB                      	
     172.  01:79CB                      	; set stripes instead of stars
     173.  01:79CB  CD EA 79            	call	warp_tile
     174.  01:79CE                      
     175.  01:79CE  3E 14               	ld	a,20 	; warping sound
     176.  01:79D0  CD BE 05            	call AFXPLAY
     177.  01:79D3                      	
     178.  01:79D3  CD 3A 41            	call	 enpage2
     179.  01:79D6  FB                  	ei
     180.  01:79D7  3A F4 ED            	ld	a,(next_level)
     181.  01:79DA  CD 0E 80            	call	levelinit
     182.  01:79DD                      
     183.  01:79DD  CD 40 41            	call	 enpage3
     184.  01:79E0  FB                  	ei
     185.  01:79E1                      
     186.  01:79E1  CD 2C 95            	call	tile_init
     187.  01:79E4                      	
     188.  01:79E4  3E 0C               	ld	a,ms_reset
     189.  01:79E6  32 27 EC            	ld	(ms_state),a
     190.  01:79E9  C9                  	ret	
     191.  01:79EA                      	
     192.  01:79EA                      warp_tile:
     193.  01:79EA  11 F8 4F            	ld	de,0x0800+255*8+0x4000
     194.  01:79ED  CD F3 79            	call	1f
     195.  01:79F0  11 F8 57            	ld	de,0x1000+255*8+0x4000
     196.  01:79F3                      	; call	1f
     197.  01:79F3                      	; ret
     198.  01:79F3                      	
     199.  01:79F3                      1:
     200.  01:79F3  F3                  	di
     201.  01:79F4  7B                  	ld	a,e
     202.  01:79F5  D3 99               	out (0x99),a
     203.  01:79F7  7A                  	ld	a,d 
     204.  01:79F8  D3 99               	out (0x99),a
     205.  01:79FA                      	
     206.  01:79FA  01 98 03            	ld	bc,0x398
     207.  01:79FD  3E FF               	ld	a,-1
     208.  01:79FF  ED 79               1:	out (c),a
     209.  01:7A01  00                  	nop
     210.  01:7A02  10 FB               	djnz 1b
     211.  01:7A04  FB                  	ei
     212.  01:7A05  C9                  	ret
     213.  01:7A06                      
     214.  01:7A06                      exit_sequence:
     215.  01:7A06  DD 21 15 EE         	ld  ix,enemies
     216.  01:7A0A  11 0E 00            	ld  de,enemy_data
     217.  01:7A0D                      
     218.  01:7A0D  DD 36 07 01         	ld  (ix+enemy_data.status),1
     219.  01:7A11  DD 36 0A 08         	ld	(ix+enemy_data.frame),2*4
     220.  01:7A15  DD 36 09 FE         	ld  (ix+enemy_data.kind),254
     221.  01:7A19  DD 36 0B 04         	ld	(ix+enemy_data.color),4
     222.  01:7A1D  DD 36 00 77         	ld  (ix+enemy_data.y),56+64-1
     223.  01:7A21  DD 36 01 66         	ld  (ix+enemy_data.x),104-2
     224.  01:7A25  DD 36 02 00         	ld  (ix+enemy_data.x+1),0
     225.  01:7A29  DD 19               	add ix,de
     226.  01:7A2B  DD 36 07 01         	ld  (ix+enemy_data.status),1
     227.  01:7A2F  DD 36 0A 08         	ld	(ix+enemy_data.frame),2*4
     228.  01:7A33  DD 36 09 FE         	ld  (ix+enemy_data.kind),254
     229.  01:7A37  DD 36 0B 05         	ld	(ix+enemy_data.color),5
     230.  01:7A3B  DD 36 00 77         	ld  (ix+enemy_data.y),56+64-1
     231.  01:7A3F  DD 36 01 5E         	ld  (ix+enemy_data.x),104-8-2
     232.  01:7A43  DD 36 02 00         	ld  (ix+enemy_data.x+1),0
     233.  01:7A47                      	
     234.  01:7A47  3E 78               	ld	a,64+64-8
     235.  01:7A49  32 F0 ED            	ld	(yship),a
     236.  01:7A4C                      
     237.  01:7A4C  2A EE ED            	ld	hl,(xmap)
     238.  01:7A4F  11 66 00            	ld	de,xship_rel-18
     239.  01:7A52  19                  	add hl,de
     240.  01:7A53  22 F1 ED            	ld	(xship),hl
     241.  01:7A56                      
     242.  01:7A56  06 12               	ld	b,18
     243.  01:7A58  2A EE ED            1:	ld	hl,(xmap)
     244.  01:7A5B  19                  	add hl,de
     245.  01:7A5C  22 F1 ED            	ld	(xship),hl
     246.  01:7A5F  13                  	inc	de
     247.  01:7A60  D9                  	exx
     248.  01:7A61  06 40               	ld	b,64
     249.  01:7A63  CD 3B 6F            	call	put_ms_sprt.landing
     250.  01:7A66                      [6]	call 	99f
     250.  01:7A66  CD 8B 7A CD 8B 7A CD 8B 7A CD 8B 7A CD 8B 7A CD 
     250.  01:7A76  8B 7A 
     251.  01:7A78  D9                  	exx
     252.  01:7A79  10 DD               	djnz 1b
     253.  01:7A7B                      	
     254.  01:7A7B  DD 21 15 EE         	ld  ix,enemies
     255.  01:7A7F  DD 36 07 00         	ld  (ix+enemy_data.status),0
     256.  01:7A83  DD 36 15 00         	ld  (ix+enemy_data+enemy_data.status),0
     257.  01:7A87  CD 7F 7D            	call 	test_runway.fakemain
     258.  01:7A8A  C9                  	ret
     259.  01:7A8B                      	
     260.  01:7A8B  CD 7F 7D            99:	call 	test_runway.fakemain
     261.  01:7A8E  F3                  	di
     262.  01:7A8F                      	_setvdpwvram (0x3800+2*32)
     262.  01:7A8F                    >  if (value & 0xFF)
     262.  01:7A8F  3E 40             >   ld a,value & 0xFF
     262.  01:7A91                    >  else
     262.  01:7A91                    ~   xor a
     262.  01:7A91                    ~  endif
     262.  01:7A91  D3 99             >  out (0x99),a
     262.  01:7A93  3E 78             >  ld a,0x40 + (value/256)
     262.  01:7A95  D3 99             >  out (0x99),a
     263.  01:7A97  06 20               	ld	b,32
     264.  01:7A99  3E FF               	ld	a,-1
     265.  01:7A9B  D3 98               2:	out (0x98),a
     266.  01:7A9D  00                  	nop
     267.  01:7A9E  10 FB               	djnz	2b
     268.  01:7AA0  FB                  	ei	
     269.  01:7AA1  C9                  	ret
     270.  01:7AA2                      	
     271.  01:7AA2                      
     718   01:7AA2                      	include plot_enemies.asm  
       1.  01:7AA2                      
       2.  01:7AA2                      
       3.  01:7AA2                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       4.  01:7AA2                      ;
       5.  01:7AA2                      ;	plot enemies and bullets if visible
       6.  01:7AA2                      ;
       7.  01:7AA2                      plot_enemy:
       8.  01:7AA2                      
       9.  01:7AA2  FD 21 15 FD         	ld	iy,ram_sat+4*3
      10.  01:7AA6  DD 21 15 EE         	ld	ix,enemies
      11.  01:7AAA  06 0D               	ld	b,max_enem + max_bullets + max_enem_bullets
      12.  01:7AAC  0E 03               	ld	c,3				; main ship and its shadow
      13.  01:7AAE                      
      14.  01:7AAE                      npc_loop1:
      15.  01:7AAE  DD 7E 07            	ld	a,(ix+enemy_data.status)
      16.  01:7AB1  E6 01               	and 1
      17.  01:7AB3  28 4A               	jr	z,.next
      18.  01:7AB5                      
      19.  01:7AB5  DD 6E 01            	ld	l,(ix+enemy_data.x+0)
      20.  01:7AB8  DD 66 02            	ld	h,(ix+enemy_data.x+1)
      21.  01:7ABB  11 20 00            	ld	de,32
      22.  01:7ABE  19                  	add hl,de
      23.  01:7ABF  ED 5B EE ED         	ld	de,(xmap)
      24.  01:7AC3  A7                  	and a
      25.  01:7AC4  ED 52               	sbc hl,de		; dx = enemy.x + 32 - xmap
      26.  01:7AC6  DA FF 7A            	jp	c,.next		; dx <-32
      27.  01:7AC9  11 20 00            	ld	de,32
      28.  01:7ACC  ED 52               	sbc hl,de
      29.  01:7ACE  DA 40 7B            	jp c,.ecset		; -32<dx<0
      30.  01:7AD1                      
      31.  01:7AD1  7C                  	ld	a,h
      32.  01:7AD2  A7                  	and a
      33.  01:7AD3  C2 FF 7A            	jp	nz,.next	; dx >255
      34.  01:7AD6                      
      35.  01:7AD6  FD CB 03 BE         	res 7,(iy+3)
      36.  01:7ADA                      
      37.  01:7ADA                      .cont:
      38.  01:7ADA  DD 7E 0A            	ld	a,(ix+enemy_data.frame)
      39.  01:7ADD  FE 40               	cp	16*4					; hard coded in the SPT
      40.  01:7ADF  D2 0D 7B            	jp	nc,.two_layers
      41.  01:7AE2                      
      42.  01:7AE2                      .one_layer:
      43.  01:7AE2  FD 77 02            	ld	(iy+2),a				; write shape
      44.  01:7AE5  FD 75 01            	ld	(iy+1),l				; write X
      45.  01:7AE8  DD 7E 00            	ld	a,(ix+enemy_data.y)		; write Y
      46.  01:7AEB  FD 77 00            	ld	(iy+0),a
      47.  01:7AEE  FD 7E 03            	ld	a,(iy+3)
      48.  01:7AF1  E6 F0               	and 0xF0
      49.  01:7AF3  DD B6 0B            	or	(ix+enemy_data.color)
      50.  01:7AF6  FD 77 03            	ld	(iy+3),a				; write colour
      51.  01:7AF9  0C                  	inc c
      52.  01:7AFA  11 04 00            	ld	de,4
      53.  01:7AFD  FD 19               	add iy,de
      54.  01:7AFF                      
      55.  01:7AFF                      .next:
      56.  01:7AFF  11 0E 00            	ld	de,enemy_data
      57.  01:7B02  DD 19               	add ix,de
      58.  01:7B04  10 A8               	djnz	npc_loop1
      59.  01:7B06                      
      60.  01:7B06  79                  	ld	a,c
      61.  01:7B07  87                  	add a,a				; x4 -> sat data
      62.  01:7B08  87                  	add a,a
      63.  01:7B09  32 23 EC            	ld	(visible_sprts),a
      64.  01:7B0C  C9                  	ret
      65.  01:7B0D                      
      66.  01:7B0D                      .two_layers:
      67.  01:7B0D  FD 77 02            	ld	(iy+2),a				; write shape
      68.  01:7B10  C6 08               	add	a,8
      69.  01:7B12  FD 77 06            	ld	(iy+2+4),a				; second layer shape
      70.  01:7B15  FD 75 01            	ld	(iy+1),l				; write X
      71.  01:7B18  FD 75 05            	ld	(iy+1+4),l	
      72.  01:7B1B  DD 7E 00            	ld	a,(ix+enemy_data.y)		; write Y
      73.  01:7B1E  FD 77 00            	ld	(iy+0),a
      74.  01:7B21  FD 77 04            	ld	(iy+0+4),a
      75.  01:7B24  FD 7E 03            	ld	a,(iy+3)
      76.  01:7B27  E6 F0               	and 0xF0
      77.  01:7B29  DD B6 0B            	or	(ix+enemy_data.color)
      78.  01:7B2C  FD 77 03            	ld	(iy+3),a				; write colour
      79.  01:7B2F  E6 F0               	and	0xF0
      80.  01:7B31  F6 01               	or	1						; second layer colour
      81.  01:7B33  FD 77 07            	ld	(iy+3+4),a	
      82.  01:7B36  0C                  	inc c
      83.  01:7B37  0C                  	inc c
      84.  01:7B38  11 08 00            	ld	de,8
      85.  01:7B3B  FD 19               	add iy,de
      86.  01:7B3D  C3 FF 7A            	jp	 .next
      87.  01:7B40                      	
      88.  01:7B40                      .ecset:
      89.  01:7B40  19                  	add hl,de
      90.  01:7B41  FD CB 03 FE         	set 7,(iy+3)
      91.  01:7B45  C3 DA 7A            	jp	.cont
     719   01:7B48                      	include runways.asm  
       1.  01:7B48                      runways:
       2.  01:7B48                      
       3.  01:7B48                      lev0	obj_data	(5 + 0) & 127, 256  ,0,0,    64,118
       3.  01:7B48  05 00 01 00 00 40 76 
       4.  01:7B4F                      
       5.  01:7B4F                      lev1	obj_data	(5+96 ) & 127,2720+8,0,0,136-16,6
       5.  01:7B4F  65 A8 0A 00 00 78 06 
       6.  01:7B56                      lev2	obj_data	(5+208) & 127,2528+8,0,0,136-16,6
       6.  01:7B56  55 E8 09 00 00 78 06 
       7.  01:7B5D                      lev3	obj_data	(5+312) & 127,2624+8,0,0,152-16,6
       7.  01:7B5D  3D 48 0A 00 00 88 06 
       8.  01:7B64                      lev4	obj_data	(5+440) & 127,2568+8,0,0,152-16,6
       8.  01:7B64  3D 10 0A 00 00 88 06 
       9.  01:7B6B                      lev5	obj_data	(5+616) & 127,2712+8,0,0,136-16,6
       9.  01:7B6B  6D A0 0A 00 00 78 06 
      10.  01:7B72                      lev6	obj_data	(5+696) & 127,2648+8,0,0,120-16,6
      10.  01:7B72  3D 60 0A 00 00 68 06 
      11.  01:7B79                      lev7	obj_data	(5+824) & 127,2560+8,0,0,264-16,6
      11.  01:7B79  3D 08 0A 00 00 F8 06 
      12.  01:7B80                      lev8	obj_data	(5+928) & 127,2440+8,0,0,184-16,6
      12.  01:7B80  25 90 09 00 00 A8 06 
      13.  01:7B87                      lev9	obj_data	(5+1080)& 127,2584+8,0,0,200-16,6
      13.  01:7B87  3D 20 0A 00 00 B8 06 
      14.  01:7B8E                      levA	obj_data	(5+1208)& 127,2616+8,0,0,120-16,6
      14.  01:7B8E  3D 40 0A 00 00 68 06 
      15.  01:7B95                      levB	obj_data	(5+1336)& 127,2624+8,0,0,136-16,6
      15.  01:7B95  3D 48 0A 00 00 78 06 
      16.  01:7B9C                      levC	obj_data	(5+1464)& 127,2640+8,0,0,168-16,6
      16.  01:7B9C  3D 58 0A 00 00 98 06 
      17.  01:7BA3                      levD	obj_data	(5+1592)& 127,2488+8,0,0,168-16,6
      17.  01:7BA3  3D C0 09 00 00 98 06 
      18.  01:7BAA                      levE	obj_data	(5+1720)& 127,2600+8,0,0,216-16,6
      18.  01:7BAA  3D 30 0A 00 00 C8 06 
      19.  01:7BB1                      levF	obj_data	(5+1824)& 127,2600+8,0,0,200-16,6
      19.  01:7BB1  25 30 0A 00 00 B8 06 
      20.  01:7BB8                      
      21.  01:7BB8                      	
      22.  01:7BB8                      test_runway:
      23.  01:7BB8  3A EB ED            	ld	a,(landing_permission)
      24.  01:7BBB  A7                  	and	a
      25.  01:7BBC  C8                  	ret	z
      26.  01:7BBD  3A 27 EC            	ld	a,(ms_state)
      27.  01:7BC0  FE 00               	cp ms_fly__right
      28.  01:7BC2  C0                  	ret	nz
      29.  01:7BC3  3A ED ED            	ld	a,(dxmap)
      30.  01:7BC6  FE 0A               	cp	10
      31.  01:7BC8  D0                  	ret	nc
      32.  01:7BC9                      
      33.  01:7BC9  3A F3 ED            	ld	a,(cur_level)
      34.  01:7BCC  A7                  	and	a
      35.  01:7BCD  DD 21 48 7B         	ld	ix,runways
      36.  01:7BD1  28 08               	jr	z,1f
      37.  01:7BD3  47                  	ld	b,a
      38.  01:7BD4  11 07 00            	ld	de,obj_data
      39.  01:7BD7  DD 19               2:	add	ix,de
      40.  01:7BD9  10 FC               	djnz	2b
      41.  01:7BDB                      	
      42.  01:7BDB                      1:
      43.  01:7BDB  DD 5E 01            	ld	e,(ix+obj_data.x)
      44.  01:7BDE  DD 56 02            	ld	d,(ix+obj_data.x+1)
      45.  01:7BE1  DD 4E 05            	ld	c,(ix+obj_data.xsize)
      46.  01:7BE4                      	
      47.  01:7BE4  2A F1 ED            	ld	hl,(xship)
      48.  01:7BE7  06 10               	ld	b,16
      49.  01:7BE9                      	
      50.  01:7BE9  CD CF 64            	call CalcCollision
      51.  01:7BEC  D0                  	ret	nc
      52.  01:7BED                      
      53.  01:7BED  DD 46 00            	ld	b,(ix+obj_data.y)
      54.  01:7BF0  DD 4E 06            	ld	c,(ix+obj_data.ysize)
      55.  01:7BF3                      	
      56.  01:7BF3  3A F0 ED            	ld	a,(yship)
      57.  01:7BF6  C6 C6               	add	a,-64+6
      58.  01:7BF8  57                  	ld	d,a
      59.  01:7BF9  1E 04               	ld	e,4
      60.  01:7BFB  CD DF 64            	call	CollisionCheck_8b
      61.  01:7BFE  D0                  	ret	nc
      62.  01:7BFF                      
      63.  01:7BFF  3E 0D               	ld	a,13			; landing
      64.  01:7C01  CD BE 05            	call AFXPLAY
      65.  01:7C04  3E 0B               	ld	a,ms_landing
      66.  01:7C06  32 27 EC            	ld	(ms_state),a
      67.  01:7C09                      		
      68.  01:7C09  01 E8 03            	ld	bc,1000		; score for completing a level
      69.  01:7C0C  CD 5D 65            	call	add_bc_score_bin
      70.  01:7C0F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      71.  01:7C0F                      	; landing
      72.  01:7C0F                      	
      73.  01:7C0F  06 10               	ld 	b,16
      74.  01:7C11  CD 3B 6F            1:	call put_ms_sprt.landing
      75.  01:7C14  C5                  	push	bc
      76.  01:7C15                      [3]	call	 .fakemain
      76.  01:7C15  CD 7F 7D CD 7F 7D CD 7F 7D 
      77.  01:7C1E  C1                  	pop bc
      78.  01:7C1F  10 F0               	djnz 1b
      79.  01:7C21                      	
      80.  01:7C21                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      81.  01:7C21                      	; enemies explode
      82.  01:7C21                      	
      83.  01:7C21  CD 94 7D            	call	.kill_all
      84.  01:7C24  06 20               	ld 	b,32
      85.  01:7C26  C5                  1:	push	bc
      86.  01:7C27                      [3]	call	 .fakemain
      86.  01:7C27  CD 7F 7D CD 7F 7D CD 7F 7D 
      87.  01:7C30  C1                  	pop bc
      88.  01:7C31  10 F3               	djnz 1b
      89.  01:7C33                      	
      90.  01:7C33                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      91.  01:7C33                      	; take off
      92.  01:7C33                      	
      93.  01:7C33  3E 0F               	ld	a,15			; take off
      94.  01:7C35  CD BE 05            	call AFXPLAY
      95.  01:7C38                      
      96.  01:7C38  06 00               	ld	b,0
      97.  01:7C3A  CD 3B 6F            1:	call put_ms_sprt.landing
      98.  01:7C3D  C5                  	push	bc
      99.  01:7C3E                      [3]	call	 .fakemain
      99.  01:7C3E  CD 7F 7D CD 7F 7D CD 7F 7D 
     100.  01:7C47  C1                  	pop bc
     101.  01:7C48  04                  	inc	b
     102.  01:7C49  3E 10               	ld	a,16
     103.  01:7C4B  B8                  	cp	b
     104.  01:7C4C  20 EC               	jr	nz,1b
     105.  01:7C4E                      	
     106.  01:7C4E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     107.  01:7C4E                      	
     108.  01:7C4E  21 25 66            	ld	hl,defeated
     109.  01:7C51  11 00 1F            	ld	de,0x1C00+8*3*32
     110.  01:7C54  CD BE 66            	call	print_strf
     111.  01:7C57                      
     112.  01:7C57                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     113.  01:7C57                      	; fly right
     114.  01:7C57                      		
     115.  01:7C57  3E 00               	ld	a,ms_fly__right
     116.  01:7C59  32 27 EC            	ld	(ms_state),a
     117.  01:7C5C  AF                  	xor	a
     118.  01:7C5D  32 ED ED            	ld	(dxmap),a
     119.  01:7C60  3D                  	dec	a
     120.  01:7C61  32 F8 ED            	ld	(joystick),a	;prevent fake commands
     121.  01:7C64                      
     122.  01:7C64  3A AB ED            	ld	a,(_psg_vol_fix)
     123.  01:7C67  32 AE ED            	ld	(fade_psg_vol_fix),a
     124.  01:7C6A  3A AD ED            	ld	a,(_scc_vol_fix)
     125.  01:7C6D  32 AF ED            	ld	(fade_scc_vol_fix),a
     126.  01:7C70                      	
     127.  01:7C70  FD 2E 06            	ld	iyl,6
     128.  01:7C73  CD 14 7F            3:	call	fade_out
     129.  01:7C76  CD 4F 68            	call	ms_ctrl.intro
     130.  01:7C79  CD D4 6E            	call	put_ms_sprt
     131.  01:7C7C                      	
     132.  01:7C7C  21 9E FC            	ld hl,JIFFY
     133.  01:7C7F  AF                  	xor	a
     134.  01:7C80  BE                  1:	cp (hl)
     135.  01:7C81  28 FD               	jr z,1b
     136.  01:7C83  77                  	ld	(hl),a
     137.  01:7C84                      	
     138.  01:7C84  3A ED ED            	ld	a,(dxmap)
     139.  01:7C87  FE 20               	cp	maxspeed*2
     140.  01:7C89  28 04               	jr	z,1f
     141.  01:7C8B  3C                  	inc	a
     142.  01:7C8C  32 ED ED            	ld	(dxmap),a
     143.  01:7C8F                      1:
     144.  01:7C8F  2A EE ED            	ld	hl,(xmap)
     145.  01:7C92  3A ED ED            	ld	a,(dxmap)
     146.  01:7C95  CB 2F CB 2F         [2] sra a
     147.  01:7C99  5F                  	ld	e,a
     148.  01:7C9A  87                  	add a,a
     149.  01:7C9B  9F                  	sbc a,a
     150.  01:7C9C  57                  	ld	d,a
     151.  01:7C9D  19                  	add hl,de
     152.  01:7C9E  22 EE ED            	ld	(xmap),hl
     153.  01:7CA1                      
     154.  01:7CA1  01 78 00            	ld	bc,xship_rel
     155.  01:7CA4  09                  	add hl,bc
     156.  01:7CA5  22 F1 ED            	ld	(xship),hl
     157.  01:7CA8                      	
     158.  01:7CA8  2A EE ED            	ld	hl,(xmap)
     159.  01:7CAB  24                  	inc h
     160.  01:7CAC  11 F8 0C            	ld	de,8*(LvlWidth-1)+256
     161.  01:7CAF  A7                  	and a
     162.  01:7CB0  ED 52               	sbc hl,de
     163.  01:7CB2  DA 73 7C            	jp	c,3b	
     164.  01:7CB5                      
     165.  01:7CB5  CD 62 42            	call	PT3_MUTE
     166.  01:7CB8                      	
     167.  01:7CB8  3A AE ED            	ld	a,(fade_psg_vol_fix)
     168.  01:7CBB  32 AB ED            	ld	(_psg_vol_fix),a
     169.  01:7CBE  3A AF ED            	ld	a,(fade_scc_vol_fix)
     170.  01:7CC1  32 AD ED            	ld	(_scc_vol_fix),a
     171.  01:7CC4  CD 30 56            	call 	_SCC_PSG_Volume_balance
     172.  01:7CC7                      
     173.  01:7CC7                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     174.  01:7CC7                      	; fly left & explosion loop 
     175.  01:7CC7  CD 74 7E            	call	.set_colors_and_tile0	; init explosion tile and scorebar tile 0
     176.  01:7CCA                      	
     177.  01:7CCA  3E E0               3:	ld	a,-maxspeed*2
     178.  01:7CCC  32 ED ED            	ld	(dxmap),a
     179.  01:7CCF                      
     180.  01:7CCF  CD 4F 68            	call	ms_ctrl.intro
     181.  01:7CD2  CD D4 6E            	call	put_ms_sprt
     182.  01:7CD5  CD FD 7D            	call	.damage_line
     183.  01:7CD8  CD CB 7D            	call	.explode_line
     184.  01:7CDB  CD 47 7E            	call	.rand_tile
     185.  01:7CDE  CD DF 4F            	call	npc_loop
     186.  01:7CE1  CD A2 7A            	call	plot_enemy
     187.  01:7CE4                      	
     188.  01:7CE4  CD 22 4A            	call	rand8
     189.  01:7CE7  E6 0F               	and	15
     190.  01:7CE9  20 1D               	jr	nz,.noexplosion
     191.  01:7CEB                      
     192.  01:7CEB  21 9E FC            	ld hl,JIFFY
     193.  01:7CEE  AF                  	xor	a
     194.  01:7CEF  BE                  1:	cp (hl)
     195.  01:7CF0  28 FD               	jr z,1b
     196.  01:7CF2  77                  	ld	(hl),a
     197.  01:7CF3                      	
     198.  01:7CF3                      	; ld	a,6				; exit
     199.  01:7CF3  3E 0C               	ld	a,12				; exit
     200.  01:7CF5  CD BE 05            	call AFXPLAY
     201.  01:7CF8                      	setVdp 7,0xFF		; white flash
     201.  01:7CF8  F3                >  di
     201.  01:7CF9                    >  _setVdp register,value
     201.  01:7CF9  3E FF             >  ld a,value
     201.  01:7CFB  D3 99             >  out (0x99),a
     201.  01:7CFD  3E 87             >  ld a,register + 0x80
     201.  01:7CFF  D3 99             >  out (0x99),a
     201.  01:7D01  FB                >  ei
     202.  01:7D02  CD 9E 7E            	call .exposion_wave
     203.  01:7D05  C3 10 7D            	jp	.test_level_limit
     204.  01:7D08                      	
     205.  01:7D08                      .noexplosion:
     206.  01:7D08                      
     207.  01:7D08  21 9E FC            	ld hl,JIFFY
     208.  01:7D0B  AF                  	xor	a
     209.  01:7D0C  BE                  1:	cp (hl)
     210.  01:7D0D  28 FD               	jr z,1b
     211.  01:7D0F  77                  	ld	(hl),a
     212.  01:7D10                      	
     213.  01:7D10                      .test_level_limit:	
     214.  01:7D10  2A EE ED            	ld	hl,(xmap)
     215.  01:7D13  3A ED ED            	ld	a,(dxmap)
     216.  01:7D16  CB 2F CB 2F         [2] sra a
     217.  01:7D1A  5F                  	ld	e,a
     218.  01:7D1B  87                  	add a,a
     219.  01:7D1C  9F                  	sbc a,a
     220.  01:7D1D  57                  	ld	d,a
     221.  01:7D1E  19                  	add hl,de
     222.  01:7D1F  22 EE ED            	ld	(xmap),hl
     223.  01:7D22                      
     224.  01:7D22  01 78 00            	ld	bc,xship_rel
     225.  01:7D25  09                  	add hl,bc
     226.  01:7D26  22 F1 ED            	ld	(xship),hl
     227.  01:7D29                      
     228.  01:7D29  2A EE ED            	ld	hl,(xmap)
     229.  01:7D2C  24                  	inc h
     230.  01:7D2D  01 F8 FE            	ld	bc,-256-8
     231.  01:7D30  09                  	add hl,bc
     232.  01:7D31  DA CA 7C            	jp	c,3b
     233.  01:7D34                      	
     234.  01:7D34                      	;;;;;;;;;;;;;;;;;;;;;
     235.  01:7D34                      	; manta exits the screen
     236.  01:7D34                      	
     237.  01:7D34  2A EE ED            	ld	hl,(xmap)
     238.  01:7D37  11 78 00            	ld	de,xship_rel
     239.  01:7D3A  19                  	add hl,de
     240.  01:7D3B  22 F1 ED            	ld	(xship),hl
     241.  01:7D3E                      	
     242.  01:7D3E                      
     243.  01:7D3E  11 F8 FF            	ld	de,-maxspeed*2/4
     244.  01:7D41  2A F1 ED            1:	ld	hl,(xship)
     245.  01:7D44  19                  	add hl,de
     246.  01:7D45  CB 7C               	bit	7,h
     247.  01:7D47  C2 5A 7D            	jp	nz,1f
     248.  01:7D4A  22 F1 ED            	ld	(xship),hl
     249.  01:7D4D  D9                  	exx
     250.  01:7D4E  06 10               	ld	b,16
     251.  01:7D50  CD 3B 6F            	call	put_ms_sprt.landing
     252.  01:7D53  CD 7F 7D            	call 	test_runway.fakemain
     253.  01:7D56  D9                  	exx
     254.  01:7D57  C3 41 7D            	jp	1b
     255.  01:7D5A                      1:		
     256.  01:7D5A  3E 0C               	ld	a,ms_reset
     257.  01:7D5C  32 27 EC            	ld	(ms_state),a
     258.  01:7D5F                      	
     259.  01:7D5F  3E C0               	ld	a,192
     260.  01:7D61  32 F0 ED            	ld	(yship),a
     261.  01:7D64  CD D4 6E            	call	put_ms_sprt
     262.  01:7D67  76                  	halt
     263.  01:7D68                      	
     264.  01:7D68  AF                  	xor	a					; reset the flag at each passage of level 
     265.  01:7D69  32 FC ED            	ld	(already_dead),a
     266.  01:7D6C                      	
     267.  01:7D6C  3A F3 ED            	ld	a,(cur_level)
     268.  01:7D6F  3C                  	inc	a
     269.  01:7D70  32 F4 ED            	ld	(next_level),a
     270.  01:7D73  FE 10               	cp	16
     271.  01:7D75  D8                  	ret	c
     272.  01:7D76                      	
     273.  01:7D76                      	; congratulations
     274.  01:7D76                      	; you won
     275.  01:7D76  F1                  	pop af
     276.  01:7D77  3E FF               	ld	a,-1
     277.  01:7D79  32 22 EC            	ld	(victory),a
     278.  01:7D7C  C3 F7 5F            	jp	title_screen
     279.  01:7D7F                      	
     280.  01:7D7F                      	
     281.  01:7D7F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     282.  01:7D7F                      .fakemain:
     283.  01:7D7F  CD DF 4F            	call	npc_loop
     284.  01:7D82  CD 46 55            	call	enemy_bullet_loop
     285.  01:7D85  CD 80 4A            	call	bull_init	; turn off MS and enemy bullets
     286.  01:7D88  CD 96 6D            	call	bullet_loop
     287.  01:7D8B  CD A2 7A            	call	plot_enemy
     288.  01:7D8E  AF                  	xor a
     289.  01:7D8F  32 D7 ED            	ld	(reverse_sat),a
     290.  01:7D92  76                  	halt
     291.  01:7D93  C9                  	ret
     292.  01:7D94                      
     293.  01:7D94                      .kill_all:
     294.  01:7D94  DD 21 15 EE         	ld  ix,enemies
     295.  01:7D98  06 08               	ld  b,max_enem
     296.  01:7D9A                      	
     297.  01:7D9A  C5                  1:  push bc
     298.  01:7D9B  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     299.  01:7D9F  28 1E               	jr	z,.next
     300.  01:7DA1                      	
     301.  01:7DA1  DD 36 07 01         	ld  (ix+enemy_data.status),1	
     302.  01:7DA5  DD 36 0B 0A         	ld	(ix+enemy_data.color),10	; start explosion
     303.  01:7DA9  DD 36 09 FF         	ld	(ix+enemy_data.kind),255
     304.  01:7DAD  DD 36 08 02         	ld	(ix+enemy_data.cntr),2
     305.  01:7DB1  DD 36 0A 0C         	ld	(ix+enemy_data.frame),12
     306.  01:7DB5                      
     307.  01:7DB5  CD 22 4A            	call	rand8
     308.  01:7DB8  E6 03               	and	3
     309.  01:7DBA  C6 02               	add	a,2			; random enemy explosion
     310.  01:7DBC  CD BE 05            	call AFXPLAY
     311.  01:7DBF                      	
     312.  01:7DBF                      .next:
     313.  01:7DBF  11 0E 00            	ld	de,enemy_data
     314.  01:7DC2  DD 19               	add ix,de
     315.  01:7DC4  C1                  	pop	bc
     316.  01:7DC5  10 D3               	djnz    1b
     317.  01:7DC7                      
     318.  01:7DC7  CD 80 4A            	call	bull_init	; turn off MS and enemy bullets
     319.  01:7DCA                      
     320.  01:7DCA  C9                  	ret
     321.  01:7DCB                      	
     322.  01:7DCB                      .explode_line:
     323.  01:7DCB  11 60 00            	ld	de,96
     324.  01:7DCE  2A F1 ED            	ld	hl,(xship)
     325.  01:7DD1  19                  	add	hl,de
     326.  01:7DD2                      	
     327.  01:7DD2  CB 3C               	srl h
     328.  01:7DD4  CB 1D               	rr	l
     329.  01:7DD6  CB 3C               	srl h
     330.  01:7DD8  CB 1D               	rr	l
     331.  01:7DDA  CB 3C               	srl h
     332.  01:7DDC  CB 1D               	rr	l
     333.  01:7DDE                      	
     334.  01:7DDE  11 00 D4            	ld	de,level_buffer
     335.  01:7DE1  19                  	add	hl,de
     336.  01:7DE2                      
     337.  01:7DE2  11 7F 01            	ld	de,LvlWidth-1
     338.  01:7DE5  06 10               	ld	b,16
     339.  01:7DE7                      9:	
     340.  01:7DE7  7E                  	ld	a,(hl)
     341.  01:7DE8  A7                  	and	a
     342.  01:7DE9  28 0B               	jr	z,2f
     343.  01:7DEB  FE FE               	cp 254
     344.  01:7DED  20 05               	jr	nz,3f
     345.  01:7DEF  36 00               	ld	(hl),0
     346.  01:7DF1  C3 F6 7D            	jp 2f
     347.  01:7DF4  36 FE               3:	ld	(hl),254
     348.  01:7DF6  23                  2:	inc	hl
     349.  01:7DF7  36 00               	ld	(hl),0
     350.  01:7DF9  19                  	add	hl,de
     351.  01:7DFA  10 EB               	djnz	9b
     352.  01:7DFC                      
     353.  01:7DFC  C9                  	ret
     354.  01:7DFD                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     355.  01:7DFD                      ; plot two random vertical lines of exploding tiles
     356.  01:7DFD                      ;
     357.  01:7DFD                      .damage_line:
     358.  01:7DFD  11 20 00            	ld	de,32
     359.  01:7E00  CD 06 7E            	call	1f
     360.  01:7E03  11 40 00            	ld	de,64
     361.  01:7E06                      	
     362.  01:7E06  2A F1 ED            1:	ld	hl,(xship)
     363.  01:7E09  19                  	add	hl,de
     364.  01:7E0A                      	
     365.  01:7E0A  CB 3C               	srl h
     366.  01:7E0C  CB 1D               	rr	l
     367.  01:7E0E  CB 3C               	srl h
     368.  01:7E10  CB 1D               	rr	l
     369.  01:7E12  CB 3C               	srl h
     370.  01:7E14  CB 1D               	rr	l
     371.  01:7E16                      	
     372.  01:7E16  11 00 D4            	ld	de,level_buffer
     373.  01:7E19  19                  	add	hl,de
     374.  01:7E1A  E5                  	push	hl
     375.  01:7E1B                      	
     376.  01:7E1B  11 80 01            	ld	de,LvlWidth
     377.  01:7E1E  06 10               	ld	b,16
     378.  01:7E20                      9:	
     379.  01:7E20  7E                  	ld	a,(hl)
     380.  01:7E21  A7                  	and	a
     381.  01:7E22  28 0B               	jr	z,2f
     382.  01:7E24  D9                  	exx
     383.  01:7E25  CD 22 4A            	call rand8
     384.  01:7E28  D9                  	exx
     385.  01:7E29  E6 03               	and 3
     386.  01:7E2B  20 02               	jr	nz,2f
     387.  01:7E2D  36 FE               	ld	(hl),254
     388.  01:7E2F  19                  2:	add	hl,de
     389.  01:7E30  10 EE               	djnz	9b
     390.  01:7E32                      	
     391.  01:7E32  E1                  	pop	hl
     392.  01:7E33  11 04 00            	ld	de,4
     393.  01:7E36  19                  	add	hl,de
     394.  01:7E37                      	
     395.  01:7E37  11 80 01            	ld	de,LvlWidth
     396.  01:7E3A  06 10               	ld	b,16
     397.  01:7E3C  3E FE               	ld	a,254
     398.  01:7E3E  BE                  9:	cp (hl)
     399.  01:7E3F  20 02               	jr	nz,2f
     400.  01:7E41  36 00               	ld	(hl),0
     401.  01:7E43  19                  2:	add	hl,de
     402.  01:7E44  10 F8               	djnz	9b
     403.  01:7E46                      
     404.  01:7E46  C9                  	ret
     405.  01:7E47                      
     406.  01:7E47                      
     407.  01:7E47                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     408.  01:7E47                      ; shapes
     409.  01:7E47                      .rand_tile:
     410.  01:7E47  2A F1 ED            	ld	hl,(xship)			; take random data
     411.  01:7E4A  11 00 40            	ld	de,0x4000
     412.  01:7E4D  19                  	add	hl,de
     413.  01:7E4E  11 F0 4F            	ld	de,0x0800+254*8+0x4000
     414.  01:7E51  CD 63 7E            	call	1f
     415.  01:7E54  11 F0 57            	ld	de,0x1000+254*8+0x4000
     416.  01:7E57  CD 63 7E            	call	1f
     417.  01:7E5A  11 F0 6F            	ld	de,0x2800+254*8+0x4000
     418.  01:7E5D  CD 63 7E            	call	1f
     419.  01:7E60  11 F0 77            	ld	de,0x3000+254*8+0x4000
     420.  01:7E63                      	
     421.  01:7E63  F3                  1:	di
     422.  01:7E64  7B                  	ld	a,e
     423.  01:7E65  D3 99               	out (0x99),a
     424.  01:7E67  7A                  	ld	a,d 
     425.  01:7E68  D3 99               	out (0x99),a
     426.  01:7E6A  01 98 08            	ld	bc,0x898
     427.  01:7E6D  ED A3               1:	outi
     428.  01:7E6F  C2 6D 7E            	jp	nz,1b
     429.  01:7E72  FB                  	ei
     430.  01:7E73  C9                  	ret
     431.  01:7E74                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     432.  01:7E74                      ; set colours and tile 0 in the score bar
     433.  01:7E74                      ;
     434.  01:7E74                      .set_colors_and_tile0:
     435.  01:7E74  0E E0               	ld	c,0xE0
     436.  01:7E76  11 F0 47            	ld	de,0x0000+254*8+0x4000
     437.  01:7E79  CD 8D 7E            	call	2f
     438.  01:7E7C  11 F0 67            	ld	de,0x2000+254*8+0x4000
     439.  01:7E7F  CD 8D 7E            	call	2f
     440.  01:7E82  0E 00               	ld	c,0x00
     441.  01:7E84  11 00 40            	ld	de,0x0000+0*8+0x4000
     442.  01:7E87  CD 8D 7E            	call	2f
     443.  01:7E8A  11 00 60            	ld	de,0x2000+0*8+0x4000
     444.  01:7E8D                      	
     445.  01:7E8D  F3                  2:	di
     446.  01:7E8E  7B                  	ld	a,e
     447.  01:7E8F  D3 99               	out (0x99),a
     448.  01:7E91  7A                  	ld	a,d 
     449.  01:7E92  D3 99               	out (0x99),a
     450.  01:7E94  06 08               	ld	b,0x08
     451.  01:7E96  79                  	ld	a,c
     452.  01:7E97  D3 98               3:	out (0x98),a
     453.  01:7E99  00                  	nop
     454.  01:7E9A  10 FB               	djnz 3b
     455.  01:7E9C  FB                  	ei
     456.  01:7E9D  C9                  	ret
     457.  01:7E9E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     458.  01:7E9E                      ; try to set a line of sprite explosions	
     459.  01:7E9E                      .exposion_wave:
     460.  01:7E9E  2A EE ED            	ld	hl,(xmap)
     461.  01:7EA1  11 00 01            	ld	de,256
     462.  01:7EA4  A7                  	and	a
     463.  01:7EA5  ED 52               	sbc	hl,de
     464.  01:7EA7  D8                  	ret c
     465.  01:7EA8                      	
     466.  01:7EA8  2A EE ED            	ld	hl,(xmap)
     467.  01:7EAB  11 80 0B            	ld	de,8*(LvlWidth)-128
     468.  01:7EAE  ED 52               	sbc hl,de
     469.  01:7EB0  D0                  	ret	nc
     470.  01:7EB1                      
     471.  01:7EB1  CD 22 4A            	call	rand8
     472.  01:7EB4  E6 0F               	and	15
     473.  01:7EB6  C6 40               	add	a,64	; Y off set
     474.  01:7EB8                      		
     475.  01:7EB8  11 C0 FF            	ld	de,-64
     476.  01:7EBB  2A EE ED            	ld	hl,(xmap)
     477.  01:7EBE  19                  	add	hl,de
     478.  01:7EBF                      
     479.  01:7EBF  DD 21 15 EE         	ld  ix,enemies
     480.  01:7EC3  FD 26 08            	ld	iyh,max_enem
     481.  01:7EC6  11 0E 00            	ld  de,enemy_data
     482.  01:7EC9                      1:
     483.  01:7EC9  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     484.  01:7ECD  20 3E               	jr  nz,.next_sprt
     485.  01:7ECF                      
     486.  01:7ECF  DD 36 07 01         	ld  (ix+enemy_data.status),1
     487.  01:7ED3  DD 36 0B 0A         	ld	(ix+enemy_data.color),10	; start explosion
     488.  01:7ED7  DD 36 09 FF         	ld	(ix+enemy_data.kind),255
     489.  01:7EDB  DD 36 08 02         	ld	(ix+enemy_data.cntr),2
     490.  01:7EDF  DD 36 0A 0C         	ld	(ix+enemy_data.frame),12
     491.  01:7EE3  DD 77 00            	ld  (ix+enemy_data.y),a
     492.  01:7EE6  F5                  	push	af
     493.  01:7EE7  D9                  	exx
     494.  01:7EE8  CD 22 4A            	call	rand8
     495.  01:7EEB  E6 0F               	and	15
     496.  01:7EED  D9                  	exx
     497.  01:7EEE  4F                  	ld	c,a
     498.  01:7EEF  06 00               	ld	b,0
     499.  01:7EF1                      
     500.  01:7EF1  09                  	add	hl,bc 
     501.  01:7EF2  DD 75 01            	ld  (ix+enemy_data.x),l
     502.  01:7EF5  DD 74 02            	ld  (ix+enemy_data.x+1),h
     503.  01:7EF8                      
     504.  01:7EF8  D9                  	exx
     505.  01:7EF9  CD 22 4A            	call	rand8
     506.  01:7EFC  E6 3F               	and	63
     507.  01:7EFE  C6 20               	add	a,32
     508.  01:7F00  D9                  	exx
     509.  01:7F01  C1                  	pop	bc
     510.  01:7F02  80                  	add	a,b	
     511.  01:7F03                      	
     512.  01:7F03  DD 19               	add ix,de
     513.  01:7F05  FD 25               	dec	iyh
     514.  01:7F07  C8                  	ret	z
     515.  01:7F08  FE AF               	cp	191-16
     516.  01:7F0A  38 BD               	jr	c,1b
     517.  01:7F0C  C9                  	ret
     518.  01:7F0D                      
     519.  01:7F0D                      .next_sprt
     520.  01:7F0D  DD 19               	add ix,de
     521.  01:7F0F  FD 25               	dec	iyh
     522.  01:7F11  C8                  	ret	z
     523.  01:7F12  18 B5               	jr	1b
     524.  01:7F14                      	
     525.  01:7F14                      fade_out:
     526.  01:7F14  FD 2D               	dec	iyl
     527.  01:7F16  C0                  	ret	nz
     528.  01:7F17                      	
     529.  01:7F17  FD 2E 06            	ld	iyl,6
     530.  01:7F1A  3A AB ED            	ld	a,(_psg_vol_fix)
     531.  01:7F1D  3D                  	dec	a
     532.  01:7F1E  FE F0               	cp -16
     533.  01:7F20  28 03               	jr	z,98f
     534.  01:7F22  32 AB ED            	ld      (_psg_vol_fix),a
     535.  01:7F25                      98:
     536.  01:7F25  3A AD ED            	ld      a,(_scc_vol_fix)
     537.  01:7F28  3D                  	dec	a
     538.  01:7F29  FE F0               	cp -16
     539.  01:7F2B  28 03               	jr	z,98f
     540.  01:7F2D  32 AD ED            	ld      (_scc_vol_fix),a
     541.  01:7F30  CD 30 56            98:	call 	_SCC_PSG_Volume_balance
     542.  01:7F33                      	
     543.  01:7F33  C9                  99:	ret
     720   01:7F34                      	
     721   01:7F34                      
     722   01:7F34  (01:000C)           rdslt	equ	0x000c
     723   01:7F34  (01:001C)           CALSLT	equ	0x001c
     724   01:7F34  (01:0180)           chgcpu	equ	0x0180	; change cpu mode
     725   01:7F34  (01:FCC1)           exttbl	equ	0xfcc1	; main rom slot
     726   01:7F34                      
     727   01:7F34                      ; Detect Turbo-R
     728   01:7F34                      	
     729   01:7F34                      ; _test_r800:
     730   01:7F34                      	; ld	a,(exttbl)	; test msx1, msx2, msx2+
     731   01:7F34                      	; ld	hl,0x002d
     732   01:7F34                      	; call	rdslt
     733   01:7F34                      	; ld	l,a
     734   01:7F34                      	; ret
     735   01:7F34                      
     736   01:7F34                      
     737   01:7F34                      ; Switch to r800 rom mode
     738   01:7F34                      	
     739   01:7F34                      _set_r800:
     740   01:7F34  DB AA               	in	a,(0aah)
     741   01:7F36  E6 F0               	and 011110000B			; upper 4 bits contain info to preserve
     742   01:7F38  F6 06               	or	6
     743   01:7F3A  D3 AA               	out (0aah),a
     744   01:7F3C  DB A9               	in	a,(0a9h)
     745   01:7F3E  6F                  	ld	l,a
     746   01:7F3F                      
     747   01:7F3F  3A 2D 00            	ld	a,(0x002d)
     748   01:7F42  FE 03               	cp	3					; this is a TR
     749   01:7F44  7D                  	ld	a,l
     750   01:7F45  28 0E               	jr	z,set_turbo_tr
     751   01:7F47                      							; this is anything else
     752   01:7F47  E6 02               	and	0x02				; CTR
     753   01:7F49  C0                  	ret	nz					; if NZ, CTR is not pressed set the turbo
     754   01:7F4A                      
     755   01:7F4A  3A 80 01            	ld	A,(chgcpu)
     756   01:7F4D  FE C3               	cp	0C3h
     757   01:7F4F  3E 81               	ld	a,81h              ; R800 ROM mode or any other turbo
     758   01:7F51  CC 80 01            	call	z,chgcpu
     759   01:7F54  C9                  	ret
     760   01:7F55                      
     761   01:7F55                      set_turbo_tr
     762   01:7F55  E6 02               	and	0x02				; CTR
     763   01:7F57  C8                  	ret	z					; if Z, CTR is pressed -> do not set the turbo
     764   01:7F58  3E 81               	ld	a,81h              	; R800 ROM mode
     765   01:7F5A  C3 80 01            	jp chgcpu
     766   01:7F5D                      	
     767   01:7F5D                      
     768   01:7F5D                      
     769   01:7F5D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     770   01:7F5D                      _set_goodmode:
     771   01:7F5D  AF                  	xor	a
     772   01:7F5E  32 29 EC            	ld	(enable_cheat),a
     773   01:7F61  DB AA               	in	a,(0aah)
     774   01:7F63  E6 F0               	and 011110000B			; upper 4 bits contain info to preserve
     775   01:7F65  F6 07               	or	7					; 7 RET SEL BS STOP TAB ESC F5  F4
     776   01:7F67  D3 AA               	out (0aah),a
     777   01:7F69  DB A9               	in	a,(0a9h)
     778   01:7F6B  E6 04               	and	0x04
     779   01:7F6D  C0                  	ret	nz
     780   01:7F6E  3E FF               	ld	a,-1
     781   01:7F70  32 29 EC            	ld	(enable_cheat),a
     782   01:7F73  C9                  	ret
     783   01:7F74                      
     784   01:7F74                      _hb_10p_hb20p_patch:
     785   01:7F74  DB AA               	in	a,(0aah)
     786   01:7F76  E6 F0               	and 011110000B			; upper 4 bits contain info to preserve
     787   01:7F78  F6 07               	or	7					; 7 RET SEL BS STOP TAB ESC F5  F4
     788   01:7F7A  D3 AA               	out (0aah),a
     789   01:7F7C  DB A9               	in	a,(0a9h)
     790   01:7F7E  E6 80               	and	0x80
     791   01:7F80  C0                  	ret	nz
     792   01:7F81  3E F4               	ld	a,0xF4
     793   01:7F83  D3 A8               	out (0a8h),a
     794   01:7F85  C9                  	ret
     795   01:7F86                      	
     796   01:7F86                      	
     797   01:7F86                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     798   01:7F86                      	code	page 2
     799   02:8000                      message_pg2:
     800   02:8000                      	db	"rom in page 2",13
     800   02:8000  72 6F 6D 20 69 6E 20 70 61 67 65 20 32 0D 
     801   02:800E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     802   02:800E                      	include levelinit.asm
       1.  02:800E                      
       2.  02:800E                      ; ------------------------------------------------
       3.  02:800E                      ; expand level in A
       4.  02:800E                      ;
       5.  02:800E                      levelinit:
       6.  02:800E  32 F3 ED            	ld	(cur_level),a
       7.  02:8011                      	
       8.  02:8011  21 00 D4            	ld	hl,level_buffer
       9.  02:8014  11 01 D4            	ld	de,level_buffer+1
      10.  02:8017  AF                  	xor a
      11.  02:8018  77                  	ld	(hl),a
      12.  02:8019  01 1F 18            	ld	bc,LvlWidth*16-1+32
      13.  02:801C  ED B0               	ldir
      14.  02:801E                      	
      15.  02:801E  21 00 00            	ld	hl,0
      16.  02:8021  22 EE ED            	ld	(xmap),hl
      17.  02:8024  01 78 00            	ld	bc,xship_rel
      18.  02:8027  09                  	add hl,bc
      19.  02:8028  22 F1 ED            	ld	(xship),hl
      20.  02:802B                      	; ld	a,64+64-8
      21.  02:802B                      	; ld	(yship),a
      22.  02:802B                      
      23.  02:802B                      
      24.  02:802B  3A F3 ED            	ld	a,(cur_level)
      25.  02:802E  6F                  	ld	l,a
      26.  02:802F  26 00               	ld	h,0
      27.  02:8031  29                  	add hl,hl
      28.  02:8032  01 40 80            	ld	bc,meta_levels
      29.  02:8035  09                  	add	hl,bc
      30.  02:8036  7E                  	ld	a,(hl)
      31.  02:8037  23                  	inc	hl
      32.  02:8038  66                  	ld	h,(hl)
      33.  02:8039  6F                  	ld	l,a
      34.  02:803A  11 00 D4            	ld	de,level_buffer
      35.  02:803D  C3 0D 05            	jp	mom_depack_rom
      36.  02:8040                      
      37.  02:8040                      
      38.  02:8040                      
      39.  02:8040                      	
      40.  02:8040                      meta_levels:
      41.  02:8040                      	dw meta_pnt0, meta_pnt1, meta_pnt2, meta_pnt3
      41.  02:8040  60 80 B2 80 F3 83 22 88 
      42.  02:8048                      	dw meta_pnt4, meta_pnt5, meta_pnt6, meta_pnt7
      42.  02:8048  47 8C 92 90 96 94 99 98 
      43.  02:8050                      	dw meta_pnt8, meta_pnt9, meta_pntA, meta_pntB
      43.  02:8050  9B 9C 7E A0 3F A4 B2 A8 
      44.  02:8058                      	dw meta_pntC, meta_pntD, meta_pntE, meta_pntF
      44.  02:8058  DE AC 91 AF 9D B3 AF B7 
      45.  02:8060                      
      46.  02:8060                      	
      47.  02:8060                      ; *** Level data in rom ***
      48.  02:8060                      
      49.  02:8060                      	;
      50.  02:8060  (0052)              meta_pnt0:	incbin lev_ms.miz
      51.  02:80B2                      	;
      52.  02:80B2  (0341)              meta_pnt1:	incbin lev_1.miz
      53.  02:83F3                      	;
      54.  02:83F3  (042F)              meta_pnt2:	incbin lev_2.miz
      55.  02:8822                      	;
      56.  02:8822  (0425)              meta_pnt3:	incbin lev_3.miz
      57.  02:8C47                      	;
      58.  02:8C47  (044B)              meta_pnt4:	incbin lev_4.miz
      59.  02:9092                      	;
      60.  02:9092  (0404)              meta_pnt5:	incbin lev_5.miz
      61.  02:9496                      	;
      62.  02:9496  (0403)              meta_pnt6:	incbin lev_6.miz
      63.  02:9899                      	;
      64.  02:9899  (0402)              meta_pnt7:	incbin lev_7.miz
      65.  02:9C9B                      	;
      66.  02:9C9B  (03E3)              meta_pnt8:	incbin lev_8.miz
      67.  02:A07E                      	;
      68.  02:A07E  (03C1)              meta_pnt9:	incbin lev_9.miz
      69.  02:A43F                      	;
      70.  02:A43F  (0473)              meta_pntA:	incbin lev_A.miz
      71.  02:A8B2                      	;
      72.  02:A8B2  (042C)              meta_pntB:	incbin lev_B.miz
      73.  02:ACDE                      	;
      74.  02:ACDE  (02B3)              meta_pntC:	incbin lev_C.miz
      75.  02:AF91                      	;
      76.  02:AF91  (040C)              meta_pntD:	incbin lev_D.miz
      77.  02:B39D                      	;
      78.  02:B39D  (0412)              meta_pntE:	incbin lev_E.miz
      79.  02:B7AF                      	;
      80.  02:B7AF  (03D7)              meta_pntF:	incbin lev_F.miz
     803   02:BB86                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     804   02:BB86                      	include victory.asm
       1.  02:BB86                      
       2.  02:BB86                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  02:BB86                      ; typewriter
       4.  02:BB86                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       5.  02:BB86                      greetings:
       6.  02:BB86                      	db	"CONGRATULATIONS PILOT!!",13
       6.  02:BB86  43 4F 4E 47 52 41 54 55 4C 41 54 49 4F 4E 53 20 
       6.  02:BB96  50 49 4C 4F 54 21 21 0D 
       7.  02:BB9E                      	db	"You saved our solar system",13
       7.  02:BB9E  59 6F 75 20 73 61 76 65 64 20 6F 75 72 20 73 6F 
       7.  02:BBAE  6C 61 72 20 73 79 73 74 65 6D 0D 
       8.  02:BBB9                      	db	"from the Dreadnoughts menace",13
       8.  02:BBB9  66 72 6F 6D 20 74 68 65 20 44 72 65 61 64 6E 6F 
       8.  02:BBC9  75 67 68 74 73 20 6D 65 6E 61 63 65 0D 
       9.  02:BBD6                      	db	"for now at least...",13
       9.  02:BBD6  66 6F 72 20 6E 6F 77 20 61 74 20 6C 65 61 73 74 
       9.  02:BBE6  2E 2E 2E 0D 
      10.  02:BBEA                      greetings1:
      11.  02:BBEA                      	db	"They will return.",13
      11.  02:BBEA  54 68 65 79 20 77 69 6C 6C 20 72 65 74 75 72 6E 
      11.  02:BBFA  2E 0D 
      12.  02:BBFC                      	db	"But for that time",13
      12.  02:BBFC  42 75 74 20 66 6F 72 20 74 68 61 74 20 74 69 6D 
      12.  02:BC0C  65 0D 
      13.  02:BC0E                      	db	"you will need an MSX2",13
      13.  02:BC0E  79 6F 75 20 77 69 6C 6C 20 6E 65 65 64 20 61 6E 
      13.  02:BC1E  20 4D 53 58 32 0D 
      14.  02:BC24                      	db	"to defeat them.",13
      14.  02:BC24  74 6F 20 64 65 66 65 61 74 20 74 68 65 6D 2E 0D 
      15.  02:BC34                      greetings2:
      16.  02:BC34                      	db	   "a last note...",13
      16.  02:BC34  61 20 6C 61 73 74 20 6E 6F 74 65 2E 2E 2E 0D 
      17.  02:BC43                      	db	"Now you can select God mode.",13
      17.  02:BC43  4E 6F 77 20 79 6F 75 20 63 61 6E 20 73 65 6C 65 
      17.  02:BC53  63 74 20 47 6F 64 20 6D 6F 64 65 2E 0D 
      18.  02:BC60                      	db	"Next time, try to boot",13
      18.  02:BC60  4E 65 78 74 20 74 69 6D 65 2C 20 74 72 79 20 74 
      18.  02:BC70  6F 20 62 6F 6F 74 0D 
      19.  02:BC77                      	db	"while ESC is pressed...",13
      19.  02:BC77  77 68 69 6C 65 20 45 53 43 20 69 73 20 70 72 65 
      19.  02:BC87  73 73 65 64 2E 2E 2E 0D 
      20.  02:BC8F                      	
      21.  02:BC8F                      _cls:
      22.  02:BC8F                      	_setvdpwvram 0x1A00
      22.  02:BC8F                    >  if (value & 0xFF)
      22.  02:BC8F                    ~   ld a,value & 0xFF
      22.  02:BC8F                    ~  else
      22.  02:BC8F  AF                >   xor a
      22.  02:BC90                    >  endif
      22.  02:BC90  D3 99             >  out (0x99),a
      22.  02:BC92  3E 5A             >  ld a,0x40 + (value/256)
      22.  02:BC94  D3 99             >  out (0x99),a
      23.  02:BC96  AF                  	xor	a
      24.  02:BC97  47                  	ld	b,a
      25.  02:BC98                      111:	
      26.  02:BC98  D3 98               	out	(0x98),a
      27.  02:BC9A  00                  	nop
      28.  02:BC9B  10 FB               	djnz 111b
      29.  02:BC9D  C9                  	ret
      30.  02:BC9E                      
      31.  02:BC9E                      victory_text2:
      32.  02:BC9E  FB                  	ei
      33.  02:BC9F  76                  	halt
      34.  02:BCA0  F3                  	di
      35.  02:BCA1  CD 8F BC            	call _cls
      36.  02:BCA4  11 34 BC            	ld	de,greetings2
      37.  02:BCA7  21 28 1A            	ld	hl,0x1800+32*17+8
      38.  02:BCAA  CD 2E 24            	call	prstr
      39.  02:BCAD  21 62 1A            	ld	hl,0x1800+32*19+2
      40.  02:BCB0  CD 2E 24            	call	prstr
      41.  02:BCB3  21 A5 1A            	ld	hl,0x1800+32*21+5
      42.  02:BCB6  CD 2E 24            	call	prstr
      43.  02:BCB9  21 E5 1A            	ld	hl,0x1800+32*23+5
      44.  02:BCBC  CD 2E 24            	call	prstr
      45.  02:BCBF  C9                  	ret
      46.  02:BCC0                      
      47.  02:BCC0                      	
      48.  02:BCC0                      
      49.  02:BCC0                      victory_text:	
      50.  02:BCC0  F3                  	di
      51.  02:BCC1                      	_setvdpwvram 0x1000
      51.  02:BCC1                    >  if (value & 0xFF)
      51.  02:BCC1                    ~   ld a,value & 0xFF
      51.  02:BCC1                    ~  else
      51.  02:BCC1  AF                >   xor a
      51.  02:BCC2                    >  endif
      51.  02:BCC2  D3 99             >  out (0x99),a
      51.  02:BCC4  3E 50             >  ld a,0x40 + (value/256)
      51.  02:BCC6  D3 99             >  out (0x99),a
      52.  02:BCC8  21 7F F8            	ld	hl,ram_tileset
      53.  02:BCCB  CD 0B 3F            	call	write_256
      54.  02:BCCE                      	
      55.  02:BCCE                      	; set colours
      56.  02:BCCE                      	_setvdpwvram 0x3000
      56.  02:BCCE                    >  if (value & 0xFF)
      56.  02:BCCE                    ~   ld a,value & 0xFF
      56.  02:BCCE                    ~  else
      56.  02:BCCE  AF                >   xor a
      56.  02:BCCF                    >  endif
      56.  02:BCCF  D3 99             >  out (0x99),a
      56.  02:BCD1  3E 70             >  ld a,0x40 + (value/256)
      56.  02:BCD3  D3 99             >  out (0x99),a
      57.  02:BCD5  01 01 00            	ld	bc,0x0001
      58.  02:BCD8  3E 51               1:	ld	a,0x51
      59.  02:BCDA  CD A4 24            	call	set4
      60.  02:BCDD  3E 41               	ld	a,0x41
      61.  02:BCDF  CD A4 24            	call	set4
      62.  02:BCE2  10 F4               	djnz	1b
      63.  02:BCE4  0D                  	dec	c
      64.  02:BCE5  20 F1               	jr	nz,1b
      65.  02:BCE7                      
      66.  02:BCE7  CD 8F BC            	call _cls
      67.  02:BCEA                      	
      68.  02:BCEA  11 86 BB            	ld	de,greetings
      69.  02:BCED                      	; ld	hl,0x1800+32*16+5
      70.  02:BCED  21 25 1A            	ld	hl,0x1800+32*17+5
      71.  02:BCF0  CD 2E 24            	call	prstr
      72.  02:BCF3                      	; ld	hl,0x1800+32*17+3
      73.  02:BCF3  21 63 1A            	ld	hl,0x1800+32*19+3
      74.  02:BCF6  CD 2E 24            	call	prstr
      75.  02:BCF9                      	; ld	hl,0x1800+32*18+2
      76.  02:BCF9  21 A2 1A            	ld	hl,0x1800+32*21+2
      77.  02:BCFC  CD 2E 24            	call	prstr
      78.  02:BCFF                      	; ld	hl,0x1800+32*19+7
      79.  02:BCFF  21 E7 1A            	ld	hl,0x1800+32*23+7
      80.  02:BD02  CD 2E 24            	call	prstr
      81.  02:BD05  C9                  	ret
      82.  02:BD06                      	
      83.  02:BD06                      victory_text1:
      84.  02:BD06  CD 8F BC            	call _cls	
      85.  02:BD09  11 EA BB            	ld	de,greetings1	
      86.  02:BD0C  21 28 1A            	ld	hl,0x1800+32*17+8
      87.  02:BD0F                      	; ld	hl,0x1800+32*20+8
      88.  02:BD0F  CD 2E 24            	call	prstr
      89.  02:BD12  21 68 1A            	ld	hl,0x1800+32*19+8
      90.  02:BD15                      	; ld	hl,0x1800+32*21+8
      91.  02:BD15  CD 2E 24            	call	prstr
      92.  02:BD18                      	; ld	hl,0x1800+32*22+6
      93.  02:BD18  21 A6 1A            	ld	hl,0x1800+32*21+6
      94.  02:BD1B  CD 2E 24            	call	prstr
      95.  02:BD1E                      	; ld	hl,0x1800+32*23+8
      96.  02:BD1E  21 E8 1A            	ld	hl,0x1800+32*23+8
      97.  02:BD21  CD 2E 24            	call	prstr
      98.  02:BD24  C9                  	ret
      99.  02:BD25                      
     100.  02:BD25                      
     101.  02:BD25                      wait_music_or_key:	
     102.  02:BD25                      
     103.  02:BD25  CD 96 35            1:	call	joy_read
     104.  02:BD28  CB 67               	bit	4,a
     105.  02:BD2A  C0                  	ret	nz			; end at key pressed
     106.  02:BD2B  76                  	halt
     107.  02:BD2C  3A 2A EC            	ld	a,(PT3_SETUP)
     108.  02:BD2F  E6 80               	and	128
     109.  02:BD31  C0                  	ret nz 			; when music ends or loops
     110.  02:BD32  18 F1               	jr	1b
     111.  02:BD34                      	
     112.  02:BD34                      wait_time_or_key:	
     113.  02:BD34  01 58 02            	ld	bc,10*60
     114.  02:BD37                      wait_time_or_key_bc:
     115.  02:BD37  C5                  1:	push	bc
     116.  02:BD38  76                  	halt
     117.  02:BD39  CD 96 35            	call	joy_read
     118.  02:BD3C  CB 67               	bit	4,a
     119.  02:BD3E  C1                  	pop	bc
     120.  02:BD3F  C0                  	ret	nz			; end at key pressed
     121.  02:BD40  0B                  	dec	bc			; end after 10 secs
     122.  02:BD41  78                  	ld	a,b
     123.  02:BD42  B1                  	or	c
     124.  02:BD43  20 F2               	jr	nz,1b
     125.  02:BD45  C9                  	ret
     805   02:BD46                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     806   02:BD46                      rom_tileset_miz:
     807   02:BD46  (022F)              	incbin	tileset_rev01.miz
     808   02:BF75                      
     809   02:BF75                      endpage2: 
     810   02:BF75  00                  	db	0
     811   02:BF76                      
     812   02:BF76                      
     813   02:BF76                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     814   02:BF76                      	code	page 3
     815   03:8000                      message_pg3:	
     816   03:8000                      	db	"rom in page 3 ",13
     816   03:8000  72 6F 6D 20 69 6E 20 70 61 67 65 20 33 20 0D 
     817   03:800F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     818   03:800F                      splash_shps:
     819   03:800F  (07CD)              	incbin MANTA_shps.miz
     820   03:87DC                      splash_clrs:
     821   03:87DC  (0608)              	incbin MANTA_clrs.miz
     822   03:8DE4                      vsplash_shps:
     823   03:8DE4  (03F5)              	incbin ENDING2_chr.miz
     824   03:91D9                      vsplash_clrs:
     825   03:91D9  (0353)              	incbin ENDING2_clr.miz
     826   03:952C                      
     827   03:952C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     828   03:952C                      	include tileinit.asm
       1.  03:952C                      
       2.  03:952C                      ;
       3.  03:952C                      ;	load tile sets in vram
       4.  03:952C                      tile_init:
       5.  03:952C                      	
       6.  03:952C  3A F4 ED            	ld	a,(next_level)
       7.  03:952F  6F                  	ld	l,a
       8.  03:9530  26 00               	ld	h,0
       9.  03:9532  29                  	add	hl,hl
      10.  03:9533  01 4E B1            	ld	bc,clr_tab
      11.  03:9536  09                  	add	hl,bc
      12.  03:9537  4E                  	ld	c,(hl)
      13.  03:9538  23                  	inc	hl
      14.  03:9539  46                  	ld	b,(hl)
      15.  03:953A  ED 43 F6 ED         	ld	(clr_table),bc
      16.  03:953E                      	
      17.  03:953E                      l1_15_init:
      18.  03:953E                      	; set meta pnt tables
      19.  03:953E  21 9F AA            	ld	hl,meta_pnt_table_u_miz
      20.  03:9541  11 00 C0            	ld	de,meta_pnt_table_u
      21.  03:9544  CD 0D 05            	call	mom_depack_rom
      22.  03:9547                      	
      23.  03:9547  21 2C AD            	ld	hl,meta_pnt_table_d_miz
      24.  03:954A  11 00 C4            	ld	de,meta_pnt_table_d
      25.  03:954D  CD 0D 05            	call	mom_depack_rom
      26.  03:9550                      	
      27.  03:9550                      	; fake meta-tile for explosion
      28.  03:9550  21 FE C0            	ld	hl,meta_pnt_table_u+254
      29.  03:9553  06 08               	ld	b,8
      30.  03:9555  36 FE               1:	ld	(hl),254
      31.  03:9557  24                  	inc	h
      32.  03:9558  10 FB               	djnz	1b 
      33.  03:955A                       
      34.  03:955A  3A 20 EC             	ld	a,(toshiba_switch)
      35.  03:955D  A7                  	and	a
      36.  03:955E  C2 0A 96            	jp	nz,toshiba_vram_layout
      37.  03:9561                      	
      38.  03:9561                      ;  TMS
      39.  03:9561  21 91 97            	ld	hl,chr_tileset1_common
      40.  03:9564  11 00 C8            	ld	de,miz_buffer
      41.  03:9567  CD 0D 05            	call	mom_depack_rom
      42.  03:956A  21 26 A3            	ld	hl,chr_tileset1_up
      43.  03:956D  11 10 CF            	ld	de,miz_buffer+n_common_tiles1*8
      44.  03:9570  CD 0D 05            	call	mom_depack_rom
      45.  03:9573  11 00 08            	ld	de,0x0800
      46.  03:9576  CD 00 00            	call	write_2k
      47.  03:9579  21 78 A3            	ld	hl,chr_tileset1_dw
      48.  03:957C  11 10 CF            	ld	de,miz_buffer+n_common_tiles1*8
      49.  03:957F  CD 0D 05            	call	mom_depack_rom
      50.  03:9582  11 00 10            	ld	de,0x1000
      51.  03:9585  CD 00 00            	call	write_2k
      52.  03:9588                      
      53.  03:9588  11 F8 0F            	ld	de,0x0800+255*8
      54.  03:958B  CD 39 97            	call	set_star_shape
      55.  03:958E  11 F8 17            	ld	de,0x1000+255*8
      56.  03:9591  CD 39 97            	call	set_star_shape
      57.  03:9594                      
      58.  03:9594  21 E7 9B            	ld	hl,chr_tileset2_common
      59.  03:9597  11 00 C8            	ld	de,miz_buffer
      60.  03:959A  CD 0D 05            	call	mom_depack_rom
      61.  03:959D  21 05 A4            	ld	hl,chr_tileset2_up
      62.  03:95A0  11 58 CF            	ld	de,miz_buffer+n_common_tiles2*8
      63.  03:95A3  CD 0D 05            	call	mom_depack_rom
      64.  03:95A6  11 00 28            	ld	de,0x2800
      65.  03:95A9  CD 00 00            	call	write_2k
      66.  03:95AC  21 63 A4            	ld	hl,chr_tileset2_dw
      67.  03:95AF  11 58 CF            	ld	de,miz_buffer+n_common_tiles2*8
      68.  03:95B2  CD 0D 05            	call	mom_depack_rom
      69.  03:95B5  11 00 30            	ld	de,0x3000
      70.  03:95B8  CD 00 00            	call	write_2k
      71.  03:95BB                      
      72.  03:95BB  11 F8 2F            	ld	de,0x2800+255*8
      73.  03:95BE  CD 39 97            	call	set_star_shape
      74.  03:95C1  11 F8 37            	ld	de,0x3000+255*8
      75.  03:95C4  CD 39 97            	call	set_star_shape
      76.  03:95C7                      	
      77.  03:95C7  21 B4 A1            	ld	hl,clr_tileset2_common
      78.  03:95CA  11 00 C8            	ld	de,miz_buffer
      79.  03:95CD  CD 0D 05            	call	mom_depack_rom
      80.  03:95D0  21 CC A4            	ld	hl,clr_tileset2
      81.  03:95D3  11 58 CF            	ld	de,miz_buffer+n_common_tiles2*8
      82.  03:95D6  CD 0D 05            	call	mom_depack_rom
      83.  03:95D9  CD D6 B0            	call	clr_map
      84.  03:95DC  11 00 00            	ld	de,0x0000
      85.  03:95DF  CD 00 00            	call	write_2k
      86.  03:95E2                      	
      87.  03:95E2  11 F8 07            	ld	de,0x0000+255*8
      88.  03:95E5  CD 65 97            	call	set_star_color
      89.  03:95E8                      
      90.  03:95E8  21 5A A0            	ld	hl,clr_tileset1_common
      91.  03:95EB  11 00 C8            	ld	de,miz_buffer
      92.  03:95EE  CD 0D 05            	call	mom_depack_rom
      93.  03:95F1  21 D0 A3            	ld	hl,clr_tileset1
      94.  03:95F4  11 10 CF            	ld	de,miz_buffer+n_common_tiles1*8
      95.  03:95F7  CD 0D 05            	call	mom_depack_rom
      96.  03:95FA  CD D6 B0            	call	clr_map
      97.  03:95FD  11 00 20            	ld	de,0x2000
      98.  03:9600  CD 00 00            	call	write_2k
      99.  03:9603                      	
     100.  03:9603  11 F8 27            	ld	de,0x2000+255*8
     101.  03:9606  CD 65 97            	call	set_star_color
     102.  03:9609                      
     103.  03:9609  C9                  	ret
     104.  03:960A                      
     105.  03:960A                      toshiba_vram_layout:
     106.  03:960A                      
     107.  03:960A                      ; Toshiba
     108.  03:960A  21 91 97            	ld	hl,chr_tileset1_common
     109.  03:960D  11 00 C8            	ld	de,miz_buffer
     110.  03:9610  CD 0D 05            	call	mom_depack_rom
     111.  03:9613  21 26 A3            	ld	hl,chr_tileset1_up
     112.  03:9616  11 10 CF            	ld	de,miz_buffer+n_common_tiles1*8
     113.  03:9619  CD 0D 05            	call	mom_depack_rom
     114.  03:961C  11 00 08            	ld	de,0x0800
     115.  03:961F  CD 00 00            	call	write_2k
     116.  03:9622  21 78 A3            	ld	hl,chr_tileset1_dw
     117.  03:9625  11 10 CF            	ld	de,miz_buffer+n_common_tiles1*8
     118.  03:9628  CD 0D 05            	call	mom_depack_rom
     119.  03:962B  11 00 10            	ld	de,0x1000
     120.  03:962E  CD 00 00            	call	write_2k
     121.  03:9631                      
     122.  03:9631  11 F8 0F            	ld	de,0x0800+255*8
     123.  03:9634  CD 39 97            	call	set_star_shape
     124.  03:9637  11 F8 17            	ld	de,0x1000+255*8
     125.  03:963A  CD 39 97            	call	set_star_shape
     126.  03:963D                      	
     127.  03:963D  21 5A A0            	ld	hl,clr_tileset1_common
     128.  03:9640  11 00 C8            	ld	de,miz_buffer
     129.  03:9643  CD 0D 05            	call	mom_depack_rom
     130.  03:9646  21 D0 A3            	ld	hl,clr_tileset1
     131.  03:9649  11 10 CF            	ld	de,miz_buffer+n_common_tiles1*8
     132.  03:964C  CD 0D 05            	call	mom_depack_rom
     133.  03:964F  CD D6 B0            	call	clr_map
     134.  03:9652  11 00 28            	ld	de,0x2800
     135.  03:9655  CD 00 00            	call	write_2k
     136.  03:9658  11 00 30            	ld	de,0x3000
     137.  03:965B  CD 00 00            	call	write_2k
     138.  03:965E                      	
     139.  03:965E  11 F8 2F            	ld	de,0x2800+255*8
     140.  03:9661  CD 65 97            	call	set_star_color
     141.  03:9664  11 F8 37            	ld	de,0x3000+255*8
     142.  03:9667  CD 65 97            	call	set_star_color
     143.  03:966A  C9                  	ret
     144.  03:966B                      	
     145.  03:966B                      shuttle_init:
     146.  03:966B                      ; set meta pnt tables
     147.  03:966B  21 C6 AF            	ld	hl,meta_pnt_table_u_ms_miz
     148.  03:966E  11 00 C0            	ld	de,meta_pnt_table_u
     149.  03:9671  CD 0D 05            	call	mom_depack_rom
     150.  03:9674                      	
     151.  03:9674  21 4D B0            	ld	hl,meta_pnt_table_d_ms_miz
     152.  03:9677  11 00 C4            	ld	de,meta_pnt_table_d
     153.  03:967A  CD 0D 05            	call	mom_depack_rom
     154.  03:967D                      	
     155.  03:967D                      	; fake meta-tile for explosion
     156.  03:967D                      	
     157.  03:967D  21 FE C0            	ld	hl,meta_pnt_table_u+254
     158.  03:9680  06 08               	ld	b,8
     159.  03:9682  36 FE               1:	ld	(hl),254
     160.  03:9684  24                  	inc	h
     161.  03:9685  10 FB               	djnz	1b 
     162.  03:9687                       
     163.  03:9687                      ; set patterns
     164.  03:9687  21 09 A5            	ld	hl,chr_tileset0_u_ms
     165.  03:968A  11 00 C8            	ld	de,miz_buffer
     166.  03:968D  CD 0D 05            	call	mom_depack_rom
     167.  03:9690  11 00 08            	ld	de,0x0800
     168.  03:9693  CD 00 00            	call	write_2k
     169.  03:9696                      		
     170.  03:9696  21 DD A5            	ld	hl,chr_tileset0_d_ms
     171.  03:9699  11 00 C8            	ld	de,miz_buffer
     172.  03:969C  CD 0D 05            	call	mom_depack_rom
     173.  03:969F  11 00 10            	ld	de,0x1000
     174.  03:96A2  CD 00 00            	call	write_2k
     175.  03:96A5                      
     176.  03:96A5  21 B8 A6            	ld	hl,chr_tileset1_u_ms
     177.  03:96A8  11 00 C8            	ld	de,miz_buffer
     178.  03:96AB  CD 0D 05            	call	mom_depack_rom
     179.  03:96AE  11 00 28            	ld	de,0x2800
     180.  03:96B1  CD 00 00            	call	write_2k
     181.  03:96B4                      
     182.  03:96B4  21 91 A7            	ld	hl,chr_tileset1_d_ms
     183.  03:96B7  11 00 C8            	ld	de,miz_buffer
     184.  03:96BA  CD 0D 05            	call	mom_depack_rom
     185.  03:96BD  11 00 30            	ld	de,0x3000
     186.  03:96C0  CD 00 00            	call	write_2k
     187.  03:96C3                      
     188.  03:96C3                      ; set colours
     189.  03:96C3  21 FE B0            	ld	hl,clr_table1
     190.  03:96C6  22 F6 ED            	ld	(clr_table),hl
     191.  03:96C9                      
     192.  03:96C9  21 85 A9            	ld	hl,clr_tileset1_ms
     193.  03:96CC  11 00 C8            	ld	de,miz_buffer
     194.  03:96CF  CD 0D 05            	call	mom_depack_rom
     195.  03:96D2  CD D6 B0            	call	clr_map
     196.  03:96D5  11 00 00            	ld	de,0x0000
     197.  03:96D8  CD 00 00            	call	write_2k
     198.  03:96DB  11 F8 07            	ld	de,0x0000+255*8
     199.  03:96DE  CD 65 97            	call	set_star_color
     200.  03:96E1                      
     201.  03:96E1  21 71 A8            	ld	hl,clr_tileset0_ms
     202.  03:96E4  11 00 C8            	ld	de,miz_buffer
     203.  03:96E7  CD 0D 05            	call	mom_depack_rom
     204.  03:96EA  CD D6 B0            	call	clr_map
     205.  03:96ED  11 00 20            	ld	de,0x2000
     206.  03:96F0  CD 00 00            	call	write_2k
     207.  03:96F3  11 F8 27            	ld	de,0x2000+255*8
     208.  03:96F6  CD 65 97            	call	set_star_color
     209.  03:96F9                      
     210.  03:96F9  3A 20 EC            	ld	a,(toshiba_switch)
     211.  03:96FC  A7                  	and	a
     212.  03:96FD  CA 18 97            	jp	z,1f
     213.  03:9700                      	
     214.  03:9700                      	; Toshiba
     215.  03:9700  11 00 28            	ld	de,0x2800
     216.  03:9703  CD 00 00            	call	write_2k
     217.  03:9706  11 00 30            	ld	de,0x3000
     218.  03:9709  CD 00 00            	call	write_2k
     219.  03:970C                      	
     220.  03:970C  11 F8 2F            	ld	de,0x2800+255*8
     221.  03:970F  CD 65 97            	call	set_star_color
     222.  03:9712  11 F8 37            	ld	de,0x3000+255*8
     223.  03:9715  CD 65 97            	call	set_star_color
     224.  03:9718                      1:
     225.  03:9718                      
     226.  03:9718  11 F8 0F            	ld	de,0x0800+255*8
     227.  03:971B  CD 39 97            	call	set_star_shape
     228.  03:971E  11 F8 17            	ld	de,0x1000+255*8
     229.  03:9721  CD 39 97            	call	set_star_shape
     230.  03:9724                      	
     231.  03:9724  3A 20 EC            	ld	a,(toshiba_switch)
     232.  03:9727  A7                  	and	a
     233.  03:9728  C0                  	ret	nz
     234.  03:9729                      	
     235.  03:9729  11 F8 2F            	ld	de,0x2800+255*8
     236.  03:972C  CD 39 97            	call	set_star_shape
     237.  03:972F  11 F8 37            	ld	de,0x3000+255*8
     238.  03:9732  CD 39 97            	call	set_star_shape
     239.  03:9735  C9                  	ret
     240.  03:9736                      _out:
     241.  03:9736  ED 79               	out (c),a
     242.  03:9738  C9                  	ret
     243.  03:9739                      set_star_shape:
     244.  03:9739  F3                  	di
     245.  03:973A  7B                  	ld	a,e
     246.  03:973B  D3 99               	out (0x99),a
     247.  03:973D  7A                  	ld	a,d 
     248.  03:973E  F6 40               	or	0x40
     249.  03:9740  D3 99               	out (0x99),a
     250.  03:9742                      	
     251.  03:9742  0E 98               	ld	c,0x98
     252.  03:9744  3E 02               	ld	a,2
     253.  03:9746  CD 36 97            	call	_out
     254.  03:9749  3E 07               	ld	a,7
     255.  03:974B  CD 36 97            	call	_out
     256.  03:974E  3E 02               	ld	a,2
     257.  03:9750  CD 36 97            	call	_out
     258.  03:9753  AF                  	xor	a
     259.  03:9754                      [5]	call	_out
     259.  03:9754  CD 36 97 CD 36 97 CD 36 97 CD 36 97 CD 36 97 
     260.  03:9763  FB                  	ei
     261.  03:9764  C9                  	ret
     262.  03:9765                      	
     263.  03:9765                      set_star_color:
     264.  03:9765  F3                  	di
     265.  03:9766  7B                  	ld	a,e
     266.  03:9767  D3 99               	out (0x99),a
     267.  03:9769  7A                  	ld	a,d 
     268.  03:976A  F6 40               	or	0x40
     269.  03:976C  D3 99               	out (0x99),a
     270.  03:976E                      	
     271.  03:976E  0E 98               	ld	c,0x98
     272.  03:9770  3E 70               	ld	a,0x70
     273.  03:9772  CD 36 97            	call	_out
     274.  03:9775  3E F0               	ld	a,0xf0
     275.  03:9777  CD 36 97            	call	_out
     276.  03:977A  3E 70               	ld	a,0x70
     277.  03:977C  CD 36 97            	call	_out
     278.  03:977F  AF                  	xor a
     279.  03:9780                      [5]	call	_out
     279.  03:9780  CD 36 97 CD 36 97 CD 36 97 CD 36 97 CD 36 97 
     280.  03:978F  FB                  	ei
     281.  03:9790  C9                  	ret
     282.  03:9791                      
     283.  03:9791                      
     284.  03:9791                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     285.  03:9791                      ; *** tile set data in rom ***
     286.  03:9791                      chr_tileset1_common:
     287.  03:9791  (0456)              	incbin chr1_common.miz
     288.  03:9BE7                      chr_tileset2_common:
     289.  03:9BE7  (0473)              	incbin chr2_common.miz
     290.  03:A05A                      
     291.  03:A05A                      clr_tileset1_common:
     292.  03:A05A  (015A)              	incbin clr1_common.miz
     293.  03:A1B4                      clr_tileset2_common:
     294.  03:A1B4  (0172)              	incbin clr2_common.miz
     295.  03:A326                      
     296.  03:A326                      chr_tileset1_up:
     297.  03:A326  (0052)              	incbin chr1_up.miz
     298.  03:A378                      chr_tileset1_dw:
     299.  03:A378  (0058)              	incbin chr1_dw.miz
     300.  03:A3D0                      clr_tileset1:
     301.  03:A3D0  (0035)              	incbin clr1_ud.miz
     302.  03:A405                      
     303.  03:A405                      chr_tileset2_up:
     304.  03:A405  (005E)              	incbin chr2_up.miz
     305.  03:A463                      chr_tileset2_dw:
     306.  03:A463  (0069)              	incbin chr2_dw.miz
     307.  03:A4CC                      clr_tileset2:
     308.  03:A4CC  (003D)              	incbin clr2_ud.miz
     309.  03:A509                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     310.  03:A509                      	
     311.  03:A509                      ; *** shuttle tile set data in rom ***
     312.  03:A509                      	;code	page 0,1	
     313.  03:A509                      chr_tileset0_u_ms:
     314.  03:A509  (00D4)              	incbin chr_plain1u_ms.miz
     315.  03:A5DD                      	;code	page 0,1	
     316.  03:A5DD                      chr_tileset0_d_ms:
     317.  03:A5DD  (00DB)              	incbin chr_plain1d_ms.miz
     318.  03:A6B8                      	;code	page 0,1	
     319.  03:A6B8                      chr_tileset1_u_ms:
     320.  03:A6B8  (00D9)              	incbin chr_plain2u_ms.miz
     321.  03:A791                      	;code	page 0,1	
     322.  03:A791                      chr_tileset1_d_ms:
     323.  03:A791  (00E0)              	incbin chr_plain2d_ms.miz
     324.  03:A871                      
     325.  03:A871                      	;code	page 0,1	
     326.  03:A871                      clr_tileset0_ms:
     327.  03:A871  (0114)              	incbin clr_plain1_ms.miz
     328.  03:A985                      	;code	page 0,1	
     329.  03:A985                      clr_tileset1_ms:
     330.  03:A985  (011A)              	incbin clr_plain2_ms.miz
     331.  03:AA9F                      
     332.  03:AA9F                      	;code	page 0,1	
     333.  03:AA9F                      meta_pnt_table_u_miz:
     334.  03:AA9F  (028D)              	incbin meta_pnt_table_u.miz
     335.  03:AD2C                      	;code	page 0,1	
     336.  03:AD2C                      meta_pnt_table_d_miz:
     337.  03:AD2C  (029A)              	incbin meta_pnt_table_d.miz
     338.  03:AFC6                      
     339.  03:AFC6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     340.  03:AFC6                      	
     341.  03:AFC6                      	;code	page 0,1	
     342.  03:AFC6                      meta_pnt_table_u_ms_miz:
     343.  03:AFC6  (0087)              	incbin meta_pnt_table_u_ms.miz
     344.  03:B04D                      	;code	page 0,1	
     345.  03:B04D                      meta_pnt_table_d_ms_miz:
     346.  03:B04D  (0089)              	incbin meta_pnt_table_d_ms.miz
     829   03:B0D6                      	include clr_map.asm
       1.  03:B0D6                      
       2.  03:B0D6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  03:B0D6                      
       4.  03:B0D6                      
       5.  03:B0D6                      clr_map:
       6.  03:B0D6  01 F8 07            	ld	bc,255*8		; do not remap stars
       7.  03:B0D9  21 00 C8            	ld	hl,miz_buffer
       8.  03:B0DC                      
       9.  03:B0DC  AF                  1:	xor a
      10.  03:B0DD                      
      11.  03:B0DD  ED 6F               	rld
      12.  03:B0DF  D9                  	exx
      13.  03:B0E0  2A F6 ED            	ld	hl,(clr_table)
      14.  03:B0E3  5F                  	ld	e,a
      15.  03:B0E4  16 00               	ld	d,0
      16.  03:B0E6  19                  	add hl,de
      17.  03:B0E7  7E                  	ld	a,(hl)
      18.  03:B0E8  D9                  	exx
      19.  03:B0E9  ED 6F               	rld
      20.  03:B0EB  D9                  	exx
      21.  03:B0EC  2A F6 ED            	ld	hl,(clr_table)
      22.  03:B0EF  5F                  	ld	e,a
      23.  03:B0F0  16 00               	ld	d,0
      24.  03:B0F2  19                  	add hl,de
      25.  03:B0F3  7E                  	ld	a,(hl)
      26.  03:B0F4  D9                  	exx
      27.  03:B0F5  ED 6F               	rld
      28.  03:B0F7                      
      29.  03:B0F7  23                  	inc hl
      30.  03:B0F8  0B                  	dec bc
      31.  03:B0F9  79                  	ld	a,c
      32.  03:B0FA  B0                  	or	b
      33.  03:B0FB  20 DF               	jr	nz,1b
      34.  03:B0FD  C9                  	ret
      35.  03:B0FE                      
      36.  03:B0FE                      clr_table0:
      37.  03:B0FE                      clr_table1:
      38.  03:B0FE                      clr_tableE:
      39.  03:B0FE                      clr_tableD:
      40.  03:B0FE                      	; BLUE
      41.  03:B0FE                      	include m1.asm
       1:  03:B0FE                         db 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 
       1:  03:B0FE  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
      42.  03:B10E                      clr_table2:
      43.  03:B10E                      clr_table9:
      44.  03:B10E                      clr_tableC:
      45.  03:B10E                      	; GREEN
      46.  03:B10E                      	include m2.asm
       1:  03:B10E                         db 0, 1, 2, 3, 12, 2, 6, 7, 8, 9, 10, 4, 11, 13, 14, 15 
       1:  03:B10E  00 01 02 03 0C 02 06 07 08 09 0A 04 0B 0D 0E 0F 
      47.  03:B11E                      clr_table3:
      48.  03:B11E                      clr_table6:
      49.  03:B11E                      clr_tableA:
      50.  03:B11E                      	; YELLOW
      51.  03:B11E                      	include m3.asm
       1:  03:B11E                         db 0, 1, 2, 3, 10, 15, 4, 5, 9, 8, 6, 4, 12, 13, 5, 14 
       1:  03:B11E  00 01 02 03 0A 0F 04 05 09 08 06 04 0C 0D 05 0E 
      52.  03:B12E                      clr_table4:
      53.  03:B12E                      clr_table7:
      54.  03:B12E                      clr_table8:
      55.  03:B12E                      	; MAGENTA
      56.  03:B12E                      	include m4.asm
       1:  03:B12E                         db 0, 1, 2, 3, 13, 14, 6, 7, 8, 9, 10, 15, 10, 9, 11, 15 
       1:  03:B12E  00 01 02 03 0D 0E 06 07 08 09 0A 0F 0A 09 0B 0F 
      57.  03:B13E                      clr_table5:
      58.  03:B13E                      clr_tableB:
      59.  03:B13E                      clr_tableF:
      60.  03:B13E                      	;	RED
      61.  03:B13E                      	include m5.asm
       1:  03:B13E                         db 0, 1, 2, 3, 6, 14, 7, 15, 8, 9, 10, 15, 3, 13, 14, 15 
       1:  03:B13E  00 01 02 03 06 0E 07 0F 08 09 0A 0F 03 0D 0E 0F 
      62.  03:B14E                      
      63.  03:B14E                      ; clr_enemy_bullts:
      64.  03:B14E                      	; db     1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
      65.  03:B14E                      	; db	11,11,11,15,11,11,15,11,11,11,15,11,11,11,11,11
      66.  03:B14E                      
      67.  03:B14E                      	
      68.  03:B14E                      clr_tab:
      69.  03:B14E                      	dw clr_table0,clr_table1,clr_table2,clr_table3
      69.  03:B14E  FE B0 FE B0 0E B1 1E B1 
      70.  03:B156                      	dw clr_table4,clr_table5,clr_table6,clr_table7
      70.  03:B156  2E B1 3E B1 1E B1 2E B1 
      71.  03:B15E                      	dw clr_table8,clr_table9,clr_tableA,clr_tableB
      71.  03:B15E  2E B1 0E B1 1E B1 3E B1 
      72.  03:B166                      	dw clr_tableC,clr_tableD,clr_tableE,clr_tableF
      72.  03:B166  0E B1 FE B0 FE B0 3E B1 
      73.  03:B16E                      	
     830   03:B16E                      
     831   03:B16E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     832   03:B16E                      victory_screen:
     833   03:B16E  21 00 D4            	ld	hl,level_buffer
     834   03:B171  11 01 D4            	ld	de,level_buffer+1
     835   03:B174  01 00 18            	ld	bc,256*3*8
     836   03:B177  36 00               	ld	(hl),0
     837   03:B179  ED B0               	ldir
     838   03:B17B                      
     839   03:B17B  21 E4 8D            	ld	hl,vsplash_shps
     840   03:B17E  11 40 D4             	ld	de,level_buffer+64
     841   03:B181  CD 0D 05            	call	mom_depack_rom
     842   03:B184                      	_setvdpwvram (0x0000)
     842   03:B184                    >  if (value & 0xFF)
     842   03:B184                    ~   ld a,value & 0xFF
     842   03:B184                    ~  else
     842   03:B184  AF                >   xor a
     842   03:B185                    >  endif
     842   03:B185  D3 99             >  out (0x99),a
     842   03:B187  3E 40             >  ld a,0x40 + (value/256)
     842   03:B189  D3 99             >  out (0x99),a
     843   03:B18B  21 00 D4            	ld	hl,level_buffer
     844   03:B18E                      [3]	call	write_256
     844   03:B18E  CD 0B 3F CD 0B 3F CD 0B 3F 
     845   03:B197                      
     846   03:B197  21 D9 91            	ld	hl,vsplash_clrs
     847   03:B19A  11 40 D4            	ld	de,level_buffer+64
     848   03:B19D  CD 0D 05            	call	mom_depack_rom
     849   03:B1A0                      	_setvdpwvram (0x2000)
     849   03:B1A0                    >  if (value & 0xFF)
     849   03:B1A0                    ~   ld a,value & 0xFF
     849   03:B1A0                    ~  else
     849   03:B1A0  AF                >   xor a
     849   03:B1A1                    >  endif
     849   03:B1A1  D3 99             >  out (0x99),a
     849   03:B1A3  3E 60             >  ld a,0x40 + (value/256)
     849   03:B1A5  D3 99             >  out (0x99),a
     850   03:B1A7  21 00 D4            	ld	hl,level_buffer
     851   03:B1AA                      [3]	call	write_256
     851   03:B1AA  CD 0B 3F CD 0B 3F CD 0B 3F 
     852   03:B1B3                      
     853   03:B1B3                      	_setvdpwvram 0x1800
     853   03:B1B3                    >  if (value & 0xFF)
     853   03:B1B3                    ~   ld a,value & 0xFF
     853   03:B1B3                    ~  else
     853   03:B1B3  AF                >   xor a
     853   03:B1B4                    >  endif
     853   03:B1B4  D3 99             >  out (0x99),a
     853   03:B1B6  3E 58             >  ld a,0x40 + (value/256)
     853   03:B1B8  D3 99             >  out (0x99),a
     854   03:B1BA  AF                  	xor	a
     855   03:B1BB  06 02               	ld	b,2
     856   03:B1BD  D3 98               1:	out	(0x98),a
     857   03:B1BF  3C                  	inc	a
     858   03:B1C0  20 FB               	jr	nz,1b
     859   03:B1C2  10 F9               	djnz	1b
     860   03:B1C4  C9                  	ret
     861   03:B1C5                      
     862   03:B1C5                      show_manta:
     863   03:B1C5  F3                  	di
     864   03:B1C6  CD FC 3E            	call	disscr
     865   03:B1C9                       
     866   03:B1C9  21 0F 80            	ld	hl,splash_shps
     867   03:B1CC  11 00 D4             	ld	de,level_buffer
     868   03:B1CF  CD 0D 05            	call	mom_depack_rom
     869   03:B1D2                      	_setvdpwvram 0x0000
     869   03:B1D2                    >  if (value & 0xFF)
     869   03:B1D2                    ~   ld a,value & 0xFF
     869   03:B1D2                    ~  else
     869   03:B1D2  AF                >   xor a
     869   03:B1D3                    >  endif
     869   03:B1D3  D3 99             >  out (0x99),a
     869   03:B1D5  3E 40             >  ld a,0x40 + (value/256)
     869   03:B1D7  D3 99             >  out (0x99),a
     870   03:B1D9  21 00 D4            	ld	hl,level_buffer
     871   03:B1DC                      [3]	call	write_256
     871   03:B1DC  CD 0B 3F CD 0B 3F CD 0B 3F 
     872   03:B1E5                      
     873   03:B1E5  21 DC 87            	ld	hl,splash_clrs
     874   03:B1E8  11 00 D4            	ld	de,level_buffer
     875   03:B1EB  CD 0D 05            	call	mom_depack_rom
     876   03:B1EE                      	_setvdpwvram 0x2000
     876   03:B1EE                    >  if (value & 0xFF)
     876   03:B1EE                    ~   ld a,value & 0xFF
     876   03:B1EE                    ~  else
     876   03:B1EE  AF                >   xor a
     876   03:B1EF                    >  endif
     876   03:B1EF  D3 99             >  out (0x99),a
     876   03:B1F1  3E 60             >  ld a,0x40 + (value/256)
     876   03:B1F3  D3 99             >  out (0x99),a
     877   03:B1F5  21 00 D4            	ld	hl,level_buffer
     878   03:B1F8                      [3]	call	write_256
     878   03:B1F8  CD 0B 3F CD 0B 3F CD 0B 3F 
     879   03:B201                      
     880   03:B201                      	_setvdpwvram 0x1800
     880   03:B201                    >  if (value & 0xFF)
     880   03:B201                    ~   ld a,value & 0xFF
     880   03:B201                    ~  else
     880   03:B201  AF                >   xor a
     880   03:B202                    >  endif
     880   03:B202  D3 99             >  out (0x99),a
     880   03:B204  3E 58             >  ld a,0x40 + (value/256)
     880   03:B206  D3 99             >  out (0x99),a
     881   03:B208  AF                  	xor	a
     882   03:B209  06 03               	ld	b,3
     883   03:B20B  D3 98               1:	out	(0x98),a
     884   03:B20D  3C                  	inc	a
     885   03:B20E  20 FB               	jr	nz,1b
     886   03:B210  10 F9               	djnz	1b
     887   03:B212  CD F5 3E            	call	enascr
     888   03:B215  FB                  	ei	
     889   03:B216                      	
     890   03:B216                      	
     891   03:B216                      	; ld	bc,5*60+256
     892   03:B216                      ; 1:	halt
     893   03:B216                      	; push	bc
     894   03:B216                      	; call	joy_read
     895   03:B216                      	; bit	4,a
     896   03:B216                      	; pop	bc
     897   03:B216                      	; ret	nz
     898   03:B216                      	; dec	c
     899   03:B216                      	; jr	nz,1b
     900   03:B216                      	; djnz	1b
     901   03:B216  C9                  	ret
     902   03:B217                      
     903   03:B217                      music_miz_buffer:
     904   03:B217  FF (3429)           	ds	3429,255
     905   03:BF7C                      endpage3: 
     906   03:BF7C  00                  	db	0
     907   03:BF7D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     908   03:BF7D                      
     909   03:BF7D                      	
     910   03:BF7D  (03:FE00)           MSX_O_Mizer_buf:	equ	0xFe00	; ds	328+26 aligned at 0x100
     911   03:BF7D  (03:FD09)           ram_sat:			equ	0xfd09	; ds	128
     912   03:BF7D  (03:F87F)           ram_tileset:		equ	0xf87f	; ds	128*8 
     913   03:BF7D  (03:FFC5)           slotvar:			equ	0xFFC5
     914   03:BF7D  (03:FFC6)           slotram:			equ 0xFFC6
     915   03:BF7D  (03:FFC7)           SCC:				equ	0xFFC7
     916   03:BF7D  (03:FFC8)           curslot:			equ	0xFFC8
     917   03:BF7D  (03:FFC9)           music_flag:			equ	0xFFC9
     918   03:BF7D                      
     919   03:BF7D  (C000)              	map 0xC000
     920   03:BF7D  (03:C000)           meta_pnt_table_u:	#	1024
     921   03:BF7D  (03:C400)           meta_pnt_table_d:	#	1024
     922   03:BF7D  (03:C800)           miz_buffer:			#	3*1024
     923   03:BF7D                      
     924   03:BF7D  (03:D400)           level_buffer:		#	LvlWidth*16+32
     925   03:BF7D                      
     926   03:BF7D  (03:EC20)           toshiba_switch		#	1		; Toshiba
     927   03:BF7D  (03:EC21)           game_speed:			#	1		; game speed 1,2,3,4
     928   03:BF7D  (03:EC22)           victory:			#	1		
     929   03:BF7D  (03:EC23)           visible_sprts:		#	1
     930   03:BF7D  (03:EC24)           ingame:				#	1
     931   03:BF7D  (03:EC25)           aniframe:			#	1
     932   03:BF7D  (03:EC26)           old_aniframe:		#	1
     933   03:BF7D                      
     934   03:BF7D  (03:EC27)           ms_state:			#	1
     935   03:BF7D  (03:EC28)           anispeed:			#	1
     936   03:BF7D                      
     937   03:BF7D  (03:EC29)           enable_cheat		#	1
     938   03:BF7D                      
     939   03:BF7D  (03:EC2A)           PT3_SETUP:			#	1	;set bit0 to 1, if you want to play without looping
     940   03:BF7D                      					        ;bit7 is set each time, when loop point is passed
     941   03:BF7D  (03:EC2B)           PT3_MODADDR:		#	2
     942   03:BF7D  (03:EC2D)           PT3_CrPsPtr:		#	2  ; Patter# = CrPsPtr-song_buffer-101;
     943   03:BF7D  (03:EC2F)           PT3_SAMPTRS:		#	2
     944   03:BF7D  (03:EC31)           PT3_OrnPtrs:		#	2
     945   03:BF7D  (03:EC33)           PT3_PDSP:			#	2
     946   03:BF7D  (03:EC35)           PT3_CSP:			#	2
     947   03:BF7D  (03:EC37)           PT3_PSP:			#	2
     948   03:BF7D  (03:EC39)           PT3_PrNote:			#	1
     949   03:BF7D  (03:EC3A)           PT3_PrSlide:		#	2
     950   03:BF7D  (03:EC3C)           PT3_AdInPtA:		#	2
     951   03:BF7D  (03:EC3E)           PT3_AdInPtB:		#	2
     952   03:BF7D  (03:EC40)           PT3_AdInPtC:		#	2
     953   03:BF7D  (03:EC42)           PT3_LPosPtr:		#	2
     954   03:BF7D  (03:EC44)           PT3_PatsPtr:		#	2
     955   03:BF7D  (03:EC46)           PT3_Delay:			#	1
     956   03:BF7D  (03:EC47)           PT3_AddToEn:		#	1
     957   03:BF7D  (03:EC48)           PT3_Env_Del:		#	1
     958   03:BF7D  (03:EC49)           PT3_ESldAdd:		#	2
     959   03:BF7D                      
     960   03:BF7D  (03:EC4B)           VARS: 				#	0
     961   03:BF7D  (03:EC4B)           ChanA:				#	30			;CHNPRM_Size
     962   03:BF7D  (03:EC69)           ChanB:				#	30			;CHNPRM_Size
     963   03:BF7D  (03:EC87)           ChanC:				#	30			;CHNPRM_Size
     964   03:BF7D                      
     965   03:BF7D                      ;GlobalVars
     966   03:BF7D  (03:ECA5)           DelyCnt:			#	1
     967   03:BF7D  (03:ECA6)           CurESld:			#	2
     968   03:BF7D  (03:ECA8)           CurEDel:			#	1
     969   03:BF7D                      
     970   03:BF7D                      Ns_Base_AddToNs:	
     971   03:BF7D  (03:ECA9)           Ns_Base:			#	1
     972   03:BF7D  (03:ECAA)           AddToNs:			#	1
     973   03:BF7D                      
     974   03:BF7D  (03:ECAB)           AYREGS:     		#	0
     975   03:BF7D  (03:ECAB)           VT_:				#	14
     976   03:BF7D  (03:ECB9)           EnvBase:			#	2
     977   03:BF7D  (03:ECBB)           VAR0END:			#	240
     978   03:BF7D                      
     979   03:BF7D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     980   03:BF7D                      ; Helper variables from PT3 mobule
     981   03:BF7D                      ; scc patch
     982   03:BF7D                      
     983   03:BF7D  (03:EDAB)           _psg_vol_fix:		#	1
     984   03:BF7D  (03:EDAC)           _sfx_vol_fix:		#	1
     985   03:BF7D  (03:EDAD)           _scc_vol_fix:		#	1
     986   03:BF7D                      
     987   03:BF7D  (03:EDAE)           fade_psg_vol_fix:	#	1
     988   03:BF7D  (03:EDAF)           fade_scc_vol_fix:	#	1
     989   03:BF7D                      
     990   03:BF7D  (03:EDB0)           _psg_vol_balance:	#	2
     991   03:BF7D  (03:EDB2)           _scc_vol_balance:	#	2
     992   03:BF7D                      
     993   03:BF7D  (03:EDB4)           AYREGS_CPY:			#	13
     994   03:BF7D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     995   03:BF7D  (03:EDC1)           wchA:				#	1	; wave on channel A
     996   03:BF7D  (03:EDC2)           wchB:				#	1	; wave on channel B
     997   03:BF7D  (03:EDC3)           wchC:				#	1	; wave on channel C
     998   03:BF7D                      ; pt3 samples previously detected (times 2)
     999   03:BF7D  (03:EDC4)           OSmplA          	#	1
    1000   03:BF7D  (03:EDC5)           OSmplB          	#	1
    1001   03:BF7D  (03:EDC6)           OSmplC          	#	1
    1002   03:BF7D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    1003   03:BF7D  (03:EDC7)           _waves				#	16
    1004   03:BF7D                      
    1005   03:BF7D  (03:EDD7)           reverse_sat:		#	1
    1006   03:BF7D                      
    1007   03:BF7D                      
    1008   03:BF7D                      		; --- THIS FILE MUST BE COMPILED IN RAM ---
    1009   03:BF7D                      
    1010   03:BF7D                      		; --- PT3 WORKAREA [self-modifying code patched] ---
    1011   03:BF7D                      
    1012   03:BF7D                          ; global _ayFX_PRIORITY
    1013   03:BF7D  (03:EDD8)           ayFX_PRIORITY:		#	1			; Current ayFX stream priority
    1014   03:BF7D                      
    1015   03:BF7D                      		; --- THIS FILE MUST BE COMPILED IN RAM ---
    1016   03:BF7D                      
    1017   03:BF7D  (03:EDD9)           ayFX_PLAYING:	#	1			; There's an ayFX stream to be played?
    1018   03:BF7D  (03:EDDA)           ayFX_CURRENT:	#	1			; Current ayFX stream playing
    1019   03:BF7D  (03:EDDB)           ayFX_POINTER:	#	2			; Pointer to the current ayFX stream
    1020   03:BF7D  (03:EDDD)           ayFX_TONE:	    #	2			; Current tone of the ayFX stream
    1021   03:BF7D  (03:EDDF)           ayFX_NOISE: 	#	1			; Current noise of the ayFX stream
    1022   03:BF7D  (03:EDE0)           ayFX_VOLUME:	#	1			; Current volume of the ayFX stream
    1023   03:BF7D  (03:EDE1)           ayFX_CHANNEL:	#	1			; PSG channel to play the ayFX stream
    1024   03:BF7D  (03:EDE2)           ayFX_VT:		#	2			; ayFX relative volume table pointer
    1025   03:BF7D                      
    1026   03:BF7D                      
    1027   03:BF7D                      
    1028   03:BF7D                      				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    1029   03:BF7D                      
    1030   03:BF7D  (03:EDE4)           vsf:         		#	1          ; 0 if 50Hz, !0 if 60Hz
    1031   03:BF7D  (03:EDE5)           cnt:         		#	1          ; counter to compensate NTSC machines
    1032   03:BF7D  (03:EDE6)           ayend:				#	0
    1033   03:BF7D  (03:EDE6)           randSeed:			#	2
    1034   03:BF7D                      
    1035   03:BF7D  (03:EDE8)           assault_wave_timer:	# 	2
    1036   03:BF7D  (03:EDEA)           wave_count:			#	1
    1037   03:BF7D  (03:EDEB)           landing_permission:	#	1
    1038   03:BF7D  (03:EDEC)           bullet_rate:		#	1
    1039   03:BF7D  (03:EDED)           dxmap:				#	1
    1040   03:BF7D  (03:EDEE)           xmap:				#	2
    1041   03:BF7D  (03:EDF0)           yship:				#	1
    1042   03:BF7D  (03:EDF1)           xship:				#	2
    1043   03:BF7D  (03:EDF3)           cur_level:			#	1
    1044   03:BF7D  (03:EDF4)           next_level:			#	1
    1045   03:BF7D  (03:EDF5)           sprite_3c:			#	1
    1046   03:BF7D  (03:EDF6)           clr_table			#	2
    1047   03:BF7D  (03:EDF8)           joystick:			#	1
    1048   03:BF7D  (03:EDF9)           old_joystick:		#	1
    1049   03:BF7D  (03:EDFA)           chang_joystick:		#	1
    1050   03:BF7D  (03:EDFB)           menu_item:			#	1
    1051   03:BF7D  (03:EDFC)           already_dead:		#	1	; set after you die, reset at level start 
    1052   03:BF7D                      
    1053   03:BF7D  (03:EDFD)           god_mode			#	1
    1054   03:BF7D  (03:EDFE)           halt_game:			#	1
    1055   03:BF7D  (03:EDFF)           menu_level:			#	0
    1056   03:BF7D  (03:EDFF)           halt_gamef1:		#	1
    1057   03:BF7D  (03:EE00)           lives:				#	3
    1058   03:BF7D  (03:EE03)           dummy_:				#	4
    1059   03:BF7D  (03:EE07)           score:				#	7
    1060   03:BF7D  (03:EE0E)           score_bin:			#	4
    1061   03:BF7D  (03:EE12)           lives_bin:			#	1	; BCD !!!
    1062   03:BF7D                      
    1063   03:BF7D  (03:EE13)           toggle_scc			#	1
    1064   03:BF7D  (03:EE14)           save_SCC			#	1
    1065   03:BF7D                      	
    1066   03:BF7D                      	struct enemy_data
    1067   03:BF7D                    < y				db	0
    1068   03:BF7D                    < x				dw	0
    1069   03:BF7D                    < xoff			db	0
    1070   03:BF7D                    < yoff			db	0
    1071   03:BF7D                    < xsize			db	0
    1072   03:BF7D                    < ysize			db	0
    1073   03:BF7D                    < status			db	0	; B7 == DWN/UP | B6 == RIGHT/LEFT | B0 == Inactive/Active
    1074   03:BF7D                    < cntr			db	0
    1075   03:BF7D                    < kind			db	0
    1076   03:BF7D                    < frame			db	0
    1077   03:BF7D                    < color			db	0
    1078   03:BF7D                    < speed			dw	0
    1079   03:BF7D                    < 	ends
    1080   03:BF7D                      	
    1081   03:BF7D                      ; [max_enem]			enemy_data
    1082   03:BF7D                      ; [max_bullets]		enemy_data
    1083   03:BF7D                      ; [max_enem_bullets]	enemy_data
    1084   03:BF7D                      
    1085   03:BF7D  (03:EE15)           enemies:		#	enemy_data*max_enem
    1086   03:BF7D  (03:EE85)           ms_bullets:		#	enemy_data*max_bullets
    1087   03:BF7D  (03:EEA1)           enem_bullets:	#	enemy_data*max_enem_bullets
    1088   03:BF7D                      
    1089   03:BF7D                      	
    1090   03:BF7D  (0000)              	endmap
    1091   03:BF7D                      	

    LABELS
-------------------------------------------------
00:0000F3DF   _vdpReg
00:0000F3AE X LINL40
00:0000FC9E   JIFFY
00:00000024   enaslt
00:0000FCC1   exptbl
00:0000FCC5   slttbl
00:00003F30   checkkbd
00:00003F0B   write_256
00:00003EF5   enascr
00:00003EFC   disscr
00:00003F3B   setwrtvram
00:00000000   write_2k
00:00000025   disp_page1
00:00003F1F   disp_page0
00:00000038 X isr
00:00000076   isr.other_page
00:00000079   isr.this_page
00:00000086   isr.compatibilty
00:000000CC X isr.NTSC
00:000000D8   isr.PAL
00:000000E4   isr.skip_audio
00:000000F2   Music_only
00:0000010A X Music_only.NTSC
00:00000116   Music_only.PAL
00:00000122   Music_only.skip_audio
00:00000125   _plot_strs
00:00000228   x_stars
00:00000238   _plot_pnt_toshiba
00:00000242   _plot_pnt
00:00000267   half_screen
00:00000275 X half_screen.slow_loop
00:00000320   half_screen.fast_loop
00:000003CB   _sat_update
00:000003D6 X _directsat
00:000003F9   _reverse_sat
00:00000424   _plot_spt
00:0000FE00   mom_map_bits_rom
00:0000FF48   mom_offset_table
00:0000050D   mom_depack_rom
00:00000523   mom_init_bits_rom
00:0000052C   mom_node_rom
00:0000053F   mom_set_bit_rom
00:0000054C   mom_wait_step_rom
00:00000554   mom_lit_copy_rom
00:00000556   mom_main_loop_rom
00:0000055D   mom_get_index_rom
00:00000578   mom_out_range_rom
00:0000057B   mom_go_for_it_rom
00:00000592   mom_get_pair_rom
00:000005A4   mom_get_bits_rom
00:000005A7   mom_getting_bits_rom
00:000005B3   mom_get_bit_rom
00:000005BB   mom_byte_done_rom
00:000005BE   AFXPLAY
00:00004923 X AFXSTOP
00:00004975 X AFXFRAME
00:000056D7 X ROUT
00:000005C3   sfxBank_miz
00:00000DFC   ms_ani
00:00000DFC X ms_demo_ani
00:00000E4C   ms_spt
00:00000180   LvlWidth
00:00000010 X nlev
00:00000004 X nphase
00:00000002 X xstep
00:00000015   nblock
00:000000E2   n_common_tiles1
00:000000EB   n_common_tiles2
00:00000004   n_d2x1
00:0000000C   n_d3x2
00:00000010   maxspeed
00:00000008   max_enem
00:00000003   max_enem_bullets
00:00000002   max_bullets
00:000000B4   assault_wave_timer_preset
00:00000002   enemy_bullet_speed
00:00000078   xship_rel
00:0000234C   text
00:0000242E   prstr
00:0000243E   cls
00:0000244E   print_page
00:000024A4   set4
00:000024B5   plot_title_screen
00:00002517   ayFX_test
00:00002564   _ayFX_INIT
00:0000256A   intro_music
00:00002582   ending_music
00:0000259A   mus_mute
00:0000261E   mus_intro
00:00002900   mus_end
00:00002B1F   mus_red
00:00002DD8   mus_green
00:00002FFC   mus_blue
00:00003583   wavemap_init
00:00000003   n_musics
00:0000358C   music_tables
00:00003596   joy_read
00:00000000   menu_entry.vramxy
00:00000002   menu_entry.txt_pntr
00:00000004   menu_entry.code
00:00000006   menu_entry
00:000035B2 X mnu0
00:000035B2   mnu0.opt0
00:000035BB   mnu0.opt1
00:000035C6   mnu0.opt2
00:000035D3   mnu0_data
00:000035EB X mnu1
00:000035EB   mnu1.opt0
00:000035F9   mnu1.opt1
00:00003605   mnu1.opt2
00:00003619   mnu1.opt3
00:00003626   mnu1.opt4
00:00003633   mnu1.opt5
00:00003640   mnu1.opt6
00:0000364D   mnu1.opt7
00:00003657   mnu1.optA
00:00003662   mnu1.opt8
00:0000366E   mnu1.opt9
00:00003677   mnu1_data
00:000036BF   select_menu
00:000036C6   print_menu
00:00003700   return
00:00003705   menu1
00:00003714   menu0
00:00003737   _menu
00:00003771   increase_menu_item
00:0000378F   decrease_menu_item
00:000037A9   print_cursor
00:000037D1   space
00:000037D5   cursr
00:000037D9   set_difficulty
00:000037FA   diff_txt
00:00003800   easy
00:00003811   normal
00:00003822   hard
00:00003833   decrease_diff
00:00003841   increase_diff
00:0000384D   show_difficulty
00:00003854   plot_option
00:0000386D   set_compatibility
00:00003886   comp_txt
00:0000388A   comp_txt.tms
00:00003898   comp_txt.toshiba
00:000038A6   _set_compatibility
00:000038AE   show_compatibility
00:000038B7   set_scc
00:000038E4   scc_txt
00:000038E8   scc_txt.scc_off
00:000038F5   scc_txt.scc_on
00:00003902   _set_scc
00:00003912   show_scc
00:0000391B   set_scc_off
00:00003933   set_scc_on
00:0000393A   game_start
00:0000393C   instructions
00:00003940   set_god_mode
00:00003962   god_txt
00:00003966   god_txt.op1
00:00003974   god_txt.op2
00:00003982   _set_god_mode
00:0000398A   show_god_mode
00:00003993   set_enemies
00:000039AC   sprite_3c_txt
00:000039B0   sprite_3c_txt.op1
00:000039C5   sprite_3c_txt.op2
00:000039DA   _set_3clr
00:000039E2   show_3clr
00:000039EB   set_scc_volume
00:00003A0C   set_scc_volume.decrease_volume
00:00003A18   set_scc_volume.increase_volume
00:00003A26   set_scc_volume.show_volume
00:00003A34   set_scc_volume.volume
00:00003A54   set_scc_volume.opt0
00:00003A63   set_scc_volume.opt1
00:00003A72   set_scc_volume.opt2
00:00003A81   set_scc_volume.opt3
00:00003A90   set_scc_volume.opt4
00:00003A9F   set_scc_volume.opt5
00:00003AAE   set_scc_volume.opt6
00:00003ABD   set_scc_volume.opt7
00:00003ACC   set_scc_volume.opt8
00:00003ADB   set_scc_volume.opt9
00:00003AEA   set_scc_volume.optA
00:00003AF9   set_scc_volume.optB
00:00003B08   set_scc_volume.optC
00:00003B17   set_scc_volume.optD
00:00003B26   set_scc_volume.optE
00:00003B35   set_scc_volume.optF
00:00003B44   set_psg_volume
00:00003B65   set_psg_volume.decrease_volume
00:00003B71   set_psg_volume.increase_volume
00:00003B7F   set_psg_volume.show_volume
00:00003B8D   set_psg_volume.volume
00:00003BAD   set_psg_volume.opt0
00:00003BBC   set_psg_volume.opt1
00:00003BCB   set_psg_volume.opt2
00:00003BDA   set_psg_volume.opt3
00:00003BE9   set_psg_volume.opt4
00:00003BF8   set_psg_volume.opt5
00:00003C07   set_psg_volume.opt6
00:00003C16   set_psg_volume.opt7
00:00003C25   set_psg_volume.opt8
00:00003C34   set_psg_volume.opt9
00:00003C43   set_psg_volume.optA
00:00003C52   set_psg_volume.optB
00:00003C61   set_psg_volume.optC
00:00003C70   set_psg_volume.optD
00:00003C7F   set_psg_volume.optE
00:00003C8E   set_psg_volume.optF
00:00003C9D   set_sfx_volume
00:00003CBE   set_sfx_volume.decrease_volume
00:00003CCA   set_sfx_volume.increase_volume
00:00003CD8   set_sfx_volume.show_volume
00:00003CE3   set_sfx_volume.volume
00:00003D03   set_sfx_volume.opt0
00:00003D12   set_sfx_volume.opt1
00:00003D21   set_sfx_volume.opt2
00:00003D30   set_sfx_volume.opt3
00:00003D3F   set_sfx_volume.opt4
00:00003D4E   set_sfx_volume.opt5
00:00003D5D   set_sfx_volume.opt6
00:00003D6C   set_sfx_volume.opt7
00:00003D7B   set_sfx_volume.opt8
00:00003D8A   set_sfx_volume.opt9
00:00003D99   set_sfx_volume.optA
00:00003DA8   set_sfx_volume.optB
00:00003DB7   set_sfx_volume.optC
00:00003DC6   set_sfx_volume.optD
00:00003DD5   set_sfx_volume.optE
00:00003DE4   set_sfx_volume.optF
00:00003DF3   set_music
00:00003E11   set_music.decrease
00:00003E1E   set_music.increase
00:00003E2C   set_music.show_music
00:00003E35   set_music.music_names
00:00003E3F   set_music.opt0
00:00003E4D   set_music.opt1
00:00003E5B   set_music.opt2
00:00003E69   set_music.opt3
00:00003E77   set_music.opt4
00:00003E85   set_music.start_mus
00:00003E8F   start_song
00:00003EB4   set_sfx
00:00003ECA   set_sfx.sfx_help
00:00003ECE   set_sfx.op1
00:00003EDC   set_sfx.op2
00:00003EEA   set_sfx.end_sxftest
00:00003EEE   set_sfx.show_sfx_help
01:00004000 X rom_header
01:00004017   add16_de
01:0000401F   sprite_init
01:00000024 X ENASLT
01:00000138   RSLREG
01:0000FCC1   EXPTBL
01:000040EF   search_slot
01:0000410E   search_slotram
01:0000412F   search_slotram0
01:00004134   setrompage0
01:0000413A   setrompage2
01:00004140   setrampage2
01:00004146   setrompage3
01:0000414C X setrampage3
01:00004152 X recbios
01:00004155   setslotpage0
01:0000418C X setslotpage1
01:000041CB   setslotpage2
01:00004212   setslotpage3
01:00000000   CHNPRM_PsInOr
01:00000001   CHNPRM_PsInSm
01:00000002   CHNPRM_CrAmSl
01:00000003   CHNPRM_CrNsSl
01:00000004   CHNPRM_CrEnSl
01:00000005   CHNPRM_TSlCnt
01:00000006   CHNPRM_CrTnSl
01:00000008   CHNPRM_TnAcc
01:0000000A   CHNPRM_COnOff
01:0000000B   CHNPRM_OnOffD
01:0000000C   CHNPRM_OffOnD
01:0000000D   CHNPRM_OrnPtr
01:0000000F   CHNPRM_SamPtr
01:00000011   CHNPRM_NNtSkp
01:00000012   CHNPRM_Note
01:00000013   CHNPRM_SlToNt
01:00000014   CHNPRM_Env_En
01:00000015   CHNPRM_Flags
01:00000016   CHNPRM_TnSlDl
01:00000017   CHNPRM_TSlStp
01:00000019   CHNPRM_TnDelt
01:0000001B   CHNPRM_NtSkCn
01:0000001C   CHNPRM_Volume
01:0000001D   nsample
01:0000001E X CHNPRM_Size
01:00000000   AR_TonA
01:00000002   AR_TonB
01:00000004   AR_TonC
01:00000006   AR_Noise
01:00000007   AR_Mixer
01:00000008   AR_AmplA
01:00000009   AR_AmplB
01:0000000A   AR_AmplC
01:0000000B   AR_Env
01:0000000D   AR_EnvTp
01:00004251   CHECKLP
01:00004262   PT3_MUTE
01:00004294   PT3_INIT
01:000042A6   mute_entry
01:000042EA   _INITV1
01:000042F2   _INITV2
01:00004306   _INITV3
01:0000433F   PD_OrSm
01:00004349   PD_SAM
01:0000434A   PD_SAM_
01:00004363   PD_VOL
01:0000436C   PD_EOff
01:00004374   PD_SorE
01:0000437E   PD_ENV
01:00004383   PD_ORN
01:00004388   PD_ESAM
01:00004395   PTDECOD
01:000043A4   PD_LOOP
01:000043A7   PD_LP2
01:000043D4   PD_NOIS
01:000043D9   PD_REL
01:000043DF   PD_NOTE
01:000043E7   PD_RES
01:000043F9   PD_FIN
01:00004400   C_PORTM
01:0000444B   _NOSIG
01:00004455   SET_STP
01:00004461   C_GLISS
01:00004474   C_SMPOS
01:0000447A   C_ORPOS
01:00004480   C_VIBRT
01:00004498   C_ENGLS
01:000044AA   C_DELAY
01:000044B0   SETENV
01:000044CB   C_NOP
01:000044CC   SETORN
01:000044E5   SPCCOMS
01:00004505   CHREGS
01:00004528   _CH_ORPS
01:00004533   _CH_NTP
01:00004539   _CH_NOK
01:00004554   _CH_SMPS
01:0000456A   _CH_NOAC
01:000045B1   _CH_STPP
01:000045C6   _CH_AMP
01:000045D8   _CH_AMIN
01:000045DD   _CH_SVAM
01:000045E0   _CH_NOAM
01:000045E9   _CH_APOS
01:000045EF   _CH_VOL
01:000045FA X _CH_ENV
01:00004601   _CH_NOEN
01:0000461B   _NO_ENAC
01:00004622   _NO_ENSL
01:00004630   _CH_MIX
01:00004634   _CH_EXIT
01:00004653   _CH_ONDL
01:00004657   PT3_PLAY
01:0000468B   _PLNLP
01:000046B2   _PL1A
01:000046BD   _PL1B
01:000046D2   _PL1C
01:000046E7   _PL1D
01:000046ED   _PL2
01:0000474F   EMPTYSAMORN
01:00004753   NT_
01:00000014   n_sfx
01:00004900   sfx_prio
01:0000C800   ayFX_STREAMS
01:00004915   ayFX_SETUP
01:00004923   ayFX_END
01:00004929   ayFX_INIT
01:00004969   _INIT_END
01:0000496D   _INIT_NOSOUND
01:00004975   ayFX_FRAME
01:00004975 X ayFX_PLAY
01:0000498C   _CHECK_NN
01:0000499B   _SETPOINTER
01:000049B9   _SETMASKS
01:000049CE   _SETCHAN
01:000049D0 X _CHK1
01:000049D2 X _PLAY_C
01:000049E2   _CHK2
01:000049E8 X _PLAY_B
01:000049F8   _CHK3
01:000049FC X _PLAY_A
01:00004A0C   _SETMIXER
01:00004A19   rand8_init
01:00004A22   rand8
01:00004A2F   land_now_test
01:00004A56   npc_init
01:00004A80   bull_init
01:00004ABD   wave_timer
01:00004C00   spritecolors
01:00004C08   wave0
01:00004C08   wave1
01:00004C29 X wave1.neg
01:00004C35   wave1.pos
01:00004C91   wave1.next
01:00004C98   wave2
01:00004CC3 X wave2.neg
01:00004CD1   wave2.pos
01:00004D27   wave2.next
01:00004D2E   wave3
01:00004D46 X wave3.neg
01:00004D51   wave3.pos
01:00004DAE   wave3.next
01:00004DB5   wave4
01:00004DE0 X wave4.neg
01:00004DEE   wave4.pos
01:00004E44   wave4.next
01:00004E4B   wave5
01:00004E61 X wave5.neg
01:00004E6B   wave5.pos
01:00004EBD   wave5.next
01:00004EC4   wave6
01:00004EEF X wave6.neg
01:00004EFE   wave6.pos
01:00004F5F   wave6.next
01:00004F66   wave7
01:00004F7C X wave7.neg
01:00004F86   wave7.pos
01:00004FD8   wave7.next
01:00004FDF   npc_loop
01:0000500F   next
01:00005018   npcdies
01:0000503F   enemy255
01:00005063   enemy0
01:00005063 X enemy1
01:00005069 X enemy1.go_left
01:0000508C   enemy1.go_right
01:000050BE   enemy2
01:000050BE X enemy3
01:000050D7 X enemy3.go_left
01:000050ED   enemy3.go_right
01:00005112   enemy4
01:0000512B X enemy4.go_left
01:00005141   enemy4.go_right
01:0000515E X enemy4.go_up
01:00005169   enemy4.go_dwn
01:00005200   rotation
01:00005208   rotate
01:00005300   sinewave
01:00005340   enemy5
01:00005359 X enemy5.go_left
01:0000536F   enemy5.go_right
01:000053A6   enemy6
01:000053BF X enemy6.go_left
01:000053DD   enemy6.go_right
01:00005405 X enemy6.go_up
01:00005410   enemy6.go_dwn
01:0000542D   enemy7
01:00005446 X enemy7.go_left
01:00005464   enemy7.go_right
01:0000548C X enemy7.go_up
01:00005497   enemy7.go_dwn
01:000054B4   book_enemy_shoot
01:000054FB   book_enemy_shoot.activate_this
01:00005501 X book_enemy_shoot.shootdx
01:00005510   book_enemy_shoot.shootsx
01:00005546   enemy_bullet_loop
01:00005000 X Bank1
01:00007000 X Bank2
01:00009000   Bank3
01:0000B000 X Bank4
01:00005630   _SCC_PSG_Volume_balance
01:0000565D   no_music
01:00005677   Audio_Internal_code
01:000056D7   PT3_ROUT
01:000056E4   _LOUT
01:000056F0   _WAVESSCC
01:00009880   SCC_REG
01:000058F0   SCCROUT
01:00005924   probewavechanges
01:00005945   changeA
01:00005952   changeB
01:0000595F   changeC
01:00005970 X sccchan
01:00005983   samp2wav
01:00005990   en_scc
01:000059AC   en_slot
01:000059B2   begin
01:000059D1   scctest
01:000059D5   testslot
01:000059EA   testreg
01:00005A01   nextslot
01:00005A11   nextprim
01:00005A23   noscc
01:00005A25   done
01:00005A2F   end
01:00005A2F   SCCINIT
01:00005A42   instruct
01:00005B7A   show_instructions
01:00005C3B   plot_spt_char_anim
01:00005CA0   _color_set
01:00005CCA   _destr_set
01:00005D2C   destruct_tiles
01:00005DA4 X runway_shape
01:00005DB4 X barrier_shape
01:00005DE4   destruct_colors
01:00005E5C X runway_col
01:00005E6C X barrier_col
01:00005E9C   runway_map
01:00005EA0   attract_mode
01:00005EC1 X attract_mode.restart
01:00005F1D   attract_mode.main_loop
01:00005F69   attract_mode.end_attractmode
01:00005F72   initmain
01:0000413A   enpage2
01:00004140   enpage3
01:00005FF7   title_screen
01:000060CD   restart
01:00006146   main_loop
01:0000617D   wait
01:000061B4   wait.endmap
01:000061BA   test_level
01:000061C4 X levels_0_8
01:000061C8   levels_8_16
01:00006213   test_pause
01:00006224   _no_gameover
01:00006249 X start_music
01:00006250   stop_music
01:00006300   sprite_collision_windows
01:0000630C X sprite_0
01:0000630C X sprite_1
01:0000630C X sprite_2
01:0000630C X sprite_3
01:00006310 X sprite_4
01:00006314 X sprite_5
01:00006318 X sprite_6
01:0000631C X sprite_7
01:00006320 X sprite_8
01:00006324 X sprite_9
01:00006328 X sprite_10
01:0000632C X sprite_11
01:00006330 X sprite_12
01:00006334 X sprite_13
01:00006338 X sprite_14
01:0000633C X sprite_15
01:00006340 X sprite_16
01:00006344 X sprite_17
01:00006348 X sprite_18
01:0000634C X sprite_19
01:00006350 X sprite_20
01:00006354 X sprite_21
01:00006358 X sprite_22
01:0000635C X sprite_23
01:00006360 X sprite_24
01:00006364 X sprite_25
01:00006368 X sprite_26
01:0000636C X sprite_27
01:00006370 X sprite_28
01:00006374 X sprite_29
01:00006378 X sprite_30
01:0000637C X sprite_31
01:00006380 X sprite_32
01:00006384 X sprite_33
01:00006388 X sprite_34
01:0000638C X sprite_35
01:00006390 X sprite_36
01:00006394 X sprite_37
01:00006398 X sprite_38
01:0000639C X sprite_39
01:000063A0 X sprite_40
01:000063A4 X sprite_41
01:000063A8 X sprite_42
01:000063AC X sprite_43
01:000063B0 X sprite_44
01:000063B4 X sprite_45
01:000063B8 X sprite_46
01:000063BC X sprite_47
01:000063C0 X sprite_48
01:000063C4 X sprite_49
01:000063C8 X sprite_50
01:000063CC X sprite_51
01:000063D0 X sprite_52
01:000063D4 X sprite_53
01:000063D8 X sprite_54
01:000063DC X sprite_55
01:000063E0 X sprite_56
01:000063E4 X sprite_57
01:000063E8 X sprite_58
01:000063EC X sprite_59
01:000063F0 X sprite_60
01:000063F4 X sprite_61
01:000063F8 X sprite_62
01:000063FC X sprite_63
01:00006400   set_size
01:00006420   set_size2
01:00006440   test_collision_enemy_bullets
01:00006480   test_collision_msbullets
01:00006499   test_collision
01:000064CF   CalcCollision
01:000064D9   CalcCollision.switch
01:000064DF   CollisionCheck_8b
01:000064E5   CollisionCheck_8b.other
00:00000000   obj_data.y
00:00000001   obj_data.x
00:00000003   obj_data.xoff
00:00000004   obj_data.yoff
00:00000005   obj_data.xsize
00:00000006   obj_data.ysize
00:00000007   obj_data
01:000064E9 X _check_obj_collision
01:000064EF X check_obj_collision_8_16
01:00006508 X swap_objects_y
01:00006536 X swap_objects_x
01:00006546   test_1up
01:0000655D   add_bc_score_bin
01:0000659B   add_c_lives_bin
01:000065A1   sub_c_lives_bin
01:000065C6   line1
01:000065CD X line2
01:000065D0   print_str
01:000065E3   print
01:0000660A   land_now
01:00006613   dummy
01:0000661C   warping
01:00006625   defeated
01:0000662E   GameOver
01:00006637   levelnames
01:000066BE   print_strf
01:000066D1   printf
01:000066EA   plot_tile
01:00006702   long2ascii
01:00006773   NUM1
01:00006787   ms_col_win
01:00006787 X ms_demo_coll_wind
01:00006827   ms_bllts_col_win
01:00006827 X ms_bllts_coll_wind
01:00000000   ms_fly__right
01:00000001   ms_spin_face_right
01:00000002   ms_side_dwn_face_right
01:00000003   ms_side_up__face_right
01:00000004   ms_fly__left
01:00000005   ms_spin_face_left
01:00000006   ms_side_dwn_face_left
01:00000007   ms_side_up__face_left
01:00000008   ms_loop_right2left
01:00000009   ms_loop_left2right
01:0000000A   ms_explode
01:0000000B   ms_landing
01:0000000C   ms_reset
01:00006847   ms_ctrl
01:0000684F   ms_ctrl.intro
01:00006899   ms_ctrl.ms_landing
01:00006899   ms_ctrl.ms_reset
01:0000689A   ms_ctrl.ms_directions
01:000068E0   ms_ctrl.rd_joy
01:000068EE X ms_ctrl.rd_key
01:00006938   ms_ctrl.z_or_space
01:0000693E   ms_ctrl.x_and_up
01:00006944   ms_ctrl.up
01:0000694A   ms_ctrl.x_and_dwn
01:00006950   ms_ctrl.dwn
01:00006956   ms_ctrl.left
01:0000695C   ms_ctrl.right
01:00006962   ms_ctrl.ms_fly__right
01:000069B1   ms_ctrl.ms_loop_right2left
01:000069CB   ms_ctrl.ms_spin_face_left
01:000069E1   ms_ctrl.ms_fly__left
01:00006A33   ms_ctrl.ms_loop_left2right
01:00006A4D   ms_ctrl.ms_spin_face_right
01:00006A63   ms_ctrl.ms_side_dwn_face_right
01:00006A9A   ms_ctrl.ms_side_up__face_right
01:00006AD1   ms_ctrl.ms_side_dwn_face_left
01:00006B09   ms_ctrl.ms_side_up__face_left
01:00006B41   ms_ctrl.ms_explode
01:00006B8A   test_obstacles
01:00006BED   test_obstacles.tst
01:00006BF4   test_obstacles.found
01:00006C0E   test_obstacles.meta_tile_peek
01:00006D00   _tst_table
01:00000005   max_bullet_rate
01:00006D20   ms_shoot
01:00006D2C   ms_shoot.book_bullet
01:00006D45   ms_shoot.activate_this
01:00006D50 X ms_shoot.shootdx
01:00006D5A   ms_shoot.shootsx
01:00006D96   bullet_loop
01:00006DEF   bullet_loop.test_obstacles
01:00006E2F   bullet_loop.tst_block
01:00006E39 X bullet_loop.blocking
01:00006E44   bullet_loop.no_blocking
01:00006E4D X bullet_loop.right2x1
01:00006E54   bullet_loop.left2x1
01:00006E70   bullet_loop.no_2x1
01:00006E91   bullet_loop.left_dw3x2
01:00006E97   bullet_loop.right_up3x2
01:00006E9B   bullet_loop.right_dw3x2
01:00006E9F   bullet_loop.left_up3x2
01:00006ED4   put_ms_sprt
01:00006F0D   put_ms_sprt.expl
01:00006F3B   put_ms_sprt.landing
01:00006F88   test_spt
01:000073FA   test_spt_3c
01:00007835   scorebar_sat
01:000000F0 S counter
01:000078AA   just_level_init
01:000078EF   intro_anim
01:0000796F   fake_main
01:000079AC   test_lev1
01:000079EA   warp_tile
01:00007A06   exit_sequence
01:00007AA2   plot_enemy
01:00007AAE   npc_loop1
01:00007ADA   npc_loop1.cont
01:00007AE2 X npc_loop1.one_layer
01:00007AFF   npc_loop1.next
01:00007B0D   npc_loop1.two_layers
01:00007B40   npc_loop1.ecset
01:00007B48   runways
01:00007B48 X lev0
01:00007B48 X lev0.y
01:00007B49 X lev0.x
01:00007B4B X lev0.xoff
01:00007B4C X lev0.yoff
01:00007B4D X lev0.xsize
01:00007B4E X lev0.ysize
01:00007B4F X lev1
01:00007B4F X lev1.y
01:00007B50 X lev1.x
01:00007B52 X lev1.xoff
01:00007B53 X lev1.yoff
01:00007B54 X lev1.xsize
01:00007B55 X lev1.ysize
01:00007B56 X lev2
01:00007B56 X lev2.y
01:00007B57 X lev2.x
01:00007B59 X lev2.xoff
01:00007B5A X lev2.yoff
01:00007B5B X lev2.xsize
01:00007B5C X lev2.ysize
01:00007B5D X lev3
01:00007B5D X lev3.y
01:00007B5E X lev3.x
01:00007B60 X lev3.xoff
01:00007B61 X lev3.yoff
01:00007B62 X lev3.xsize
01:00007B63 X lev3.ysize
01:00007B64 X lev4
01:00007B64 X lev4.y
01:00007B65 X lev4.x
01:00007B67 X lev4.xoff
01:00007B68 X lev4.yoff
01:00007B69 X lev4.xsize
01:00007B6A X lev4.ysize
01:00007B6B X lev5
01:00007B6B X lev5.y
01:00007B6C X lev5.x
01:00007B6E X lev5.xoff
01:00007B6F X lev5.yoff
01:00007B70 X lev5.xsize
01:00007B71 X lev5.ysize
01:00007B72 X lev6
01:00007B72 X lev6.y
01:00007B73 X lev6.x
01:00007B75 X lev6.xoff
01:00007B76 X lev6.yoff
01:00007B77 X lev6.xsize
01:00007B78 X lev6.ysize
01:00007B79 X lev7
01:00007B79 X lev7.y
01:00007B7A X lev7.x
01:00007B7C X lev7.xoff
01:00007B7D X lev7.yoff
01:00007B7E X lev7.xsize
01:00007B7F X lev7.ysize
01:00007B80 X lev8
01:00007B80 X lev8.y
01:00007B81 X lev8.x
01:00007B83 X lev8.xoff
01:00007B84 X lev8.yoff
01:00007B85 X lev8.xsize
01:00007B86 X lev8.ysize
01:00007B87 X lev9
01:00007B87 X lev9.y
01:00007B88 X lev9.x
01:00007B8A X lev9.xoff
01:00007B8B X lev9.yoff
01:00007B8C X lev9.xsize
01:00007B8D X lev9.ysize
01:00007B8E X levA
01:00007B8E X levA.y
01:00007B8F X levA.x
01:00007B91 X levA.xoff
01:00007B92 X levA.yoff
01:00007B93 X levA.xsize
01:00007B94 X levA.ysize
01:00007B95 X levB
01:00007B95 X levB.y
01:00007B96 X levB.x
01:00007B98 X levB.xoff
01:00007B99 X levB.yoff
01:00007B9A X levB.xsize
01:00007B9B X levB.ysize
01:00007B9C X levC
01:00007B9C X levC.y
01:00007B9D X levC.x
01:00007B9F X levC.xoff
01:00007BA0 X levC.yoff
01:00007BA1 X levC.xsize
01:00007BA2 X levC.ysize
01:00007BA3 X levD
01:00007BA3 X levD.y
01:00007BA4 X levD.x
01:00007BA6 X levD.xoff
01:00007BA7 X levD.yoff
01:00007BA8 X levD.xsize
01:00007BA9 X levD.ysize
01:00007BAA X levE
01:00007BAA X levE.y
01:00007BAB X levE.x
01:00007BAD X levE.xoff
01:00007BAE X levE.yoff
01:00007BAF X levE.xsize
01:00007BB0 X levE.ysize
01:00007BB1 X levF
01:00007BB1 X levF.y
01:00007BB2 X levF.x
01:00007BB4 X levF.xoff
01:00007BB5 X levF.yoff
01:00007BB6 X levF.xsize
01:00007BB7 X levF.ysize
01:00007BB8   test_runway
01:00007D08   test_runway.noexplosion
01:00007D10   test_runway.test_level_limit
01:00007D7F   test_runway.fakemain
01:00007D94   test_runway.kill_all
01:00007DBF   test_runway.next
01:00007DCB   test_runway.explode_line
01:00007DFD   test_runway.damage_line
01:00007E47   test_runway.rand_tile
01:00007E74   test_runway.set_colors_and_tile0
01:00007E9E   test_runway.exposion_wave
01:00007F0D   test_runway.next_sprt
01:00007F14   fade_out
01:0000000C X rdslt
01:0000001C X CALSLT
01:00000180   chgcpu
01:0000FCC1 X exttbl
01:00007F34   _set_r800
01:00007F55   set_turbo_tr
01:00007F5D   _set_goodmode
01:00007F74   _hb_10p_hb20p_patch
02:00008000 X message_pg2
02:0000800E   levelinit
02:00008040   meta_levels
02:00008060   meta_pnt0
02:000080B2   meta_pnt1
02:000083F3   meta_pnt2
02:00008822   meta_pnt3
02:00008C47   meta_pnt4
02:00009092   meta_pnt5
02:00009496   meta_pnt6
02:00009899   meta_pnt7
02:00009C9B   meta_pnt8
02:0000A07E   meta_pnt9
02:0000A43F   meta_pntA
02:0000A8B2   meta_pntB
02:0000ACDE   meta_pntC
02:0000AF91   meta_pntD
02:0000B39D   meta_pntE
02:0000B7AF   meta_pntF
02:0000BB86   greetings
02:0000BBEA   greetings1
02:0000BC34   greetings2
02:0000BC8F   _cls
02:0000BC9E   victory_text2
02:0000BCC0   victory_text
02:0000BD06   victory_text1
02:0000BD25   wait_music_or_key
02:0000BD34   wait_time_or_key
02:0000BD37   wait_time_or_key_bc
02:0000BD46   rom_tileset_miz
02:0000BF75 X endpage2
03:00008000 X message_pg3
03:0000800F   splash_shps
03:000087DC   splash_clrs
03:00008DE4   vsplash_shps
03:000091D9   vsplash_clrs
03:0000952C   tile_init
03:0000953E X l1_15_init
03:0000960A   toshiba_vram_layout
03:0000966B   shuttle_init
03:00009736   _out
03:00009739   set_star_shape
03:00009765   set_star_color
03:00009791   chr_tileset1_common
03:00009BE7   chr_tileset2_common
03:0000A05A   clr_tileset1_common
03:0000A1B4   clr_tileset2_common
03:0000A326   chr_tileset1_up
03:0000A378   chr_tileset1_dw
03:0000A3D0   clr_tileset1
03:0000A405   chr_tileset2_up
03:0000A463   chr_tileset2_dw
03:0000A4CC   clr_tileset2
03:0000A509   chr_tileset0_u_ms
03:0000A5DD   chr_tileset0_d_ms
03:0000A6B8   chr_tileset1_u_ms
03:0000A791   chr_tileset1_d_ms
03:0000A871   clr_tileset0_ms
03:0000A985   clr_tileset1_ms
03:0000AA9F   meta_pnt_table_u_miz
03:0000AD2C   meta_pnt_table_d_miz
03:0000AFC6   meta_pnt_table_u_ms_miz
03:0000B04D   meta_pnt_table_d_ms_miz
03:0000B0D6   clr_map
03:0000B0FE   clr_table0
03:0000B0FE   clr_table1
03:0000B0FE   clr_tableE
03:0000B0FE   clr_tableD
03:0000B10E   clr_table2
03:0000B10E   clr_table9
03:0000B10E   clr_tableC
03:0000B11E   clr_table3
03:0000B11E   clr_table6
03:0000B11E   clr_tableA
03:0000B12E   clr_table4
03:0000B12E   clr_table7
03:0000B12E   clr_table8
03:0000B13E   clr_table5
03:0000B13E   clr_tableB
03:0000B13E   clr_tableF
03:0000B14E   clr_tab
03:0000B16E   victory_screen
03:0000B1C5   show_manta
03:0000B217   music_miz_buffer
03:0000BF7C X endpage3
03:0000FE00   MSX_O_Mizer_buf
03:0000FD09   ram_sat
03:0000F87F   ram_tileset
03:0000FFC5   slotvar
03:0000FFC6   slotram
03:0000FFC7   SCC
03:0000FFC8   curslot
03:0000FFC9   music_flag
03:0000C000   meta_pnt_table_u
03:0000C400   meta_pnt_table_d
03:0000C800   miz_buffer
03:0000D400   level_buffer
03:0000EC20   toshiba_switch
03:0000EC21   game_speed
03:0000EC22   victory
03:0000EC23   visible_sprts
03:0000EC24   ingame
03:0000EC25   aniframe
03:0000EC26   old_aniframe
03:0000EC27   ms_state
03:0000EC28   anispeed
03:0000EC29   enable_cheat
03:0000EC2A   PT3_SETUP
03:0000EC2B   PT3_MODADDR
03:0000EC2D   PT3_CrPsPtr
03:0000EC2F   PT3_SAMPTRS
03:0000EC31   PT3_OrnPtrs
03:0000EC33   PT3_PDSP
03:0000EC35   PT3_CSP
03:0000EC37   PT3_PSP
03:0000EC39   PT3_PrNote
03:0000EC3A   PT3_PrSlide
03:0000EC3C   PT3_AdInPtA
03:0000EC3E   PT3_AdInPtB
03:0000EC40   PT3_AdInPtC
03:0000EC42   PT3_LPosPtr
03:0000EC44   PT3_PatsPtr
03:0000EC46   PT3_Delay
03:0000EC47   PT3_AddToEn
03:0000EC48   PT3_Env_Del
03:0000EC49   PT3_ESldAdd
03:0000EC4B   VARS
03:0000EC4B   ChanA
03:0000EC69   ChanB
03:0000EC87   ChanC
03:0000ECA5   DelyCnt
03:0000ECA6   CurESld
03:0000ECA8   CurEDel
03:0000BF7D   Ns_Base_AddToNs
03:0000ECA9   Ns_Base
03:0000ECAA   AddToNs
03:0000ECAB   AYREGS
03:0000ECAB   VT_
03:0000ECB9   EnvBase
03:0000ECBB   VAR0END
03:0000EDAB   _psg_vol_fix
03:0000EDAC   _sfx_vol_fix
03:0000EDAD   _scc_vol_fix
03:0000EDAE   fade_psg_vol_fix
03:0000EDAF   fade_scc_vol_fix
03:0000EDB0   _psg_vol_balance
03:0000EDB2   _scc_vol_balance
03:0000EDB4   AYREGS_CPY
03:0000EDC1   wchA
03:0000EDC2   wchB
03:0000EDC3   wchC
03:0000EDC4   OSmplA
03:0000EDC5 X OSmplB
03:0000EDC6 X OSmplC
03:0000EDC7   _waves
03:0000EDD7   reverse_sat
03:0000EDD8   ayFX_PRIORITY
03:0000EDD9 X ayFX_PLAYING
03:0000EDDA X ayFX_CURRENT
03:0000EDDB   ayFX_POINTER
03:0000EDDD   ayFX_TONE
03:0000EDDF   ayFX_NOISE
03:0000EDE0   ayFX_VOLUME
03:0000EDE1   ayFX_CHANNEL
03:0000EDE2   ayFX_VT
03:0000EDE4   vsf
03:0000EDE5   cnt
03:0000EDE6 X ayend
03:0000EDE6   randSeed
03:0000EDE8   assault_wave_timer
03:0000EDEA   wave_count
03:0000EDEB   landing_permission
03:0000EDEC   bullet_rate
03:0000EDED   dxmap
03:0000EDEE   xmap
03:0000EDF0   yship
03:0000EDF1   xship
03:0000EDF3   cur_level
03:0000EDF4   next_level
03:0000EDF5   sprite_3c
03:0000EDF6   clr_table
03:0000EDF8   joystick
03:0000EDF9   old_joystick
03:0000EDFA   chang_joystick
03:0000EDFB   menu_item
03:0000EDFC   already_dead
03:0000EDFD   god_mode
03:0000EDFE   halt_game
03:0000EDFF   menu_level
03:0000EDFF   halt_gamef1
03:0000EE00   lives
03:0000EE03 X dummy_
03:0000EE07   score
03:0000EE0E   score_bin
03:0000EE12   lives_bin
03:0000EE13   toggle_scc
03:0000EE14   save_SCC
00:00000000   enemy_data.y
00:00000001   enemy_data.x
00:00000003   enemy_data.xoff
00:00000004   enemy_data.yoff
00:00000005   enemy_data.xsize
00:00000006   enemy_data.ysize
00:00000007   enemy_data.status
00:00000008   enemy_data.cntr
00:00000009   enemy_data.kind
00:0000000A   enemy_data.frame
00:0000000B   enemy_data.color
00:0000000C   enemy_data.speed
00:0000000E   enemy_data
03:0000EE15   enemies
03:0000EE85   ms_bullets
03:0000EEA1   enem_bullets


 Output: main64.out
-------------------------------------------------

 Page: 00
  Org: 00000000  Size: *  Used: 00000000

    No output

 Output: URDIUM64.rom
-------------------------------------------------

 Page: 00
  Org: 00000000  Size: 00004000  Used: 00003F45

   Address   Length Align   Label
   00000000      37         write_2k
   00000025      17         disp_page1
   00000036       2       <empty>
   00000038   16061     @   isr
   00003EF5      22         enascr
   00003F0B      20         write_256
   00003F1F      17         disp_page0
   00003F30      11         checkkbd
   00003F3B      10         setwrtvram
   00003F45     187       <empty>

 Page: 01
  Org: 00004000  Size: 00004000  Used: 00003F86

   Address   Length Align   Label
   00004000   16262     @   rom_header
   00007F86     122       <empty>

 Page: 02
  Org: 00008000  Size: 00004000  Used: 00003F76

   Address   Length Align   Label
   00008000   16246         message_pg2
   0000BF76     138       <empty>

 Page: 03
  Org: 00008000  Size: 00004000  Used: 00003F7D

   Address   Length Align   Label
   00008000   16253         message_pg3
   0000BF7D     131       <empty>
